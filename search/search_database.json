var tipuesearch = {"pages":[{"title":" PIC ","text":"PIC PIC is named after the Huastec word PIC which means otter. A work in progress on writing a cool backend for Fortan applications focused on Quantum Chemistry software. Building and dependencies There’s two build systems included in the present version, CMake and the Fortran Package Manager . The dependencies of the project are, as of now, CMake (if using cmake), MPI, OpenMP, and a BLAS/LAPACK library. Documentation The code itself is documented using FORD and the documentation is available here . Comments in the code that are prefixed with !! are considered documentation comments and will be processed by FORD. Comments without that prefix are considered regular comments and will not be processed by FORD. So, please do not use !! for your comments unless you want them to be included in the documentation. CMake CMake offers a very modular build of PIC, the following options are available and can be triggered by -DPIC_ENABLE_XYZ=ON/OFF Option Name Default Description PIC_DEFAULT_INT8 OFF Use 8-byte integers as default PIC_ENABLE_MPI OFF Enable the use of MPI in PIC PIC_ENABLE_OMP OFF Enable the use of OpenMP in PIC PIC_ENABLE_BLAS OFF Enable BLAS/LAPACK libraries in PIC PIC_ENABLE_TESTING ON Enable testing for PIC PIC_ENABLE_JONQUIL OFF Enable Jonquil for JSON/TOML handling Advanced options: Option Name Default Description PIC_USE_VAPAA OFF Use vapaa for binding to MPI Information on vapaa see here which is my\npersonal fork which is pulled from here, and Jeff’s project . Will update to use the orignal project at a later date. Building: mkdir build\ncd build\ncmake ../\nmake -j\nctest FPM Install the FPM following the instructions and then simply: fpm build Contributing Please see the contributing guidelines for information on how to contribute to the project. Developer Info Jorge Luis Galvez Vallejo","tags":"home","url":"index.html"},{"title":"flop_rate_type – PIC ","text":"type, public :: flop_rate_type derived type for flop rate, contains a timer and a flop recorder Inherits type~~flop_rate_type~~InheritsGraph type~flop_rate_type flop_rate_type type~flop_recorder_type flop_recorder_type type~flop_rate_type->type~flop_recorder_type m_flops type~pic_timer_type pic_timer_type type~flop_rate_type->type~pic_timer_type m_timer Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial real(kind=dp), private :: m_flop_rate private by default so that people use the accessor functions type( flop_recorder_type ), private :: m_flops type( pic_timer_type ), private :: m_timer Type-Bound Procedures procedure, public, non_overridable :: add_flops => flop_rate_add_flops private  subroutine flop_rate_add_flops (self, flops) add flops to the flop rate type, this will add the flops to the flop recorder\nUsage: call my_flop_rate%add_flops(1000) Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops procedure, public, non_overridable :: get_flop_rate => flop_rate_get_flop_rate private  function flop_rate_get_flop_rate (self) result(flop_rate) get the flop rate in GFLOP/s, this will calculate the flop rate based on the\nnumber of flops and the elapsed time Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Return Value real(kind=dp) procedure, public, non_overridable :: get_flops => flop_rate_get_flops private  function flop_rate_get_flops (self) result(flops) get the number of flops recorded in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value integer(kind=int64) procedure, public, non_overridable :: get_time => flop_rate_get_time private  function flop_rate_get_time (self) result(time) get the elapsed time in seconds from the timer contained in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value real(kind=dp) procedure, public, non_overridable :: report => flop_rate_report private  subroutine flop_rate_report (self) report the flop rate, this will print the flop rate in GFLOP/s Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self procedure, public, non_overridable :: reset => flop_rate_reset private  subroutine flop_rate_reset (self) reset the flop rate type, this will reset the timer and the flop recorder Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self procedure, public, non_overridable :: start_time => flop_rate_start_time private  subroutine flop_rate_start_time (self) Calls the start method for the timer contained in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self procedure, public, non_overridable :: stop_time => flop_rate_stop_time private  subroutine flop_rate_stop_time (self) Calls the stop method for the timer contained in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Source Code type flop_rate_type !! derived type for flop rate, contains a timer and a flop recorder private type ( pic_timer_type ) :: m_timer type ( flop_recorder_type ) :: m_flops real ( dp ) :: m_flop_rate !! private by default so that people use the accessor functions contains procedure , non_overridable :: start_time => flop_rate_start_time procedure , non_overridable :: stop_time => flop_rate_stop_time procedure , non_overridable :: add_flops => flop_rate_add_flops procedure , non_overridable :: get_flops => flop_rate_get_flops procedure , non_overridable :: get_time => flop_rate_get_time procedure , non_overridable :: get_flop_rate => flop_rate_get_flop_rate procedure , non_overridable :: report => flop_rate_report procedure , non_overridable :: reset => flop_rate_reset end type flop_rate_type","tags":"","url":"type/flop_rate_type.html"},{"title":"pic_comm_type – PIC ","text":"type, public :: pic_comm_type custom data type that holds the MPI communicators Inherits type~~pic_comm_type~~InheritsGraph type~pic_comm_type pic_comm_type MPI_COMM MPI_COMM type~pic_comm_type->MPI_COMM comm Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type(MPI_COMM), public :: comm use the MPI_COMM from the mpi_f08 module interface integer(kind=int32), public :: m_ierr integer(kind=int32), public :: m_rank MPI rank integer(kind=int32), public :: m_size MPI size Type-Bound Procedures procedure, public :: finalize => pic_comm_finalize private  subroutine pic_comm_finalize (self) finalize the MPI library Arguments Type Intent Optional Attributes Name class( pic_comm_type ), intent(inout) :: self procedure, public :: init => pic_comm_init private  subroutine pic_comm_init (self) initilalize the MPI library and get the size and rank variables Arguments Type Intent Optional Attributes Name class( pic_comm_type ), intent(inout) :: self Source Code type :: pic_comm_type !! custom data type that holds the MPI communicators private type ( MPI_COMM ), public :: comm !! use the MPI_COMM from the mpi_f08 module interface integer ( int32 ), public :: m_rank !! MPI rank integer ( int32 ), public :: m_size !! MPI size integer ( int32 ), public :: m_ierr contains procedure :: init => pic_comm_init procedure :: finalize => pic_comm_finalize end type pic_comm_type","tags":"","url":"type/pic_comm_type.html"},{"title":"pic_string_type – PIC ","text":"type, public :: pic_string_type pic_string_type holds a dynamic string, intends to be similar to std::string in C++ Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: buf integer(kind=int64), public :: cap = 0_int64 integer(kind=int64), public :: len = 0_int64 Finalization Procedures final :: pic_string_finalize private  subroutine pic_string_finalize (self) finalizer to deallocate the string buffer type Arguments Type Intent Optional Attributes Name type( pic_string_type ), intent(inout) :: self Type-Bound Procedures procedure, public :: append => pic_string_append private  subroutine pic_string_append (self, s) append a string to the current string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=*), intent(in) :: s procedure, public :: assign => pic_string_assign private  subroutine pic_string_assign (self, s) assign a new value to the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=*), intent(in) :: s procedure, public :: capacity => pic_string_capacity private pure function pic_string_capacity (self) result(res) return the current capacity of the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value integer(kind=int64) procedure, public :: clear => pic_string_clear private  subroutine pic_string_clear (self) clear the string content Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self procedure, public :: empty => pic_string_empty private pure function pic_string_empty (self) result(res) return true if the string is empty Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value logical procedure, public :: ends_with => pic_string_ends_with private pure function pic_string_ends_with (self, pat) result(ok) return true if the string ends with the given pattern Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat Return Value logical procedure, public :: find => pic_string_find private pure function pic_string_find (self, pat, from) result(pos) find the first occurrence of pattern ‘pat’ in the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat integer(kind=int64), intent(in), optional :: from Return Value integer(kind=int64) procedure, public :: get => pic_string_get private pure function pic_string_get (self, i) result(ch) get the character at position i (1-based) Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self integer(kind=int64), intent(in) :: i Return Value character(len=1) procedure, public :: ltrim => pic_string_ltrim private  subroutine pic_string_ltrim (self) trim leading whitespace characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self procedure, public :: push_back => pic_string_push_back private  subroutine pic_string_push_back (self, ch) append a single character to the current string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=1), intent(in) :: ch procedure, public :: release => pic_string_release private  subroutine pic_string_release (self) release the internal buffer and reset the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self procedure, public :: reserve => pic_string_reserve private  subroutine pic_string_reserve (self, n) ensure the string has capacity for at least n characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: n procedure, public :: rtrim => pic_string_rtrim private  subroutine pic_string_rtrim (self) trim trailing whitespace characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self procedure, public :: set => pic_string_set private  subroutine pic_string_set (self, i, ch) set the character at position i (1-based) Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: i character(len=1), intent(in) :: ch procedure, public :: shrink_to_fit => pic_string_shrink_to_fit private  subroutine pic_string_shrink_to_fit (self) shrink the capacity to fit the current size Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self procedure, public :: size => pic_string_size private pure function pic_string_size (self) result(res) return the current size of the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value integer(kind=int64) procedure, public :: starts_with => pic_string_starts_with private pure function pic_string_starts_with (self, pat) result(ok) return true if the string starts with the given pattern Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat Return Value logical procedure, public :: substr => pic_string_substr private  function pic_string_substr (self, i, n) result(out) return a substring starting at index i (1-based) with length n Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self integer(kind=int64), intent(in) :: i integer(kind=int64), intent(in) :: n Return Value type( pic_string_type ) procedure, public :: to_char => pic_string_to_char private  function pic_string_to_char (self) result(out) convert the pic_string_type to a standard Fortran character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value character(len=self) procedure, public :: trim => pic_string_trim private  subroutine pic_string_trim (self) trim leading and trailing whitespace characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Source Code type :: pic_string_type !! pic_string_type holds a dynamic string, intends to be similar to std::string in C++ character ( len = :), allocatable :: buf integer ( int64 ) :: len = 0_int64 integer ( int64 ) :: cap = 0_int64 contains ! queries procedure :: size => pic_string_size procedure :: capacity => pic_string_capacity procedure :: empty => pic_string_empty procedure :: starts_with => pic_string_starts_with procedure :: ends_with => pic_string_ends_with ! modifiers procedure :: clear => pic_string_clear procedure :: reserve => pic_string_reserve procedure :: assign => pic_string_assign procedure :: append => pic_string_append procedure :: push_back => pic_string_push_back procedure :: to_char => pic_string_to_char ! in type bindings: procedure :: get => pic_string_get procedure :: set => pic_string_set ! trimming procedure :: ltrim => pic_string_ltrim procedure :: rtrim => pic_string_rtrim procedure :: trim => pic_string_trim ! search & slicing procedure :: find => pic_string_find procedure :: substr => pic_string_substr procedure :: shrink_to_fit => pic_string_shrink_to_fit procedure :: release => pic_string_release ! finalizer final :: pic_string_finalize end type pic_string_type","tags":"","url":"type/pic_string_type.html"},{"title":"run_type – PIC ","text":"type, private :: run_type Used to pass state around in a stack among helper functions for the ORD_SORT and SORT_INDEX algorithms Components Type Visibility Attributes Name Initial integer(kind=int_index), public :: base = 0 integer(kind=int_index), public :: len = 0 Source Code type run_type !! Used to pass state around in a stack among helper functions for the !! `ORD_SORT` and `SORT_INDEX` algorithms integer ( int_index ) :: base = 0 integer ( int_index ) :: len = 0 end type run_type","tags":"","url":"type/run_type.html"},{"title":"pic_timer_type – PIC ","text":"type, public :: pic_timer_type derived type for a timer, contains the start, stop, and count variables\ncan work with or without omp. If PIC is compiled with OpenMP the default\ntimer will be the omp time. This is mostly to minimize problems with threading\nand system clock Inherited by type~~pic_timer_type~~InheritedByGraph type~pic_timer_type pic_timer_type type~flop_rate_type flop_rate_type type~flop_rate_type->type~pic_timer_type m_timer Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial integer(kind=default_int), private :: count_rate = 1_default_int logical, private :: is_running = .false. integer(kind=default_int), private :: start_count = 0_default_int real(kind=dp), private :: start_time = 0.0_dp integer(kind=default_int), private :: stop_count = 0_default_int real(kind=dp), private :: stop_time = 0.0_dp real(kind=dp), private :: walltime Type-Bound Procedures procedure, public, non_overridable :: get_elapsed_time => timer_get_elapsed_time private  function timer_get_elapsed_time (self) result(elapsed) Returns the elapsed time as a real(dp) variable Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(in) :: self Return Value real(kind=dp) procedure, public, non_overridable :: print_time => timer_print_time private  subroutine timer_print_time (self) Prints the elapsed time at the time of calling Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(in) :: self procedure, public, non_overridable :: start => timer_start private  subroutine timer_start (self) starts the timer. If OMP is enabled, it will use omp_get_wtime()\nif not, it will use Fortran’s system_clock Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(inout) :: self procedure, public, non_overridable :: stop => timer_stop private  subroutine timer_stop (self) stop the timer. If OMP is enabled, it will use omp_get_wtime()\nif not, it will use Fortran’s system_clock Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(inout) :: self Source Code type :: pic_timer_type !! derived type for a timer, contains the start, stop, and count variables !! can work with or without omp. If PIC is compiled with OpenMP the default !! timer will be the omp time. This is mostly to minimize problems with threading !! and system clock private real ( dp ) :: start_time = 0.0_dp real ( dp ) :: stop_time = 0.0_dp real ( dp ) :: walltime logical :: is_running = . false . integer ( default_int ) :: start_count = 0_default_int integer ( default_int ) :: stop_count = 0_default_int integer ( default_int ) :: count_rate = 1_default_int contains procedure , non_overridable :: start => timer_start procedure , non_overridable :: stop => timer_stop procedure , non_overridable :: print_time => timer_print_time procedure , non_overridable :: get_elapsed_time => timer_get_elapsed_time end type pic_timer_type","tags":"","url":"type/pic_timer_type.html"},{"title":"run_type – PIC ","text":"type, private :: run_type Used to pass state around in a stack among helper functions for the ORD_SORT and SORT_INDEX algorithms Components Type Visibility Attributes Name Initial integer(kind=int_index), public :: base = 0 integer(kind=int_index), public :: len = 0 Source Code type run_type !! Used to pass state around in a stack among helper functions for the !! `ORD_SORT` and `SORT_INDEX` algorithms integer ( int_index ) :: base = 0 integer ( int_index ) :: len = 0 end type run_type","tags":"","url":"type/run_type~2.html"},{"title":"logger_type – PIC ","text":"type, public :: logger_type custom logger data type Components Type Visibility Attributes Name Initial integer(kind=default_int), public :: log_file_level = verbose_level set default log file log level to verbose integer(kind=default_int), public :: log_level = info_level set default log level to info logical, private :: log_file_open = .false. integer(kind=default_int), private :: log_file_unit = -1 Type-Bound Procedures procedure, public, pass(self), non_overridable :: close_log_file Close the log file, needs to be called at the end of the program.\nUsage: call my_logger%close_log_file() private  subroutine close_log_file (self) Close the log file, needs to be called at the end of the program Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self procedure, public, pass(self), non_overridable :: configuration Get the current logger verbosity configuration.\nUsage: call my_logger%configuration(level) private pure subroutine configuration (self, level) Get the current logger verbosity configuration Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self integer(kind=default_int), intent(out), optional :: level procedure, public, pass(self), non_overridable :: configure Configure the logger to be a certain verbosity level.\nUsage: call my_logger%configure(level) private pure subroutine configure (self, level) Configure the logger to be a certain verbosity level Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self integer(kind=default_int), intent(in), optional :: level procedure, public, pass(self), non_overridable :: configure_file_output Configure the logger to file to be a certain verbosity level.\nUsage: call my_logger%configure_file_output(filename, level) private  subroutine configure_file_output (self, filename, level) Configure the logger to file to be a certain verbosity level Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self character(len=*), intent(in) :: filename integer(kind=default_int), intent(in), optional :: level procedure, public, pass(self), non_overridable :: debug Log a message that will only be printed at the debug level of verbosity.\nUsage: call my_logger%debug(“MESSAGE”) private  subroutine debug (self, message, module, procedure) Log a message that will only be printed at the debug level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self), non_overridable :: error Log a message that will only be printed at the error level of verbosity.\nUsage: call my_logger%error(“MESSAGE”) private  subroutine error (self, message, module, procedure) Log a message that will only be printed at the error of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self), non_overridable :: info Log a message that will only be printed at the info level of verbosity.\nUsage: call my_logger%info(“MESSAGE”) private  subroutine info (self, message, module, procedure) Log a message that will only be printed at the info level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self), non_overridable :: performance Log a message that will only be printed at the performance level of verbosity.\nUsage: call my_logger%performance(“MESSAGE”) private  subroutine performance (self, message, module, procedure) Log a message that will only be printed at the performance of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self), non_overridable :: verbose Log a message that will only be printed at the verbose level of verbosity.\nUsage: call my_logger%verbose(“MESSAGE”) private  subroutine verbose (self, message, module, procedure) Log a message that will only be printed at the verbose level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self), non_overridable :: warning Log a message that will only be printed at the warning level of verbosity.\nUsage: call my_logger%warning(“MESSAGE”) private  subroutine warning (self, message, module, procedure) Log a message that will only be printed at the warning level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, private, pass(self), non_overridable :: log Processes the message and filters it according to the verbosity level set by the user or the default private  subroutine log (self, level, message, module, procedure) internal subroutines that processes the message and filters it according to\nthe verbosity level set by the user or the default\nthis is a private subroutine so it is not exposed to the user Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: level character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code type :: logger_type !! custom logger data type private integer ( default_int ), public :: log_level = info_level !! set default log level to info integer ( default_int ), public :: log_file_level = verbose_level !! set default log file log level to verbose integer ( default_int ), private :: log_file_unit = - 1 logical , private :: log_file_open = . false . contains procedure , public , pass ( self ), non_overridable :: configuration !! Get the current logger verbosity configuration. !! Usage: call my_logger%configuration(level) procedure , public , pass ( self ), non_overridable :: configure !! Configure the logger to be a certain verbosity level. !! Usage: call my_logger%configure(level) procedure , public , pass ( self ), non_overridable :: configure_file_output !! Configure the logger to file to be a certain verbosity level. !! Usage: call my_logger%configure_file_output(filename, level) procedure , public , pass ( self ), non_overridable :: close_log_file !! Close the log file, needs to be called at the end of the program. !! Usage: call my_logger%close_log_file() procedure , public , pass ( self ), non_overridable :: debug !! Log a message that will only be printed at the debug level of verbosity. !! Usage: call my_logger%debug(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: verbose !! Log a message that will only be printed at the verbose level of verbosity. !! Usage: call my_logger%verbose(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: info !! Log a message that will only be printed at the info level of verbosity. !! Usage: call my_logger%info(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: performance !! Log a message that will only be printed at the performance level of verbosity. !! Usage: call my_logger%performance(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: warning !! Log a message that will only be printed at the warning level of verbosity. !! Usage: call my_logger%warning(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: error !! Log a message that will only be printed at the error level of verbosity. !! Usage: call my_logger%error(\"MESSAGE\") procedure , private , pass ( self ), non_overridable :: log !! Processes the message and filters it according to the verbosity level set by the user or the default end type logger_type","tags":"","url":"type/logger_type.html"},{"title":"pic_device_type – PIC ","text":"type, public :: pic_device_type general device container, contains the id, free, total , and used memory Components Type Visibility Attributes Name Initial integer(kind=c_int), public :: device_id = -1_c_int real(kind=dp), public :: free_mb = 0.0_dp real(kind=dp), public :: total_mb = 0.0_dp real(kind=dp), public :: used_mb = 0.0_dp Type-Bound Procedures procedure, public, non_overridable :: get_device_info => get_gpu_information public  subroutine get_gpu_information (self) call my_device%get_gpu_informatio() style subroutine to populate the object Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(inout) :: self Source Code type :: pic_device_type !! general device container, contains the id, free, total , and used memory real ( dp ) :: free_mb = 0.0_dp real ( dp ) :: total_mb = 0.0_dp real ( dp ) :: used_mb = 0.0_dp integer ( c_int ) :: device_id = - 1_c_int contains procedure , non_overridable :: get_device_info => get_gpu_information end type pic_device_type","tags":"","url":"type/pic_device_type.html"},{"title":"flop_recorder_type – PIC ","text":"type, public :: flop_recorder_type the flop recorder type simply contains a flop count\nthis should be the largest possible integer in the planet\ncurrently this will overflow for zetta flops Inherited by type~~flop_recorder_type~~InheritedByGraph type~flop_recorder_type flop_recorder_type type~flop_rate_type flop_rate_type type~flop_rate_type->type~flop_recorder_type m_flops Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial integer(kind=int64), private :: flop_count = 0_int64 Type-Bound Procedures procedure, public, non_overridable :: add => add_flops private  subroutine add_flops (self, flops) Add an int64 variable which contains the FLOPs\nwe use int64 since we might reach very large FLOP counts Read more… Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops procedure, public, non_overridable :: get => get_flops private  function get_flops (self) result(flops) Get the int64 number of FLOPs we currently have in the counter Read more… Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(in) :: self Return Value integer(kind=int64) procedure, public, non_overridable :: reset => reset_flop_counter private  subroutine reset_flop_counter (self) Resets the flop counter to 0_int64 Read more… Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self Source Code type :: flop_recorder_type !! the flop recorder type simply contains a flop count !! this should be the largest possible integer in the planet !! currently this will overflow for zetta flops private integer ( int64 ) :: flop_count = 0_int64 contains procedure , non_overridable :: add => add_flops procedure , non_overridable :: get => get_flops procedure , non_overridable :: reset => reset_flop_counter end type flop_recorder_type","tags":"","url":"type/flop_recorder_type.html"},{"title":"flop_rate_get_flop_rate – PIC","text":"private  function flop_rate_get_flop_rate(self) result(flop_rate) get the flop rate in GFLOP/s, this will calculate the flop rate based on the\nnumber of flops and the elapsed time Usage: flop_rate = my_flop_rate%get_flop_rate() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Return Value real(kind=dp) Calls proc~~flop_rate_get_flop_rate~~CallsGraph proc~flop_rate_get_flop_rate flop_rate_type%flop_rate_get_flop_rate proc~get_flops flop_recorder_type%get_flops proc~flop_rate_get_flop_rate->proc~get_flops proc~timer_get_elapsed_time pic_timer_type%timer_get_elapsed_time proc~flop_rate_get_flop_rate->proc~timer_get_elapsed_time Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~flop_rate_get_flop_rate~~CalledByGraph proc~flop_rate_get_flop_rate flop_rate_type%flop_rate_get_flop_rate proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->proc~flop_rate_get_flop_rate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: flops real(kind=dp), private :: time Source Code function flop_rate_get_flop_rate ( self ) result ( flop_rate ) !! get the flop rate in GFLOP/s, this will calculate the flop rate based on the !! number of flops and the elapsed time !! !! Usage: flop_rate = my_flop_rate%get_flop_rate() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self real ( dp ) :: flop_rate real ( dp ) :: time integer ( int64 ) :: flops flops = self % m_flops % get () time = self % m_timer % get_elapsed_time () if ( time <= 0.0_dp ) then print * , \"Warning: Time is zero or negative, setting flop rate to zero.\" self % m_flop_rate = 0.0_dp flop_rate = 0.0_dp return else self % m_flop_rate = flops / time / 1.0e9_dp flop_rate = self % m_flop_rate end if end function flop_rate_get_flop_rate","tags":"","url":"proc/flop_rate_get_flop_rate.html"},{"title":"flop_rate_get_flops – PIC","text":"private  function flop_rate_get_flops(self) result(flops) get the number of flops recorded in the flop rate type Usage: flops = my_flop_rate%get_flops() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value integer(kind=int64) Calls proc~~flop_rate_get_flops~~CallsGraph proc~flop_rate_get_flops flop_rate_type%flop_rate_get_flops proc~get_flops flop_recorder_type%get_flops proc~flop_rate_get_flops->proc~get_flops Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code function flop_rate_get_flops ( self ) result ( flops ) !! get the number of flops recorded in the flop rate type !! !! Usage: flops = my_flop_rate%get_flops() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % m_flops % get () end function flop_rate_get_flops","tags":"","url":"proc/flop_rate_get_flops.html"},{"title":"flop_rate_get_time – PIC","text":"private  function flop_rate_get_time(self) result(time) get the elapsed time in seconds from the timer contained in the flop rate type Usage: time = my_flop_rate%get_time() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value real(kind=dp) Calls proc~~flop_rate_get_time~~CallsGraph proc~flop_rate_get_time flop_rate_type%flop_rate_get_time proc~timer_get_elapsed_time pic_timer_type%timer_get_elapsed_time proc~flop_rate_get_time->proc~timer_get_elapsed_time Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code function flop_rate_get_time ( self ) result ( time ) !! get the elapsed time in seconds from the timer contained in the flop rate type !! !! Usage: time = my_flop_rate%get_time() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( in ) :: self real ( dp ) :: time time = self % m_timer % get_elapsed_time () end function flop_rate_get_time","tags":"","url":"proc/flop_rate_get_time.html"},{"title":"flop_rate_add_flops – PIC","text":"private  subroutine flop_rate_add_flops(self, flops) add flops to the flop rate type, this will add the flops to the flop recorder\nUsage: call my_flop_rate%add_flops(1000) where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops Calls proc~~flop_rate_add_flops~~CallsGraph proc~flop_rate_add_flops flop_rate_type%flop_rate_add_flops proc~add_flops flop_recorder_type%add_flops proc~flop_rate_add_flops->proc~add_flops Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine flop_rate_add_flops ( self , flops ) !! add flops to the flop rate type, this will add the flops to the flop recorder !! Usage: call my_flop_rate%add_flops(1000) !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops call self % m_flops % add ( flops ) end subroutine flop_rate_add_flops","tags":"","url":"proc/flop_rate_add_flops.html"},{"title":"flop_rate_report – PIC","text":"private  subroutine flop_rate_report(self) report the flop rate, this will print the flop rate in GFLOP/s Usage: call my_flop_rate%report() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Calls proc~~flop_rate_report~~CallsGraph proc~flop_rate_report flop_rate_type%flop_rate_report interface~to_string to_string proc~flop_rate_report->interface~to_string proc~flop_rate_get_flop_rate flop_rate_type%flop_rate_get_flop_rate proc~flop_rate_report->proc~flop_rate_get_flop_rate proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp proc~get_flops flop_recorder_type%get_flops proc~flop_rate_get_flop_rate->proc~get_flops proc~timer_get_elapsed_time pic_timer_type%timer_get_elapsed_time proc~flop_rate_get_flop_rate->proc~timer_get_elapsed_time Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine flop_rate_report ( self ) !! report the flop rate, this will print the flop rate in GFLOP/s !! !! Usage: call my_flop_rate%report() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self self % m_flop_rate = self % get_flop_rate () print * , \"Flop rate is \" // to_string ( self % m_flop_rate ) // \" GFLOP/s\" end subroutine flop_rate_report","tags":"","url":"proc/flop_rate_report.html"},{"title":"flop_rate_reset – PIC","text":"private  subroutine flop_rate_reset(self) reset the flop rate type, this will reset the timer and the flop recorder Usage: call my_flop_rate%reset() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Calls proc~~flop_rate_reset~~CallsGraph proc~flop_rate_reset flop_rate_type%flop_rate_reset proc~reset_flop_counter flop_recorder_type%reset_flop_counter proc~flop_rate_reset->proc~reset_flop_counter Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine flop_rate_reset ( self ) !! reset the flop rate type, this will reset the timer and the flop recorder !! !! Usage: call my_flop_rate%reset() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self call self % m_flops % reset () end subroutine flop_rate_reset","tags":"","url":"proc/flop_rate_reset.html"},{"title":"flop_rate_start_time – PIC","text":"private  subroutine flop_rate_start_time(self) Calls the start method for the timer contained in the flop rate type Usage: call my_flop_rate%start_time() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Calls proc~~flop_rate_start_time~~CallsGraph proc~flop_rate_start_time flop_rate_type%flop_rate_start_time proc~timer_start pic_timer_type%timer_start proc~flop_rate_start_time->proc~timer_start Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine flop_rate_start_time ( self ) !! Calls the start method for the timer contained in the flop rate type !! !! Usage: call my_flop_rate%start_time() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % start () end subroutine flop_rate_start_time","tags":"","url":"proc/flop_rate_start_time.html"},{"title":"flop_rate_stop_time – PIC","text":"private  subroutine flop_rate_stop_time(self) Calls the stop method for the timer contained in the flop rate type Usage: call my_flop_rate%stop_time() where my_flop_rate is an instance of flop_rate_type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Source Code subroutine flop_rate_stop_time ( self ) !! Calls the stop method for the timer contained in the flop rate type !! !! Usage: call my_flop_rate%stop_time() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % stop () end subroutine flop_rate_stop_time","tags":"","url":"proc/flop_rate_stop_time.html"},{"title":"pic_dasum – PIC","text":"private  function pic_dasum(x) result(res) interface for double precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) Calls proc~~pic_dasum~~CallsGraph proc~pic_dasum pic_dasum interface~blas_asum blas_asum proc~pic_dasum->interface~blas_asum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_dasum~~CalledByGraph proc~pic_dasum pic_dasum interface~pic_asum pic_asum interface~pic_asum->proc~pic_dasum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: n Source Code function pic_dasum ( x ) result ( res ) !! interface for double precision absolute sum real ( dp ), intent ( in ) :: x (:) real ( dp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_dasum","tags":"","url":"proc/pic_dasum.html"},{"title":"pic_ddot – PIC","text":"private  function pic_ddot(x, y) result(res) interface for double precision dot product Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(in) :: y (:) Return Value real(kind=dp) Calls proc~~pic_ddot~~CallsGraph proc~pic_ddot pic_ddot interface~blas_dot blas_dot proc~pic_ddot->interface~blas_dot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_ddot~~CalledByGraph proc~pic_ddot pic_ddot interface~pic_dot pic_dot interface~pic_dot->proc~pic_ddot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy integer(kind=default_int), private :: n Source Code function pic_ddot ( x , y ) result ( res ) !! interface for double precision dot product real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( in ) :: y (:) real ( dp ) :: res integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 res = blas_dot ( n , x , incx , y , incy ) end function pic_ddot","tags":"","url":"proc/pic_ddot.html"},{"title":"pic_dzasum – PIC","text":"private  function pic_dzasum(x) result(res) interface for double precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) Calls proc~~pic_dzasum~~CallsGraph proc~pic_dzasum pic_dzasum interface~blas_asum blas_asum proc~pic_dzasum->interface~blas_asum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_dzasum~~CalledByGraph proc~pic_dzasum pic_dzasum interface~pic_asum pic_asum interface~pic_asum->proc~pic_dzasum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: n Source Code function pic_dzasum ( x ) result ( res ) !! interface for double precision complex absolute sum complex ( dp ), intent ( in ) :: x (:) real ( dp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_dzasum","tags":"","url":"proc/pic_dzasum.html"},{"title":"pic_idamax – PIC","text":"private  function pic_idamax(x) result(idx) interface for double precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value integer(kind=default_int) Calls proc~~pic_idamax~~CallsGraph proc~pic_idamax pic_idamax interface~blas_iamax blas_iamax proc~pic_idamax->interface~blas_iamax Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_idamax~~CalledByGraph proc~pic_idamax pic_idamax interface~pic_iamax pic_iamax interface~pic_iamax->proc~pic_idamax Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: n Source Code function pic_idamax ( x ) result ( idx ) !! interface for double precision index of maximum absolute value real ( dp ), intent ( in ) :: x (:) integer ( default_int ) :: idx integer ( default_int ) :: n , incx n = size ( x ) incx = 1 idx = blas_iamax ( n , x , incx ) end function pic_idamax","tags":"","url":"proc/pic_idamax.html"},{"title":"pic_isamax – PIC","text":"private  function pic_isamax(x) result(idx) interface for single precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value integer(kind=default_int) Calls proc~~pic_isamax~~CallsGraph proc~pic_isamax pic_isamax interface~blas_iamax blas_iamax proc~pic_isamax->interface~blas_iamax Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_isamax~~CalledByGraph proc~pic_isamax pic_isamax interface~pic_iamax pic_iamax interface~pic_iamax->proc~pic_isamax Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: n Source Code function pic_isamax ( x ) result ( idx ) !! interface for single precision index of maximum absolute value real ( sp ), intent ( in ) :: x (:) integer ( default_int ) :: idx integer ( default_int ) :: n , incx n = size ( x ) incx = 1 idx = blas_iamax ( n , x , incx ) end function pic_isamax","tags":"","url":"proc/pic_isamax.html"},{"title":"pic_sasum – PIC","text":"private  function pic_sasum(x) result(res) interface for single precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) Calls proc~~pic_sasum~~CallsGraph proc~pic_sasum pic_sasum interface~blas_asum blas_asum proc~pic_sasum->interface~blas_asum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_sasum~~CalledByGraph proc~pic_sasum pic_sasum interface~pic_asum pic_asum interface~pic_asum->proc~pic_sasum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: n Source Code function pic_sasum ( x ) result ( res ) !! interface for single precision absolute sum real ( sp ), intent ( in ) :: x (:) real ( sp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_sasum","tags":"","url":"proc/pic_sasum.html"},{"title":"pic_scasum – PIC","text":"private  function pic_scasum(x) result(res) interface for single precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) Calls proc~~pic_scasum~~CallsGraph proc~pic_scasum pic_scasum interface~blas_asum blas_asum proc~pic_scasum->interface~blas_asum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_scasum~~CalledByGraph proc~pic_scasum pic_scasum interface~pic_asum pic_asum interface~pic_asum->proc~pic_scasum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: n Source Code function pic_scasum ( x ) result ( res ) !! interface for single precision complex absolute sum complex ( sp ), intent ( in ) :: x (:) real ( sp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_scasum","tags":"","url":"proc/pic_scasum.html"},{"title":"pic_sdot – PIC","text":"private  function pic_sdot(x, y) result(res) interface for single precision dot product Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(in) :: y (:) Return Value real(kind=sp) Calls proc~~pic_sdot~~CallsGraph proc~pic_sdot pic_sdot interface~blas_dot blas_dot proc~pic_sdot->interface~blas_dot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_sdot~~CalledByGraph proc~pic_sdot pic_sdot interface~pic_dot pic_dot interface~pic_dot->proc~pic_sdot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy integer(kind=default_int), private :: n Source Code function pic_sdot ( x , y ) result ( res ) !! interface for single precision dot product real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( in ) :: y (:) real ( sp ) :: res integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 res = blas_dot ( n , x , incx , y , incy ) end function pic_sdot","tags":"","url":"proc/pic_sdot.html"},{"title":"pic_daxpy – PIC","text":"private  subroutine pic_daxpy(x, y, alpha) interface for double precision AXPY Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) real(kind=dp), intent(in), optional :: alpha Calls proc~~pic_daxpy~~CallsGraph proc~pic_daxpy pic_daxpy interface~blas_axpy blas_axpy proc~pic_daxpy->interface~blas_axpy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_daxpy~~CalledByGraph proc~pic_daxpy pic_daxpy interface~pic_axpy pic_axpy interface~pic_axpy->proc~pic_daxpy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy real(kind=dp), private :: l_alpha integer(kind=default_int), private :: n Source Code subroutine pic_daxpy ( x , y , alpha ) !! interface for double precision AXPY real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( inout ) :: y (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ) :: l_alpha integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_dp end if call blas_axpy ( n , l_alpha , x , incx , y , incy ) end subroutine pic_daxpy","tags":"","url":"proc/pic_daxpy.html"},{"title":"pic_dcopy – PIC","text":"private  subroutine pic_dcopy(x, y) interface for double precision copy Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) Calls proc~~pic_dcopy~~CallsGraph proc~pic_dcopy pic_dcopy interface~blas_copy blas_copy proc~pic_dcopy->interface~blas_copy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_dcopy~~CalledByGraph proc~pic_dcopy pic_dcopy interface~pic_copy pic_copy interface~pic_copy->proc~pic_dcopy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy integer(kind=default_int), private :: n Source Code subroutine pic_dcopy ( x , y ) !! interface for double precision copy real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( inout ) :: y (:) integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 call blas_copy ( n , x , incx , y , incy ) end subroutine pic_dcopy","tags":"","url":"proc/pic_dcopy.html"},{"title":"pic_dgemm – PIC","text":"private pure subroutine pic_dgemm(A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: B (:,:) real(kind=dp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta Calls proc~~pic_dgemm~~CallsGraph proc~pic_dgemm pic_dgemm interface~blas_gemm blas_gemm proc~pic_dgemm->interface~blas_gemm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_dgemm~~CalledByGraph proc~pic_dgemm pic_dgemm interface~pic_gemm pic_gemm interface~pic_gemm->proc~pic_dgemm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=1), private :: OP_A character(len=1), private :: OP_B integer(kind=default_int), private :: k real(kind=dp), private :: l_alpha real(kind=dp), private :: l_beta integer(kind=default_int), private :: lda integer(kind=default_int), private :: ldb integer(kind=default_int), private :: ldc integer(kind=default_int), private :: m integer(kind=default_int), private :: n Source Code pure subroutine pic_dgemm ( A , B , C , transa , transb , alpha , beta ) !! interface for single precision matrix multiplication real ( dp ), intent ( in ) :: A (:, :) real ( dp ), intent ( in ) :: B (:, :) real ( dp ), intent ( inout ) :: C (:, :) character ( len = 1 ), intent ( in ), optional :: transa character ( len = 1 ), intent ( in ), optional :: transb real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ) :: OP_A , OP_B real ( dp ) :: l_alpha , l_beta integer ( default_int ) :: m , n , k , lda , ldb , ldc ! first check for the constants if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if ! check the OP options, maybe this should not be optional if ( present ( transa )) then OP_A = transa else OP_A = \"N\" end if if ( present ( transb )) then OP_B = transb else OP_B = \"N\" end if ! check for the dimensions now if (( OP_A == \"N\" . or . OP_A == \"n\" )) then k = size ( A , 2 ) else k = size ( A , 1 ) end if ! get LDA, LDB, and LDC lda = max ( 1 , size ( A , 1 )) ldb = max ( 1 , size ( B , 1 )) ldc = max ( 1 , size ( C , 1 )) m = size ( C , 1 ) n = size ( C , 2 ) call blas_gemm ( OP_A , OP_B , m , n , k , l_alpha , A , lda , B , ldb , l_beta , C , ldc ) end subroutine pic_dgemm","tags":"","url":"proc/pic_dgemm.html"},{"title":"pic_dgemv – PIC","text":"private pure subroutine pic_dgemv(A, x, y, trans_a, alpha, beta) interface for double precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta Calls proc~~pic_dgemv~~CallsGraph proc~pic_dgemv pic_dgemv interface~blas_gemv blas_gemv proc~pic_dgemv->interface~blas_gemv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_dgemv~~CalledByGraph proc~pic_dgemv pic_dgemv interface~pic_gemv pic_gemv interface~pic_gemv->proc~pic_dgemv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy real(kind=dp), private :: l_alpha real(kind=dp), private :: l_beta character(len=1), private :: l_trans_a integer(kind=default_int), private :: lda integer(kind=default_int), private :: m integer(kind=default_int), private :: n Source Code pure subroutine pic_dgemv ( A , x , y , trans_a , alpha , beta ) !! interface for double precision matrix-vector multiplication real ( dp ), intent ( in ) :: A (:, :) real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( inout ) :: y (:) character ( len = 1 ), intent ( in ), optional :: trans_a real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta real ( dp ) :: l_alpha , l_beta character ( len = 1 ) :: l_trans_a integer ( default_int ) :: incx , incy , m , n , lda if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if if ( present ( trans_a )) then l_trans_a = trans_a else l_trans_a = \"n\" end if incx = 1 incy = 1 lda = max ( 1 , size ( A , 1 )) m = size ( A , 1 ) n = size ( A , 2 ) call blas_gemv ( l_trans_a , m , n , l_alpha , A , lda , x , incx , l_beta , y , incy ) end subroutine pic_dgemv","tags":"","url":"proc/pic_dgemv.html"},{"title":"pic_dscal – PIC","text":"private  subroutine pic_dscal(x, alpha) interface for double precision scaling Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: x (:) real(kind=dp), intent(in), optional :: alpha Calls proc~~pic_dscal~~CallsGraph proc~pic_dscal pic_dscal interface~blas_scal blas_scal proc~pic_dscal->interface~blas_scal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_dscal~~CalledByGraph proc~pic_dscal pic_dscal interface~pic_scal pic_scal interface~pic_scal->proc~pic_dscal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx real(kind=dp), private :: l_alpha integer(kind=default_int), private :: n Source Code subroutine pic_dscal ( x , alpha ) !! interface for double precision scaling real ( dp ), intent ( inout ) :: x (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ) :: l_alpha integer ( default_int ) :: n , incx n = size ( x ) incx = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_dp end if call blas_scal ( n , l_alpha , x , incx ) end subroutine pic_dscal","tags":"","url":"proc/pic_dscal.html"},{"title":"pic_saxpy – PIC","text":"private  subroutine pic_saxpy(x, y, alpha) interface for single precision AXPY Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) real(kind=sp), intent(in), optional :: alpha Calls proc~~pic_saxpy~~CallsGraph proc~pic_saxpy pic_saxpy interface~blas_axpy blas_axpy proc~pic_saxpy->interface~blas_axpy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_saxpy~~CalledByGraph proc~pic_saxpy pic_saxpy interface~pic_axpy pic_axpy interface~pic_axpy->proc~pic_saxpy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy real(kind=sp), private :: l_alpha integer(kind=default_int), private :: n Source Code subroutine pic_saxpy ( x , y , alpha ) !! interface for single precision AXPY real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( inout ) :: y (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ) :: l_alpha integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if call blas_axpy ( n , l_alpha , x , incx , y , incy ) end subroutine pic_saxpy","tags":"","url":"proc/pic_saxpy.html"},{"title":"pic_scopy – PIC","text":"private  subroutine pic_scopy(x, y) interface for single precision copy Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) Calls proc~~pic_scopy~~CallsGraph proc~pic_scopy pic_scopy interface~blas_copy blas_copy proc~pic_scopy->interface~blas_copy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_scopy~~CalledByGraph proc~pic_scopy pic_scopy interface~pic_copy pic_copy interface~pic_copy->proc~pic_scopy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy integer(kind=default_int), private :: n Source Code subroutine pic_scopy ( x , y ) !! interface for single precision copy real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( inout ) :: y (:) integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 call blas_copy ( n , x , incx , y , incy ) end subroutine pic_scopy","tags":"","url":"proc/pic_scopy.html"},{"title":"pic_sgemm – PIC","text":"private pure subroutine pic_sgemm(A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: B (:,:) real(kind=sp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta Calls proc~~pic_sgemm~~CallsGraph proc~pic_sgemm pic_sgemm interface~blas_gemm blas_gemm proc~pic_sgemm->interface~blas_gemm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_sgemm~~CalledByGraph proc~pic_sgemm pic_sgemm interface~pic_gemm pic_gemm interface~pic_gemm->proc~pic_sgemm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=1), private :: OP_A character(len=1), private :: OP_B integer(kind=default_int), private :: k real(kind=sp), private :: l_alpha real(kind=sp), private :: l_beta integer(kind=default_int), private :: lda integer(kind=default_int), private :: ldb integer(kind=default_int), private :: ldc integer(kind=default_int), private :: m integer(kind=default_int), private :: n Source Code pure subroutine pic_sgemm ( A , B , C , transa , transb , alpha , beta ) !! interface for single precision matrix multiplication real ( sp ), intent ( in ) :: A (:, :) real ( sp ), intent ( in ) :: B (:, :) real ( sp ), intent ( inout ) :: C (:, :) character ( len = 1 ), intent ( in ), optional :: transa character ( len = 1 ), intent ( in ), optional :: transb real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ) :: OP_A , OP_B real ( sp ) :: l_alpha , l_beta integer ( default_int ) :: m , n , k , lda , ldb , ldc ! first check for the constants if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if ! check the OP options, maybe this should not be optional if ( present ( transa )) then OP_A = transa else OP_A = \"N\" end if if ( present ( transb )) then OP_B = transb else OP_B = \"N\" end if ! check for the dimensions now if (( OP_A == \"N\" . or . OP_A == \"n\" )) then k = size ( A , 2 ) else k = size ( A , 1 ) end if ! get LDA, LDB, and LDC lda = max ( 1 , size ( A , 1 )) ldb = max ( 1 , size ( B , 1 )) ldc = max ( 1 , size ( C , 1 )) m = size ( C , 1 ) n = size ( C , 2 ) call blas_gemm ( OP_A , OP_B , m , n , k , l_alpha , A , lda , B , ldb , l_beta , C , ldc ) end subroutine pic_sgemm","tags":"","url":"proc/pic_sgemm.html"},{"title":"pic_sgemv – PIC","text":"private pure subroutine pic_sgemv(A, x, y, trans_a, alpha, beta) interface for single precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta Calls proc~~pic_sgemv~~CallsGraph proc~pic_sgemv pic_sgemv interface~blas_gemv blas_gemv proc~pic_sgemv->interface~blas_gemv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_sgemv~~CalledByGraph proc~pic_sgemv pic_sgemv interface~pic_gemv pic_gemv interface~pic_gemv->proc~pic_sgemv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx integer(kind=default_int), private :: incy real(kind=sp), private :: l_alpha real(kind=sp), private :: l_beta character(len=1), private :: l_trans_a integer(kind=default_int), private :: lda integer(kind=default_int), private :: m integer(kind=default_int), private :: n Source Code pure subroutine pic_sgemv ( A , x , y , trans_a , alpha , beta ) !! interface for single precision matrix-vector multiplication real ( sp ), intent ( in ) :: A (:, :) real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( inout ) :: y (:) character ( len = 1 ), intent ( in ), optional :: trans_a real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta real ( sp ) :: l_alpha , l_beta character ( len = 1 ) :: l_trans_a integer ( default_int ) :: incx , incy , m , n , lda if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if if ( present ( trans_a )) then l_trans_a = trans_a else l_trans_a = \"n\" end if incx = 1 incy = 1 lda = max ( 1 , size ( A , 1 )) m = size ( A , 1 ) n = size ( A , 2 ) call blas_gemv ( l_trans_a , m , n , l_alpha , A , lda , x , incx , l_beta , y , incy ) end subroutine pic_sgemv","tags":"","url":"proc/pic_sgemv.html"},{"title":"pic_sscal – PIC","text":"private  subroutine pic_sscal(x, alpha) interface for single precision scaling Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: x (:) real(kind=sp), intent(in), optional :: alpha Calls proc~~pic_sscal~~CallsGraph proc~pic_sscal pic_sscal interface~blas_scal blas_scal proc~pic_sscal->interface~blas_scal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_sscal~~CalledByGraph proc~pic_sscal pic_sscal interface~pic_scal pic_scal interface~pic_scal->proc~pic_sscal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: incx real(kind=sp), private :: l_alpha integer(kind=default_int), private :: n Source Code subroutine pic_sscal ( x , alpha ) !! interface for single precision scaling real ( sp ), intent ( inout ) :: x (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ) :: l_alpha integer ( default_int ) :: n , incx n = size ( x ) incx = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if call blas_scal ( n , l_alpha , x , incx ) end subroutine pic_sscal","tags":"","url":"proc/pic_sscal.html"},{"title":"pic_asum – PIC","text":"public interface pic_asum general interface of the BLAS ASUM routines, will call SASUM, DASUM, SCASUM, DZASUM Usage: result = pic_asum(x, incx) where x is a vector and incx is the increment, this will return the sum of the absolute values\nof the elements of x. The vector x must be an allocatable array, we deduce the shape from it.\nThe increment incx is 1 by default. Calls interface~~pic_asum~~CallsGraph interface~pic_asum pic_asum proc~pic_dasum pic_dasum interface~pic_asum->proc~pic_dasum proc~pic_dzasum pic_dzasum interface~pic_asum->proc~pic_dzasum proc~pic_sasum pic_sasum interface~pic_asum->proc~pic_sasum proc~pic_scasum pic_scasum interface~pic_asum->proc~pic_scasum interface~blas_asum blas_asum proc~pic_dasum->interface~blas_asum proc~pic_dzasum->interface~blas_asum proc~pic_sasum->interface~blas_asum proc~pic_scasum->interface~blas_asum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  function pic_sasum (x) result(res) interface for single precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) private  function pic_dasum (x) result(res) interface for double precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) private  function pic_scasum (x) result(res) interface for single precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) private  function pic_dzasum (x) result(res) interface for double precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=dp), intent(in) :: x (:) Return Value real(kind=dp)","tags":"","url":"interface/pic_asum.html"},{"title":"pic_axpy – PIC","text":"public interface pic_axpy general interface of the BLAS AXPY routines, will call SAXPY, DAXPY, CAXPY, ZAXPY Usage: call pic_axpy(n, alpha, x, incx, y, incy) where n is the number of elements, alpha is the scaling factor,\nx is the input vector, incx is the increment for x, y is the output vector,\nand incy is the increment for y. The vectors x and y must be allocatable arrays, we deduce the shapes from them.\nThe increments incx and incy are 1 by default. Calls interface~~pic_axpy~~CallsGraph interface~pic_axpy pic_axpy proc~pic_daxpy pic_daxpy interface~pic_axpy->proc~pic_daxpy proc~pic_saxpy pic_saxpy interface~pic_axpy->proc~pic_saxpy interface~blas_axpy blas_axpy proc~pic_daxpy->interface~blas_axpy proc~pic_saxpy->interface~blas_axpy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine pic_saxpy (x, y, alpha) interface for single precision AXPY Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) real(kind=sp), intent(in), optional :: alpha private  subroutine pic_daxpy (x, y, alpha) interface for double precision AXPY Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) real(kind=dp), intent(in), optional :: alpha","tags":"","url":"interface/pic_axpy.html"},{"title":"pic_copy – PIC","text":"public interface pic_copy general interface of the BLAS COPY routines, will call SCOPY, DCOPY, CCOPY, ZCOPY Usage: call pic_copy(x, y) where x is the input vector, y is the output vector.\nThe vectors x and y must be allocatable arrays, we deduce the shapes from them. Calls interface~~pic_copy~~CallsGraph interface~pic_copy pic_copy proc~pic_dcopy pic_dcopy interface~pic_copy->proc~pic_dcopy proc~pic_scopy pic_scopy interface~pic_copy->proc~pic_scopy interface~blas_copy blas_copy proc~pic_dcopy->interface~blas_copy proc~pic_scopy->interface~blas_copy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine pic_scopy (x, y) interface for single precision copy Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) private  subroutine pic_dcopy (x, y) interface for double precision copy Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:)","tags":"","url":"interface/pic_copy.html"},{"title":"pic_dot – PIC","text":"public interface pic_dot general interface of the BLAS DOT routines, will call SDOT, DDOT, CDOTC, ZDOTC Usage: result = pic_dot(x, y) where x is the input vector, y is the output vector.\nThe vectors x and y must be allocatable arrays, we deduce the shapes from them. Calls interface~~pic_dot~~CallsGraph interface~pic_dot pic_dot proc~pic_ddot pic_ddot interface~pic_dot->proc~pic_ddot proc~pic_sdot pic_sdot interface~pic_dot->proc~pic_sdot interface~blas_dot blas_dot proc~pic_ddot->interface~blas_dot proc~pic_sdot->interface~blas_dot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  function pic_sdot (x, y) result(res) interface for single precision dot product Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(in) :: y (:) Return Value real(kind=sp) private  function pic_ddot (x, y) result(res) interface for double precision dot product Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(in) :: y (:) Return Value real(kind=dp)","tags":"","url":"interface/pic_dot.html"},{"title":"pic_gemm – PIC","text":"public interface pic_gemm general interface of the BLAS GEMM routines, will call SGEMM, DGEMM, CGEMM Usage: call pic_gemm(A, B, C, [optional] transa, [optional] transb, [optional] alpha, [optional] beta) where A, B, C are matrices, transa and transb are optional transpose options,\nalpha and beta are optional scaling factors By default, if not specified transA and transB are “N” (no transpose),\nand alpha and beta are 1.0 and 0.0 respectively. The matrices A, B, C must be allocatable arrays, we deduce the shapes from them. Calls interface~~pic_gemm~~CallsGraph interface~pic_gemm pic_gemm proc~pic_dgemm pic_dgemm interface~pic_gemm->proc~pic_dgemm proc~pic_sgemm pic_sgemm interface~pic_gemm->proc~pic_sgemm interface~blas_gemm blas_gemm proc~pic_dgemm->interface~blas_gemm proc~pic_sgemm->interface~blas_gemm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private pure subroutine pic_sgemm (A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: B (:,:) real(kind=sp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta private pure subroutine pic_dgemm (A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: B (:,:) real(kind=dp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta","tags":"","url":"interface/pic_gemm.html"},{"title":"pic_gemv – PIC","text":"public interface pic_gemv general interface of the BLAS GEMV routines, will call SGEMV, DGEMV, CGEMV, ZGEMV Usage: call pic_gemv(A, x, y, [optional] transa, [optional] alpha, [optional] beta) where A is a matrix, x and y are vectors, transa is an optional transpose option,\nalpha and beta are optional scaling factors. The matrix A must be an allocatable array, we deduce the shapes from it.\nTransA is “N” (no transpose) by default. And alpha and beta are 1.0 and 0.0 respectively. Calls interface~~pic_gemv~~CallsGraph interface~pic_gemv pic_gemv proc~pic_dgemv pic_dgemv interface~pic_gemv->proc~pic_dgemv proc~pic_sgemv pic_sgemv interface~pic_gemv->proc~pic_sgemv interface~blas_gemv blas_gemv proc~pic_dgemv->interface~blas_gemv proc~pic_sgemv->interface~blas_gemv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private pure subroutine pic_sgemv (A, x, y, trans_a, alpha, beta) interface for single precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta private pure subroutine pic_dgemv (A, x, y, trans_a, alpha, beta) interface for double precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta","tags":"","url":"interface/pic_gemv.html"},{"title":"pic_iamax – PIC","text":"public interface pic_iamax general interface of the BLAS IAMAX routines, will call ISAMAX, IDAMAX, ICAMAX, IZAMAX Usage: idx = pic_iamax(x, incx) where x is the input vector, incx is the increment.\nThe vector x must be an allocatable array, we deduce the shape from it.\nThe increment incx is 1 by default. Calls interface~~pic_iamax~~CallsGraph interface~pic_iamax pic_iamax proc~pic_idamax pic_idamax interface~pic_iamax->proc~pic_idamax proc~pic_isamax pic_isamax interface~pic_iamax->proc~pic_isamax interface~blas_iamax blas_iamax proc~pic_idamax->interface~blas_iamax proc~pic_isamax->interface~blas_iamax Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  function pic_isamax (x) result(idx) interface for single precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value integer(kind=default_int) private  function pic_idamax (x) result(idx) interface for double precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value integer(kind=default_int)","tags":"","url":"interface/pic_iamax.html"},{"title":"pic_scal – PIC","text":"public interface pic_scal general interface of the BLAS SCAL routines, will call SSCAL, DSCAL, CSCAL, ZSCAL Usage: call pic_scal(x, [optional] alpha) where x is the input vector, alpha is the scaling factor.\nThe vector x must be an allocatable array, we deduce the shape from it.\nThe scaling factor alpha is 1.0 by default. Calls interface~~pic_scal~~CallsGraph interface~pic_scal pic_scal proc~pic_dscal pic_dscal interface~pic_scal->proc~pic_dscal proc~pic_sscal pic_sscal interface~pic_scal->proc~pic_sscal interface~blas_scal blas_scal proc~pic_dscal->interface~blas_scal proc~pic_sscal->interface~blas_scal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine pic_sscal (x, alpha) interface for single precision scaling Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: x (:) real(kind=sp), intent(in), optional :: alpha private  subroutine pic_dscal (x, alpha) interface for double precision scaling Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: x (:) real(kind=dp), intent(in), optional :: alpha","tags":"","url":"interface/pic_scal.html"},{"title":"blas_asum – PIC","text":"private interface blas_asum this is the interface for the BLAS ASUM routines, it will call SASUM, DASUM, SCASUM, DZASUM\nUsage: result = blas_asum(x, incx)\nwhere x is the input vector, incx is the increment. This is not a public interface, it is used internally by pic_asum Called by interface~~blas_asum~~CalledByGraph interface~blas_asum blas_asum proc~pic_dasum pic_dasum proc~pic_dasum->interface~blas_asum proc~pic_dzasum pic_dzasum proc~pic_dzasum->interface~blas_asum proc~pic_sasum pic_sasum proc~pic_sasum->interface~blas_asum proc~pic_scasum pic_scasum proc~pic_scasum->interface~blas_asum interface~pic_asum pic_asum interface~pic_asum->proc~pic_dasum interface~pic_asum->proc~pic_dzasum interface~pic_asum->proc~pic_sasum interface~pic_asum->proc~pic_scasum Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions private pure function dasum(n, x, incx) result(res_dasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=dp) private pure function dzasum(n, x, incx) result(res_dzasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=dp) private pure function sasum(n, x, incx) result(res_sasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=sp) private pure function scasum(n, x, incx) result(res_scasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=sp)","tags":"","url":"interface/blas_asum.html"},{"title":"blas_axpy – PIC","text":"private interface blas_axpy explicit interface for BLAS AXPY routines Usage: call blas_axpy(n, alpha, x, incx, y, incy) This is not a public interface, it is used internally by pic_axpy Called by interface~~blas_axpy~~CalledByGraph interface~blas_axpy blas_axpy proc~pic_daxpy pic_daxpy proc~pic_daxpy->interface~blas_axpy proc~pic_saxpy pic_saxpy proc~pic_saxpy->interface~blas_axpy interface~pic_axpy pic_axpy interface~pic_axpy->proc~pic_daxpy interface~pic_axpy->proc~pic_saxpy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines private pure subroutine caxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: alpha complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine daxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine saxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine zaxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: alpha complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy","tags":"","url":"interface/blas_axpy.html"},{"title":"blas_copy – PIC","text":"private interface blas_copy explicit interface for BLAS COPY routines Usage: call blas_copy(x, y) This is not a public interface, it is used internally by pic_copy Called by interface~~blas_copy~~CalledByGraph interface~blas_copy blas_copy proc~pic_dcopy pic_dcopy proc~pic_dcopy->interface~blas_copy proc~pic_scopy pic_scopy proc~pic_scopy->interface~blas_copy interface~pic_copy pic_copy interface~pic_copy->proc~pic_dcopy interface~pic_copy->proc~pic_scopy Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines private pure subroutine dcopy(n, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine scopy(n, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy","tags":"","url":"interface/blas_copy.html"},{"title":"blas_dot – PIC","text":"private interface blas_dot explicit interface for BLAS DOT routines Usage: result = blas_dot(x, y, incx, incy, n)\nThis is not a public interface, it is used internally by pic_dot Called by interface~~blas_dot~~CalledByGraph interface~blas_dot blas_dot proc~pic_ddot pic_ddot proc~pic_ddot->interface~blas_dot proc~pic_sdot pic_sdot proc~pic_sdot->interface~blas_dot interface~pic_dot pic_dot interface~pic_dot->proc~pic_ddot interface~pic_dot->proc~pic_sdot Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions private pure function cdotc(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=sp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value complex(kind=sp) private pure function ddot(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value real(kind=dp) private pure function sdot(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value real(kind=sp) private pure function zdotc(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=dp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value complex(kind=dp)","tags":"","url":"interface/blas_dot.html"},{"title":"blas_gemm – PIC","text":"private interface blas_gemm explicit interface for BLAS GEMM routines Usage: call blas_gemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) This is not a public interface, it is used internally by pic_gemm Called by interface~~blas_gemm~~CalledByGraph interface~blas_gemm blas_gemm proc~pic_dgemm pic_dgemm proc~pic_dgemm->interface~blas_gemm proc~pic_sgemm pic_sgemm proc~pic_sgemm->interface~blas_gemm interface~pic_gemm pic_gemm interface~pic_gemm->proc~pic_dgemm interface~pic_gemm->proc~pic_sgemm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines private pure subroutine cgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k complex(kind=sp), intent(in) :: alpha complex(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=sp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb complex(kind=sp), intent(in) :: beta complex(kind=sp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private pure subroutine dgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=dp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb real(kind=dp), intent(in) :: beta real(kind=dp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private pure subroutine sgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=sp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb real(kind=sp), intent(in) :: beta real(kind=sp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private pure subroutine zgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k complex(kind=dp), intent(in) :: alpha complex(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=dp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb complex(kind=dp), intent(in) :: beta complex(kind=dp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc","tags":"","url":"interface/blas_gemm.html"},{"title":"blas_gemv – PIC","text":"private interface blas_gemv explicit interface for BLAS GEMV routines Usage: call blas_gemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) This is not a public interface, it is used internally by pic_gemv Called by interface~~blas_gemv~~CalledByGraph interface~blas_gemv blas_gemv proc~pic_dgemv pic_dgemv proc~pic_dgemv->interface~blas_gemv proc~pic_sgemv pic_sgemv proc~pic_sgemv->interface~blas_gemv interface~pic_gemv pic_gemv interface~pic_gemv->proc~pic_dgemv interface~pic_gemv->proc~pic_sgemv Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines private pure subroutine cgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: alpha complex(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=sp), intent(in) :: beta complex(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine dgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(in) :: beta real(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(in) :: beta real(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine zgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: alpha complex(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=dp), intent(in) :: beta complex(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy","tags":"","url":"interface/blas_gemv.html"},{"title":"blas_iamax – PIC","text":"private interface blas_iamax explicit interface for BLAS IAMAX routines Usage: idx = blas_iamax(x, incx) This is not a public interface, it is used internally by pic_iamax Called by interface~~blas_iamax~~CalledByGraph interface~blas_iamax blas_iamax proc~pic_idamax pic_idamax proc~pic_idamax->interface~blas_iamax proc~pic_isamax pic_isamax proc~pic_isamax->interface~blas_iamax interface~pic_iamax pic_iamax interface~pic_iamax->proc~pic_idamax interface~pic_iamax->proc~pic_isamax Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions private pure function idamax(n, x, incx) result(idx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value integer(kind=default_int) private pure function isamax(n, x, incx) result(idx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value integer(kind=default_int)","tags":"","url":"interface/blas_iamax.html"},{"title":"blas_scal – PIC","text":"private interface blas_scal explicit interface for BLAS SCAL routines Usage: call blas_scal(n, alpha, x, incx) This is not a public interface, it is used internally by pic_scal Called by interface~~blas_scal~~CalledByGraph interface~blas_scal blas_scal proc~pic_dscal pic_dscal proc~pic_dscal->interface~blas_scal proc~pic_sscal pic_sscal proc~pic_sscal->interface~blas_scal interface~pic_scal pic_scal interface~pic_scal->proc~pic_dscal interface~pic_scal->proc~pic_sscal Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines private pure subroutine dscal(n, alpha, x, incx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(inout) :: x (*) integer(kind=default_int), intent(in) :: incx private pure subroutine sscal(n, alpha, x, incx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(inout) :: x (*) integer(kind=default_int), intent(in) :: incx","tags":"","url":"interface/blas_scal.html"},{"title":"optional_char – PIC","text":"private pure function optional_char(input_value, default_value) result(output) Handle optional character(len=*) value Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: input_value character(len=*), intent(in) :: default_value Return Value character(len=:), allocatable Called by proc~~optional_char~~CalledByGraph proc~optional_char optional_char interface~pic_optional pic_optional interface~pic_optional->proc~optional_char proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure function optional_char ( input_value , default_value ) result ( output ) !! Handle optional character(len=*) value character ( len =* ), intent ( in ), optional :: input_value character ( len =* ), intent ( in ) :: default_value character ( len = :), allocatable :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_char","tags":"","url":"proc/optional_char.html"},{"title":"optional_dp – PIC","text":"private pure function optional_dp(input_value, default_value) result(output) Handle optional real(dp) value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), optional :: input_value real(kind=dp), intent(in) :: default_value Return Value real(kind=dp) Called by proc~~optional_dp~~CalledByGraph proc~optional_dp optional_dp interface~pic_optional pic_optional interface~pic_optional->proc~optional_dp proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure function optional_dp ( input_value , default_value ) result ( output ) !! Handle optional real(dp) value real ( dp ), intent ( in ), optional :: input_value real ( dp ), intent ( in ) :: default_value real ( dp ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_dp","tags":"","url":"proc/optional_dp.html"},{"title":"optional_int32 – PIC","text":"private pure function optional_int32(input_value, default_value) result(output) Handle optional integer(int32) value Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in), optional :: input_value integer(kind=int32), intent(in) :: default_value Return Value integer(kind=int32) Called by proc~~optional_int32~~CalledByGraph proc~optional_int32 optional_int32 interface~pic_optional pic_optional interface~pic_optional->proc~optional_int32 proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure function optional_int32 ( input_value , default_value ) result ( output ) !! Handle optional integer(int32) value integer ( int32 ), intent ( in ), optional :: input_value integer ( int32 ), intent ( in ) :: default_value integer ( int32 ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_int32","tags":"","url":"proc/optional_int32.html"},{"title":"optional_int64 – PIC","text":"private pure function optional_int64(input_value, default_value) result(output) Handle optional integer(int64) value Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in), optional :: input_value integer(kind=int64), intent(in) :: default_value Return Value integer(kind=int64) Called by proc~~optional_int64~~CalledByGraph proc~optional_int64 optional_int64 interface~pic_optional pic_optional interface~pic_optional->proc~optional_int64 proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure function optional_int64 ( input_value , default_value ) result ( output ) !! Handle optional integer(int64) value integer ( int64 ), intent ( in ), optional :: input_value integer ( int64 ), intent ( in ) :: default_value integer ( int64 ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_int64","tags":"","url":"proc/optional_int64.html"},{"title":"optional_logical – PIC","text":"private pure function optional_logical(input_value, default_value) result(output) Handle optional logical value Arguments Type Intent Optional Attributes Name logical, intent(in), optional :: input_value logical, intent(in) :: default_value Return Value logical Called by proc~~optional_logical~~CalledByGraph proc~optional_logical optional_logical interface~pic_optional pic_optional interface~pic_optional->proc~optional_logical proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure function optional_logical ( input_value , default_value ) result ( output ) !! Handle optional logical value logical , intent ( in ), optional :: input_value logical , intent ( in ) :: default_value logical :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_logical","tags":"","url":"proc/optional_logical.html"},{"title":"optional_sp – PIC","text":"private pure function optional_sp(input_value, default_value) result(output) Handle optional real(sp) value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), optional :: input_value real(kind=sp), intent(in) :: default_value Return Value real(kind=sp) Called by proc~~optional_sp~~CalledByGraph proc~optional_sp optional_sp interface~pic_optional pic_optional interface~pic_optional->proc~optional_sp proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure function optional_sp ( input_value , default_value ) result ( output ) !! Handle optional real(sp) value real ( sp ), intent ( in ), optional :: input_value real ( sp ), intent ( in ) :: default_value real ( sp ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_sp","tags":"","url":"proc/optional_sp.html"},{"title":"pic_optional – PIC","text":"public interface pic_optional Overloaded interface for optional value retrieval, supported types are:\n- integer(int32), integer(int64), real(sp), real(dp), character(len=*), logical Calls interface~~pic_optional~~CallsGraph interface~pic_optional pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by interface~~pic_optional~~CalledByGraph interface~pic_optional pic_optional proc~char_ord_sort char_ord_sort proc~char_ord_sort->interface~pic_optional proc~char_sort char_sort proc~char_sort->interface~pic_optional proc~char_sort_index_default char_sort_index_default proc~char_sort_index_default->interface~pic_optional proc~char_sort_index_low char_sort_index_low proc~char_sort_index_low->interface~pic_optional proc~copy_matrix_dp copy_matrix_dp proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32 copy_matrix_int32 proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64 copy_matrix_int64 proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp copy_matrix_sp proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp copy_vector_dp proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32 copy_vector_int32 proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64 copy_vector_int64 proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp copy_vector_sp proc~copy_vector_sp->interface~pic_optional proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->interface~pic_optional proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->interface~pic_optional proc~dp_sort dp_sort proc~dp_sort->interface~pic_optional proc~dp_sort_index_default dp_sort_index_default proc~dp_sort_index_default->interface~pic_optional proc~dp_sort_index_low dp_sort_index_low proc~dp_sort_index_low->interface~pic_optional proc~fill_matrix_dp fill_matrix_dp proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32 fill_matrix_int32 proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64 fill_matrix_int64 proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp fill_matrix_sp proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp fill_vector_dp proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32 fill_vector_int32 proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64 fill_vector_int64 proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp fill_vector_sp proc~fill_vector_sp->interface~pic_optional proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->interface~pic_optional proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->interface~pic_optional proc~int32_sort int32_sort proc~int32_sort->interface~pic_optional proc~int32_sort_index_default int32_sort_index_default proc~int32_sort_index_default->interface~pic_optional proc~int32_sort_index_low int32_sort_index_low proc~int32_sort_index_low->interface~pic_optional proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->interface~pic_optional proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->interface~pic_optional proc~int64_sort int64_sort proc~int64_sort->interface~pic_optional proc~int64_sort_index_default int64_sort_index_default proc~int64_sort_index_default->interface~pic_optional proc~int64_sort_index_low int64_sort_index_low proc~int64_sort_index_low->interface~pic_optional proc~is_sorted_char is_sorted_char proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp is_sorted_dp proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32 is_sorted_int32 proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64 is_sorted_int64 proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp is_sorted_sp proc~is_sorted_sp->interface~pic_optional proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->interface~pic_optional proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~pic_optional proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~pic_optional proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~pic_optional proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~pic_optional proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~pic_optional proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~pic_optional proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~pic_optional proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~pic_optional proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->interface~pic_optional proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->interface~pic_optional proc~sp_sort sp_sort proc~sp_sort->interface~pic_optional proc~sp_sort_index_default sp_sort_index_default proc~sp_sort_index_default->interface~pic_optional proc~sp_sort_index_low sp_sort_index_low proc~sp_sort_index_low->interface~pic_optional proc~sum_matrix_dp sum_matrix_dp proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32 sum_matrix_int32 proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64 sum_matrix_int64 proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp sum_matrix_sp proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp sum_vector_dp proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32 sum_vector_int32 proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64 sum_vector_int64 proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp sum_vector_sp proc~sum_vector_sp->interface~pic_optional proc~transpose_matrix_dp transpose_matrix_dp proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32 transpose_matrix_int32 proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64 transpose_matrix_int64 proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp transpose_matrix_sp proc~transpose_matrix_sp->interface~pic_optional interface~copy copy interface~copy->proc~copy_matrix_dp interface~copy->proc~copy_matrix_int32 interface~copy->proc~copy_matrix_int64 interface~copy->proc~copy_matrix_sp interface~copy->proc~copy_vector_dp interface~copy->proc~copy_vector_int32 interface~copy->proc~copy_vector_int64 interface~copy->proc~copy_vector_sp interface~fill fill interface~fill->proc~fill_matrix_dp interface~fill->proc~fill_matrix_int32 interface~fill->proc~fill_matrix_int64 interface~fill->proc~fill_matrix_sp interface~fill->proc~fill_vector_dp interface~fill->proc~fill_vector_int32 interface~fill->proc~fill_vector_int64 interface~fill->proc~fill_vector_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char interface~is_sorted->proc~is_sorted_dp interface~is_sorted->proc~is_sorted_int32 interface~is_sorted->proc~is_sorted_int64 interface~is_sorted->proc~is_sorted_sp interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp interface~pic_sum->proc~sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int64 interface~pic_sum->proc~sum_matrix_sp interface~pic_sum->proc~sum_vector_dp interface~pic_sum->proc~sum_vector_int32 interface~pic_sum->proc~sum_vector_int64 interface~pic_sum->proc~sum_vector_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private pure function optional_int32 (input_value, default_value) result(output) Handle optional integer(int32) value Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in), optional :: input_value integer(kind=int32), intent(in) :: default_value Return Value integer(kind=int32) private pure function optional_int64 (input_value, default_value) result(output) Handle optional integer(int64) value Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in), optional :: input_value integer(kind=int64), intent(in) :: default_value Return Value integer(kind=int64) private pure function optional_sp (input_value, default_value) result(output) Handle optional real(sp) value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), optional :: input_value real(kind=sp), intent(in) :: default_value Return Value real(kind=sp) private pure function optional_dp (input_value, default_value) result(output) Handle optional real(dp) value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), optional :: input_value real(kind=dp), intent(in) :: default_value Return Value real(kind=dp) private pure function optional_char (input_value, default_value) result(output) Handle optional character(len=*) value Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: input_value character(len=*), intent(in) :: default_value Return Value character(len=:), allocatable private pure function optional_logical (input_value, default_value) result(output) Handle optional logical value Arguments Type Intent Optional Attributes Name logical, intent(in), optional :: input_value logical, intent(in) :: default_value Return Value logical","tags":"","url":"interface/pic_optional.html"},{"title":"dp_radix_sort – PIC","text":"private module subroutine dp_radix_sort(array, work, reverse) Uses iso_c_binding proc~~dp_radix_sort~~UsesGraph proc~dp_radix_sort dp_radix_sort iso_c_binding iso_c_binding proc~dp_radix_sort->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout), dimension(:), target :: array real(kind=dp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse Calls proc~~dp_radix_sort~~CallsGraph proc~dp_radix_sort dp_radix_sort interface~pic_optional pic_optional proc~dp_radix_sort->interface~pic_optional proc~radix_sort_u64_helper radix_sort_u64_helper proc~dp_radix_sort->proc~radix_sort_u64_helper proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: N integer(kind=int64), private, dimension(:), pointer :: arri64 integer(kind=int64), private, dimension(:), pointer :: buffer integer(kind=int_index), private :: i real(kind=dp), private :: item integer(kind=int_index), private :: pos integer(kind=int_index), private :: rev_pos logical, private :: use_internal_buffer Source Code module subroutine dp_radix_sort ( array , work , reverse ) implicit none real ( kind = dp ), dimension (:), intent ( inout ), target :: array real ( kind = dp ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine dp_radix_sort","tags":"","url":"proc/dp_radix_sort.html"},{"title":"int32_radix_sort – PIC","text":"private pure module subroutine int32_radix_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: array integer(kind=int32), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse Calls proc~~int32_radix_sort~~CallsGraph proc~int32_radix_sort int32_radix_sort interface~pic_optional pic_optional proc~int32_radix_sort->interface~pic_optional proc~radix_sort_u32_helper radix_sort_u32_helper proc~int32_radix_sort->proc~radix_sort_u32_helper proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: N integer(kind=int32), private, dimension(:), pointer :: buffer integer(kind=int_index), private :: end integer(kind=int_index), private :: i integer(kind=int32), private :: item integer(kind=int_index), private :: middle integer(kind=int_index), private :: start logical, private :: use_internal_buffer Source Code pure module subroutine int32_radix_sort ( array , work , reverse ) implicit none integer ( kind = int32 ), dimension (:), intent ( inout ) :: array integer ( kind = int32 ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine int32_radix_sort","tags":"","url":"proc/int32_radix_sort.html"},{"title":"int64_radix_sort – PIC","text":"private pure module subroutine int64_radix_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: array integer(kind=int64), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse Calls proc~~int64_radix_sort~~CallsGraph proc~int64_radix_sort int64_radix_sort interface~pic_optional pic_optional proc~int64_radix_sort->interface~pic_optional proc~radix_sort_u64_helper radix_sort_u64_helper proc~int64_radix_sort->proc~radix_sort_u64_helper proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: N integer(kind=int64), private, dimension(:), pointer :: buffer integer(kind=int_index), private :: end integer(kind=int_index), private :: i integer(kind=int64), private :: item integer(kind=int_index), private :: middle integer(kind=int_index), private :: start logical, private :: use_internal_buffer Source Code pure module subroutine int64_radix_sort ( array , work , reverse ) implicit none integer ( kind = int64 ), dimension (:), intent ( inout ) :: array integer ( kind = int64 ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine int64_radix_sort","tags":"","url":"proc/int64_radix_sort.html"},{"title":"radix_sort_u32_helper – PIC","text":"private pure subroutine radix_sort_u32_helper(N, arr, buf) Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: N integer(kind=int32), intent(inout), dimension(N) :: arr integer(kind=int32), intent(inout), dimension(N) :: buf Called by proc~~radix_sort_u32_helper~~CalledByGraph proc~radix_sort_u32_helper radix_sort_u32_helper proc~int32_radix_sort int32_radix_sort proc~int32_radix_sort->proc~radix_sort_u32_helper proc~sp_radix_sort sp_radix_sort proc~sp_radix_sort->proc~radix_sort_u32_helper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: b integer, private :: b0 integer, private :: b1 integer, private :: b2 integer, private :: b3 integer(kind=int_index), private, dimension(0:radix_mask) :: c0 integer(kind=int_index), private, dimension(0:radix_mask) :: c1 integer(kind=int_index), private, dimension(0:radix_mask) :: c2 integer(kind=int_index), private, dimension(0:radix_mask) :: c3 integer(kind=int_index), private :: i Source Code pure subroutine radix_sort_u32_helper ( N , arr , buf ) integer ( kind = int_index ), intent ( in ) :: N integer ( kind = int32 ), dimension ( N ), intent ( inout ) :: arr integer ( kind = int32 ), dimension ( N ), intent ( inout ) :: buf integer ( kind = int_index ) :: i integer :: b , b0 , b1 , b2 , b3 integer ( kind = int_index ), dimension ( 0 : radix_mask ) :: c0 , c1 , c2 , c3 c0 (:) = 0 c1 (:) = 0 c2 (:) = 0 c3 (:) = 0 do i = 1 , N b0 = iand ( arr ( i ), radix_mask_i32 ) b1 = iand ( ishft ( arr ( i ), - radix_bits_i32 ), radix_mask_i32 ) b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i32 ), radix_mask_i32 ) b3 = ishft ( arr ( i ), - 3 * radix_bits_i32 ) c0 ( b0 ) = c0 ( b0 ) + 1 c1 ( b1 ) = c1 ( b1 ) + 1 c2 ( b2 ) = c2 ( b2 ) + 1 c3 ( b3 ) = c3 ( b3 ) + 1 end do do b = 1 , radix_mask c0 ( b ) = c0 ( b ) + c0 ( b - 1 ) c1 ( b ) = c1 ( b ) + c1 ( b - 1 ) c2 ( b ) = c2 ( b ) + c2 ( b - 1 ) c3 ( b ) = c3 ( b ) + c3 ( b - 1 ) end do do i = N , 1 , - 1 b0 = iand ( arr ( i ), radix_mask_i32 ) buf ( c0 ( b0 )) = arr ( i ) c0 ( b0 ) = c0 ( b0 ) - 1 end do do i = N , 1 , - 1 b1 = iand ( ishft ( buf ( i ), - radix_bits_i32 ), radix_mask_i32 ) arr ( c1 ( b1 )) = buf ( i ) c1 ( b1 ) = c1 ( b1 ) - 1 end do do i = N , 1 , - 1 b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i32 ), radix_mask_i32 ) buf ( c2 ( b2 )) = arr ( i ) c2 ( b2 ) = c2 ( b2 ) - 1 end do do i = N , 1 , - 1 b3 = ishft ( buf ( i ), - 3 * radix_bits_i32 ) arr ( c3 ( b3 )) = buf ( i ) c3 ( b3 ) = c3 ( b3 ) - 1 end do end subroutine radix_sort_u32_helper","tags":"","url":"proc/radix_sort_u32_helper.html"},{"title":"radix_sort_u64_helper – PIC","text":"private pure subroutine radix_sort_u64_helper(N, arr, buffer) Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: N integer(kind=int64), intent(inout), dimension(N) :: arr integer(kind=int64), intent(inout), dimension(N) :: buffer Called by proc~~radix_sort_u64_helper~~CalledByGraph proc~radix_sort_u64_helper radix_sort_u64_helper proc~dp_radix_sort dp_radix_sort proc~dp_radix_sort->proc~radix_sort_u64_helper proc~int64_radix_sort int64_radix_sort proc~int64_radix_sort->proc~radix_sort_u64_helper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: b integer(kind=int64), private :: b0 integer(kind=int64), private :: b1 integer(kind=int64), private :: b2 integer(kind=int64), private :: b3 integer(kind=int64), private :: b4 integer(kind=int64), private :: b5 integer(kind=int64), private :: b6 integer(kind=int64), private :: b7 integer(kind=int_index), private, dimension(0:radix_mask) :: c0 integer(kind=int_index), private, dimension(0:radix_mask) :: c1 integer(kind=int_index), private, dimension(0:radix_mask) :: c2 integer(kind=int_index), private, dimension(0:radix_mask) :: c3 integer(kind=int_index), private, dimension(0:radix_mask) :: c4 integer(kind=int_index), private, dimension(0:radix_mask) :: c5 integer(kind=int_index), private, dimension(0:radix_mask) :: c6 integer(kind=int_index), private, dimension(0:radix_mask) :: c7 integer(kind=int_index), private :: i Source Code pure subroutine radix_sort_u64_helper ( N , arr , buffer ) integer ( kind = int_index ), intent ( in ) :: N integer ( kind = int64 ), dimension ( N ), intent ( inout ) :: arr integer ( kind = int64 ), dimension ( N ), intent ( inout ) :: buffer integer ( kind = int_index ) :: i integer ( kind = int64 ) :: b , b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7 integer ( kind = int_index ), dimension ( 0 : radix_mask ) :: c0 , c1 , c2 , c3 , c4 , c5 , c6 , c7 c0 (:) = 0 c1 (:) = 0 c2 (:) = 0 c3 (:) = 0 c4 (:) = 0 c5 (:) = 0 c6 (:) = 0 c7 (:) = 0 do i = 1 , N b0 = iand ( arr ( i ), radix_mask_i64 ) b1 = iand ( ishft ( arr ( i ), - radix_bits_i64 ), radix_mask_i64 ) b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i64 ), radix_mask_i64 ) b3 = iand ( ishft ( arr ( i ), - 3 * radix_bits_i64 ), radix_mask_i64 ) b4 = iand ( ishft ( arr ( i ), - 4 * radix_bits_i64 ), radix_mask_i64 ) b5 = iand ( ishft ( arr ( i ), - 5 * radix_bits_i64 ), radix_mask_i64 ) b6 = iand ( ishft ( arr ( i ), - 6 * radix_bits_i64 ), radix_mask_i64 ) b7 = ishft ( arr ( i ), - 7 * radix_bits_i64 ) c0 ( b0 ) = c0 ( b0 ) + 1 c1 ( b1 ) = c1 ( b1 ) + 1 c2 ( b2 ) = c2 ( b2 ) + 1 c3 ( b3 ) = c3 ( b3 ) + 1 c4 ( b4 ) = c4 ( b4 ) + 1 c5 ( b5 ) = c5 ( b5 ) + 1 c6 ( b6 ) = c6 ( b6 ) + 1 c7 ( b7 ) = c7 ( b7 ) + 1 end do do b = 1 , radix_mask c0 ( b ) = c0 ( b ) + c0 ( b - 1 ) c1 ( b ) = c1 ( b ) + c1 ( b - 1 ) c2 ( b ) = c2 ( b ) + c2 ( b - 1 ) c3 ( b ) = c3 ( b ) + c3 ( b - 1 ) c4 ( b ) = c4 ( b ) + c4 ( b - 1 ) c5 ( b ) = c5 ( b ) + c5 ( b - 1 ) c6 ( b ) = c6 ( b ) + c6 ( b - 1 ) c7 ( b ) = c7 ( b ) + c7 ( b - 1 ) end do do i = N , 1 , - 1 b0 = iand ( arr ( i ), radix_mask_i64 ) buffer ( c0 ( b0 )) = arr ( i ) c0 ( b0 ) = c0 ( b0 ) - 1 end do do i = N , 1 , - 1 b1 = iand ( ishft ( buffer ( i ), - radix_bits_i64 ), radix_mask_i64 ) arr ( c1 ( b1 )) = buffer ( i ) c1 ( b1 ) = c1 ( b1 ) - 1 end do do i = N , 1 , - 1 b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i64 ), radix_mask_i64 ) buffer ( c2 ( b2 )) = arr ( i ) c2 ( b2 ) = c2 ( b2 ) - 1 end do do i = N , 1 , - 1 b3 = iand ( ishft ( buffer ( i ), - 3 * radix_bits_i64 ), radix_mask_i64 ) arr ( c3 ( b3 )) = buffer ( i ) c3 ( b3 ) = c3 ( b3 ) - 1 end do do i = N , 1 , - 1 b4 = iand ( ishft ( arr ( i ), - 4 * radix_bits_i64 ), radix_mask_i64 ) buffer ( c4 ( b4 )) = arr ( i ) c4 ( b4 ) = c4 ( b4 ) - 1 end do do i = N , 1 , - 1 b5 = iand ( ishft ( buffer ( i ), - 5 * radix_bits_i64 ), radix_mask_i64 ) arr ( c5 ( b5 )) = buffer ( i ) c5 ( b5 ) = c5 ( b5 ) - 1 end do do i = N , 1 , - 1 b6 = iand ( ishft ( arr ( i ), - 6 * radix_bits_i64 ), radix_mask_i64 ) buffer ( c6 ( b6 )) = arr ( i ) c6 ( b6 ) = c6 ( b6 ) - 1 end do do i = N , 1 , - 1 b7 = ishft ( buffer ( i ), - 7 * radix_bits_i64 ) arr ( c7 ( b7 )) = buffer ( i ) c7 ( b7 ) = c7 ( b7 ) - 1 end do end subroutine radix_sort_u64_helper","tags":"","url":"proc/radix_sort_u64_helper.html"},{"title":"sp_radix_sort – PIC","text":"private module subroutine sp_radix_sort(array, work, reverse) Uses iso_c_binding proc~~sp_radix_sort~~UsesGraph proc~sp_radix_sort sp_radix_sort iso_c_binding iso_c_binding proc~sp_radix_sort->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout), dimension(:), target :: array real(kind=sp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse Calls proc~~sp_radix_sort~~CallsGraph proc~sp_radix_sort sp_radix_sort interface~pic_optional pic_optional proc~sp_radix_sort->interface~pic_optional proc~radix_sort_u32_helper radix_sort_u32_helper proc~sp_radix_sort->proc~radix_sort_u32_helper proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: N integer(kind=int32), private, dimension(:), pointer :: arri32 integer(kind=int32), private, dimension(:), pointer :: buffer integer(kind=int_index), private :: i real(kind=sp), private :: item integer(kind=int_index), private :: pos integer(kind=int_index), private :: rev_pos logical, private :: use_internal_buffer Source Code module subroutine sp_radix_sort ( array , work , reverse ) implicit none real ( kind = sp ), dimension (:), intent ( inout ), target :: array real ( kind = sp ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine sp_radix_sort","tags":"","url":"proc/sp_radix_sort.html"},{"title":"radix_sort – PIC","text":"public interface radix_sort The generic subroutine interface implementing the LSD radix sort algorithm,\nsee https://en.wikipedia.org/wiki/Radix_sort for more details.\nIt is always O(N) in sorting random data, but need a O(N) buffer.\n( Specification ) Subroutines private module subroutine dp_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout), dimension(:), target :: array real(kind=dp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure module subroutine int32_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: array integer(kind=int32), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure module subroutine int64_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: array integer(kind=int64), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private module subroutine sp_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout), dimension(:), target :: array real(kind=sp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse","tags":"","url":"interface/radix_sort.html"},{"title":"get_knowledge – PIC","text":"public  subroutine get_knowledge() I print random knowledge Arguments None Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: idx character(len=64), private, allocatable :: knowledge (:) integer(kind=int32), private :: n real(kind=dp), private :: r Source Code subroutine get_knowledge () !! I print random knowledge character ( len = 64 ), allocatable :: knowledge (:) integer ( int32 ) :: n , idx real ( dp ) :: r allocate ( knowledge ( 3 )) knowledge = [ & \"The long line! (CS,2023)                                        \" , & \"Maybe I have the Fortran brain-rot in Dijkstra's words (IP,2025)\" , & \"Mojo, yes, do I approve it, no. (IP, 2025)                      \" & ] n = size ( knowledge ) call random_number ( r ) idx = int ( r * n ) + 1 if ( idx > n ) idx = n print * , 'Random knowledge: ' , trim ( knowledge ( idx )) end subroutine get_knowledge","tags":"","url":"proc/get_knowledge.html"},{"title":"pic_comm_finalize – PIC","text":"private  subroutine pic_comm_finalize(self) finalize the MPI library Type Bound pic_comm_type Arguments Type Intent Optional Attributes Name class( pic_comm_type ), intent(inout) :: self Calls proc~~pic_comm_finalize~~CallsGraph proc~pic_comm_finalize pic_comm_type%pic_comm_finalize mpi_finalize mpi_finalize proc~pic_comm_finalize->mpi_finalize Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: ierr Source Code subroutine pic_comm_finalize ( self ) !! finalize the MPI library class ( pic_comm_type ), intent ( inout ) :: self integer ( int32 ) :: ierr call MPI_Finalize ( ierr ) self % m_ierr = ierr end subroutine pic_comm_finalize","tags":"","url":"proc/pic_comm_finalize.html"},{"title":"pic_comm_init – PIC","text":"private  subroutine pic_comm_init(self) initilalize the MPI library and get the size and rank variables Type Bound pic_comm_type Arguments Type Intent Optional Attributes Name class( pic_comm_type ), intent(inout) :: self Calls proc~~pic_comm_init~~CallsGraph proc~pic_comm_init pic_comm_type%pic_comm_init mpi_comm_rank mpi_comm_rank proc~pic_comm_init->mpi_comm_rank mpi_comm_size mpi_comm_size proc~pic_comm_init->mpi_comm_size mpi_init mpi_init proc~pic_comm_init->mpi_init Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: ierr integer(kind=int32), private :: rank integer(kind=int32), private :: size Source Code subroutine pic_comm_init ( self ) !! initilalize the MPI library and get the size and rank variables class ( pic_comm_type ), intent ( inout ) :: self integer ( int32 ) :: ierr , rank , size call MPI_Init ( ierr ) self % m_ierr = ierr self % comm = MPI_COMM_WORLD call MPI_Comm_size ( self % comm , size , ierr ) call MPI_Comm_rank ( self % comm , rank , ierr ) self % m_size = size self % m_rank = rank end subroutine pic_comm_init","tags":"","url":"proc/pic_comm_init.html"},{"title":"character_fnv_1 – PIC","text":"private elemental module function character_fnv_1(key) result(hash_code) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) Source Code elemental module function character_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for default character string keys implicit none character ( * ), intent ( in ) :: key integer ( int_hash ) :: hash_code end function character_fnv_1","tags":"","url":"proc/character_fnv_1.html"},{"title":"character_fnv_1a – PIC","text":"private elemental module function character_fnv_1a(key) result(hash_code) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) Source Code elemental module function character_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for default character string keys implicit none character ( * ), intent ( in ) :: key integer ( int_hash ) :: hash_value end function character_fnv_1a","tags":"","url":"proc/character_fnv_1a.html"},{"title":"int16_fnv_1 – PIC","text":"private pure module function int16_fnv_1(key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) Source Code pure module function int16_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int16 implicit none integer ( int16 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int16_fnv_1","tags":"","url":"proc/int16_fnv_1.html"},{"title":"int16_fnv_1a – PIC","text":"private pure module function int16_fnv_1a(key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) Source Code pure module function int16_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int16 implicit none integer ( int16 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int16_fnv_1a","tags":"","url":"proc/int16_fnv_1a.html"},{"title":"int32_fnv_1 – PIC","text":"private pure module function int32_fnv_1(key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) Source Code pure module function int32_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int32 implicit none integer ( int32 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int32_fnv_1","tags":"","url":"proc/int32_fnv_1.html"},{"title":"int32_fnv_1a – PIC","text":"private pure module function int32_fnv_1a(key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) Source Code pure module function int32_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int32 implicit none integer ( int32 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int32_fnv_1a","tags":"","url":"proc/int32_fnv_1a.html"},{"title":"int64_fnv_1 – PIC","text":"private pure module function int64_fnv_1(key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) Source Code pure module function int64_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int64 implicit none integer ( int64 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int64_fnv_1","tags":"","url":"proc/int64_fnv_1.html"},{"title":"int64_fnv_1a – PIC","text":"private pure module function int64_fnv_1a(key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) Source Code pure module function int64_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int64 implicit none integer ( int64 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int64_fnv_1a","tags":"","url":"proc/int64_fnv_1a.html"},{"title":"int8_fnv_1 – PIC","text":"private pure module function int8_fnv_1(key) result(hash_code) The original FNV-1 8-bit key algorithm. Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash) Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: i Source Code pure module function int8_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int8 implicit none integer ( int8 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int8_fnv_1","tags":"","url":"proc/int8_fnv_1.html"},{"title":"int8_fnv_1a – PIC","text":"private pure module function int8_fnv_1a(key) result(hash_code) The original FNV-1a 8-bit key algorithm. Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash) Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: i Source Code pure module function int8_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int8 implicit none integer ( int8 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int8_fnv_1a","tags":"","url":"proc/int8_fnv_1a.html"},{"title":"fnv_1_hash – PIC","text":"public interface fnv_1_hash FNV_1 interfaces\n( Specification ) Functions private elemental module function character_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for default character string keys Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) private pure module function int16_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int16 Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int32_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int32 Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int64_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int64 Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int8_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int8 Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash)","tags":"","url":"interface/fnv_1_hash.html"},{"title":"fnv_1a_hash – PIC","text":"public interface fnv_1a_hash FNV_1A interfaces\n( Specification ) Functions private elemental module function character_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for default character string keys Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) private pure module function int16_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int16 Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int32_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int32 Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int64_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int64 Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int8_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int8 Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash)","tags":"","url":"interface/fnv_1a_hash.html"},{"title":"char_eq_pic_string – PIC","text":"private pure function char_eq_pic_string(c, a) result(ok) return true if the character string is equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical Called by proc~~char_eq_pic_string~~CalledByGraph proc~char_eq_pic_string char_eq_pic_string interface~operator(==) operator(==) interface~operator(==)->proc~char_eq_pic_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure logical function char_eq_pic_string ( c , a ) result ( ok ) !! return true if the character string is equal to the pic_string_type character ( * ), intent ( in ) :: c class ( pic_string_type ), intent ( in ) :: a ok = ( a == c ) end function char_eq_pic_string","tags":"","url":"proc/char_eq_pic_string.html"},{"title":"char_ne_pic_string – PIC","text":"private pure function char_ne_pic_string(c, a) result(ok) return true if the character string is not equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical Called by proc~~char_ne_pic_string~~CalledByGraph proc~char_ne_pic_string char_ne_pic_string interface~operator(SLASH=) operator(/=) interface~operator(SLASH=)->proc~char_ne_pic_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure logical function char_ne_pic_string ( c , a ) result ( ok ) !! return true if the character string is not equal to the pic_string_type character ( * ), intent ( in ) :: c class ( pic_string_type ), intent ( in ) :: a ok = . not . ( a == c ) end function char_ne_pic_string","tags":"","url":"proc/char_ne_pic_string.html"},{"title":"pic_string_capacity – PIC","text":"private pure function pic_string_capacity(self) result(res) return the current capacity of the string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value integer(kind=int64) Source Code pure function pic_string_capacity ( self ) result ( res ) !! return the current capacity of the string class ( pic_string_type ), intent ( in ) :: self integer ( int64 ) :: res res = self % cap end function pic_string_capacity","tags":"","url":"proc/pic_string_capacity.html"},{"title":"pic_string_empty – PIC","text":"private pure function pic_string_empty(self) result(res) return true if the string is empty Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value logical Source Code pure function pic_string_empty ( self ) result ( res ) !! return true if the string is empty class ( pic_string_type ), intent ( in ) :: self logical :: res res = ( self % len == 0_int64 ) end function pic_string_empty","tags":"","url":"proc/pic_string_empty.html"},{"title":"pic_string_ends_with – PIC","text":"private pure function pic_string_ends_with(self, pat) result(ok) return true if the string ends with the given pattern Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat Return Value logical Variables Type Visibility Attributes Name Initial integer, private :: m Source Code pure logical function pic_string_ends_with ( self , pat ) result ( ok ) !! return true if the string ends with the given pattern class ( pic_string_type ), intent ( in ) :: self character ( * ), intent ( in ) :: pat integer :: m m = len ( pat ) ok = ( self % len >= m . and . ( m == 0 . or . self % buf ( self % len - m + 1 : self % len ) == pat )) end function pic_string_ends_with","tags":"","url":"proc/pic_string_ends_with.html"},{"title":"pic_string_eq_char – PIC","text":"private pure function pic_string_eq_char(a, c) result(ok) return true if the pic_string_type is equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical Called by proc~~pic_string_eq_char~~CalledByGraph proc~pic_string_eq_char pic_string_eq_char interface~operator(==) operator(==) interface~operator(==)->proc~pic_string_eq_char Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure logical function pic_string_eq_char ( a , c ) result ( ok ) !! return true if the pic_string_type is equal to the character string class ( pic_string_type ), intent ( in ) :: a character ( * ), intent ( in ) :: c ok = ( a % len == len ( c )) if ( ok . and . a % len > 0_int64 ) ok = ( a % buf ( 1 : a % len ) == c ) end function pic_string_eq_char","tags":"","url":"proc/pic_string_eq_char.html"},{"title":"pic_string_eq_string – PIC","text":"private pure function pic_string_eq_string(a, b) result(ok) return true if the two strings are equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical Called by proc~~pic_string_eq_string~~CalledByGraph proc~pic_string_eq_string pic_string_eq_string interface~operator(==) operator(==) interface~operator(==)->proc~pic_string_eq_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure logical function pic_string_eq_string ( a , b ) result ( ok ) !! return true if the two strings are equal class ( pic_string_type ), intent ( in ) :: a class ( pic_string_type ), intent ( in ) :: b ok = ( a % len == b % len ) if ( ok . and . a % len > 0_int64 ) ok = ( a % buf ( 1 : a % len ) == b % buf ( 1 : b % len )) end function pic_string_eq_string","tags":"","url":"proc/pic_string_eq_string.html"},{"title":"pic_string_find – PIC","text":"private pure function pic_string_find(self, pat, from) result(pos) Uses pic_optional_value proc~~pic_string_find~~UsesGraph proc~pic_string_find pic_string_type%pic_string_find module~pic_optional_value pic_optional_value proc~pic_string_find->module~pic_optional_value module~pic_types pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. find the first occurrence of pattern ‘pat’ in the string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat integer(kind=int64), intent(in), optional :: from Return Value integer(kind=int64) Calls proc~~pic_string_find~~CallsGraph proc~pic_string_find pic_string_type%pic_string_find interface~pic_optional pic_optional proc~pic_string_find->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: i0 integer(kind=int64), private :: j integer(kind=int64), private :: j_end integer(kind=int64), private :: m integer(kind=int64), private :: nlen character(len=:), private, allocatable :: s Source Code pure integer ( int64 ) function pic_string_find ( self , pat , from ) result ( pos ) !! find the first occurrence of pattern 'pat' in the string use pic_optional_value , only : pic_optional class ( pic_string_type ), intent ( in ) :: self character ( * ), intent ( in ) :: pat integer ( int64 ), optional , intent ( in ) :: from integer ( int64 ) :: nlen , i0 , j , j_end , m character ( len = :), allocatable :: s pos = 0_int64 nlen = self % len if ( nlen == 0_int64 ) return m = int ( len ( pat ), int64 ) if ( m == 0_int64 ) return i0 = pic_optional ( from , 1_int64 ) if ( i0 < 1_int64 . or . i0 > nlen ) return if ( m > nlen - i0 + 1_int64 ) return allocate ( character ( len = nlen ) :: s ) s = self % buf ( 1 : nlen ) j_end = nlen - m + 1_int64 do j = i0 , j_end if ( s ( j : j + m - 1_int64 ) == pat ) then pos = j return end if end do end function pic_string_find","tags":"","url":"proc/pic_string_find.html"},{"title":"pic_string_get – PIC","text":"private pure function pic_string_get(self, i) result(ch) get the character at position i (1-based) Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self integer(kind=int64), intent(in) :: i Return Value character(len=1) Source Code pure character ( 1 ) function pic_string_get ( self , i ) result ( ch ) !! get the character at position i (1-based) class ( pic_string_type ), intent ( in ) :: self integer ( int64 ), intent ( in ) :: i if ( i < 1_int64 . or . i > self % len ) then ch = achar ( 0 ) ! or stop/error; choose your policy ! erorr stop \"Index out of bounds in pic_string_get\" else ch = self % buf ( i : i ) end if end function pic_string_get","tags":"","url":"proc/pic_string_get.html"},{"title":"pic_string_ne_char – PIC","text":"private pure function pic_string_ne_char(a, c) result(ok) return true if the pic_string_type is not equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical Called by proc~~pic_string_ne_char~~CalledByGraph proc~pic_string_ne_char pic_string_ne_char interface~operator(SLASH=) operator(/=) interface~operator(SLASH=)->proc~pic_string_ne_char Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure logical function pic_string_ne_char ( a , c ) result ( ok ) !! return true if the pic_string_type is not equal to the character string class ( pic_string_type ), intent ( in ) :: a character ( * ), intent ( in ) :: c ok = . not . ( a == c ) end function pic_string_ne_char","tags":"","url":"proc/pic_string_ne_char.html"},{"title":"pic_string_ne_string – PIC","text":"private pure function pic_string_ne_string(a, b) result(ok) return true if the two strings are not equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical Called by proc~~pic_string_ne_string~~CalledByGraph proc~pic_string_ne_string pic_string_ne_string interface~operator(SLASH=) operator(/=) interface~operator(SLASH=)->proc~pic_string_ne_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure logical function pic_string_ne_string ( a , b ) result ( ok ) !! return true if the two strings are not equal class ( pic_string_type ), intent ( in ) :: a class ( pic_string_type ), intent ( in ) :: b ok = . not . ( a == b ) end function pic_string_ne_string","tags":"","url":"proc/pic_string_ne_string.html"},{"title":"pic_string_size – PIC","text":"private pure function pic_string_size(self) result(res) return the current size of the string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value integer(kind=int64) Source Code pure function pic_string_size ( self ) result ( res ) !! return the current size of the string class ( pic_string_type ), intent ( in ) :: self integer ( int64 ) :: res res = self % len end function pic_string_size","tags":"","url":"proc/pic_string_size.html"},{"title":"pic_string_starts_with – PIC","text":"private pure function pic_string_starts_with(self, pat) result(ok) return true if the string starts with the given pattern Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat Return Value logical Variables Type Visibility Attributes Name Initial integer, private :: m Source Code pure logical function pic_string_starts_with ( self , pat ) result ( ok ) !! return true if the string starts with the given pattern class ( pic_string_type ), intent ( in ) :: self character ( * ), intent ( in ) :: pat integer :: m m = len ( pat ) ok = ( self % len >= m . and . ( m == 0 . or . self % buf ( 1 : m ) == pat )) end function pic_string_starts_with","tags":"","url":"proc/pic_string_starts_with.html"},{"title":"pic_string_substr – PIC","text":"private  function pic_string_substr(self, i, n) result(out) return a substring starting at index i (1-based) with length n Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self integer(kind=int64), intent(in) :: i integer(kind=int64), intent(in) :: n Return Value type( pic_string_type ) Calls proc~~pic_string_substr~~CallsGraph proc~pic_string_substr pic_string_type%pic_string_substr proc~pic_string_reserve pic_string_type%pic_string_reserve proc~pic_string_substr->proc~pic_string_reserve proc~ensure_capacity ensure_capacity proc~pic_string_reserve->proc~ensure_capacity Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: i2 integer, private :: ie integer, private :: is integer(kind=int64), private :: n2 integer, private :: nn character(len=:), private, allocatable :: tmp Source Code function pic_string_substr ( self , i , n ) result ( out ) !! return a substring starting at index i (1-based) with length n class ( pic_string_type ), intent ( in ) :: self integer ( int64 ), intent ( in ) :: i , n type ( pic_string_type ) :: out integer ( int64 ) :: i2 , n2 integer :: is , ie , nn ! default INTEGER for substring bounds character ( len = :), allocatable :: tmp out % len = 0_int64 ; out % cap = 0_int64 if (. not . allocated ( self % buf )) return if ( self % len == 0_int64 . or . n <= 0_int64 . or . i > self % len ) return i2 = max ( 1_int64 , i ) n2 = min ( self % len - i2 + 1_int64 , n ) if ( n2 <= 0_int64 ) return ! cast bounds to default INTEGER before slicing is = int ( i2 ) ie = int ( i2 + n2 - 1_int64 ) nn = int ( n2 ) allocate ( character ( len = nn ) :: tmp ) tmp = self % buf ( is : ie ) ! <- exact-size RHS, default-int bounds call out % reserve ( n2 ) out % buf ( 1 : nn ) = tmp out % len = n2 end function pic_string_substr","tags":"","url":"proc/pic_string_substr.html"},{"title":"pic_string_to_char – PIC","text":"private  function pic_string_to_char(self) result(out) convert the pic_string_type to a standard Fortran character string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value character(len=self) Source Code function pic_string_to_char ( self ) result ( out ) !! convert the pic_string_type to a standard Fortran character string class ( pic_string_type ), intent ( in ) :: self character ( len = self % len ) :: out if ( self % len > 0 ) out = self % buf ( 1 : self % len ) end function pic_string_to_char","tags":"","url":"proc/pic_string_to_char.html"},{"title":"ensure_capacity – PIC","text":"private  subroutine ensure_capacity(self, need) helper routine to ensure that the string container has enough\ncapacity to hold a new size ‘need’ Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: need Called by proc~~ensure_capacity~~CalledByGraph proc~ensure_capacity ensure_capacity proc~pic_string_append pic_string_type%pic_string_append proc~pic_string_append->proc~ensure_capacity proc~pic_string_assign pic_string_type%pic_string_assign proc~pic_string_assign->proc~ensure_capacity proc~pic_string_push_back pic_string_type%pic_string_push_back proc~pic_string_push_back->proc~ensure_capacity proc~pic_string_reserve pic_string_type%pic_string_reserve proc~pic_string_reserve->proc~ensure_capacity proc~pic_string_substr pic_string_type%pic_string_substr proc~pic_string_substr->proc~pic_string_reserve Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: target character(len=:), private, allocatable :: tmp Source Code subroutine ensure_capacity ( self , need ) !! helper routine to ensure that the string container has enough !! capacity to hold a new size 'need' class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: need integer ( int64 ) :: target character ( len = :), allocatable :: tmp if ( need <= self % cap ) return if ( self % cap <= 0_int64 ) then target = max ( need , 64_int64 ) else target = self % cap do while ( target < need ) target = 2_int64 * target end do end if allocate ( character ( len = target ) :: tmp ) if ( self % len > 0 . and . allocated ( self % buf )) tmp ( 1 : self % len ) = self % buf ( 1 : self % len ) call move_alloc ( tmp , self % buf ) self % cap = target end subroutine ensure_capacity","tags":"","url":"proc/ensure_capacity.html"},{"title":"pic_string_append – PIC","text":"private  subroutine pic_string_append(self, s) append a string to the current string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=*), intent(in) :: s Calls proc~~pic_string_append~~CallsGraph proc~pic_string_append pic_string_type%pic_string_append proc~ensure_capacity ensure_capacity proc~pic_string_append->proc~ensure_capacity Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: i0 integer(kind=int64), private :: i1 integer(kind=int64), private :: n Source Code subroutine pic_string_append ( self , s ) !! append a string to the current string class ( pic_string_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: s integer ( int64 ) :: n , i0 , i1 n = int ( len ( s ), int64 ) i0 = self % len + 1_int64 i1 = self % len + n call ensure_capacity ( self , i1 ) if ( n > 0 ) self % buf ( i0 : i1 ) = s self % len = i1 end subroutine pic_string_append","tags":"","url":"proc/pic_string_append.html"},{"title":"pic_string_assign – PIC","text":"private  subroutine pic_string_assign(self, s) assign a new value to the string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=*), intent(in) :: s Calls proc~~pic_string_assign~~CallsGraph proc~pic_string_assign pic_string_type%pic_string_assign proc~ensure_capacity ensure_capacity proc~pic_string_assign->proc~ensure_capacity Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: n Source Code subroutine pic_string_assign ( self , s ) !! assign a new value to the string class ( pic_string_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: s integer ( int64 ) :: n n = int ( len ( s ), int64 ) call ensure_capacity ( self , n ) if ( n > 0 ) self % buf ( 1 : n ) = s self % len = n end subroutine pic_string_assign","tags":"","url":"proc/pic_string_assign.html"},{"title":"pic_string_clear – PIC","text":"private  subroutine pic_string_clear(self) clear the string content Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Source Code subroutine pic_string_clear ( self ) !! clear the string content class ( pic_string_type ), intent ( inout ) :: self self % len = 0_int64 end subroutine pic_string_clear","tags":"","url":"proc/pic_string_clear.html"},{"title":"pic_string_finalize – PIC","text":"private  subroutine pic_string_finalize(self) finalizer to deallocate the string buffer type Arguments Type Intent Optional Attributes Name type( pic_string_type ), intent(inout) :: self Source Code subroutine pic_string_finalize ( self ) !! finalizer to deallocate the string buffer type type ( pic_string_type ), intent ( inout ) :: self if ( allocated ( self % buf )) deallocate ( self % buf ) self % len = 0_int64 ; self % cap = 0_int64 end subroutine pic_string_finalize","tags":"","url":"proc/pic_string_finalize.html"},{"title":"pic_string_ltrim – PIC","text":"private  subroutine pic_string_ltrim(self) trim leading whitespace characters Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Called by proc~~pic_string_ltrim~~CalledByGraph proc~pic_string_ltrim pic_string_type%pic_string_ltrim proc~pic_string_trim pic_string_type%pic_string_trim proc~pic_string_trim->proc~pic_string_ltrim Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: i integer(kind=int64), private :: k integer(kind=int64), private :: n Source Code subroutine pic_string_ltrim ( self ) !! trim leading whitespace characters class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ) :: i , n , k if (. not . allocated ( self % buf )) return if ( self % len == 0_int64 ) return i = 1_int64 do if ( i > self % len ) exit if ( self % buf ( i : i ) <= ' ' ) then i = i + 1_int64 else exit end if end do if ( i > 1_int64 ) then n = self % len - ( i - 1_int64 ) if ( n > 0_int64 ) then do k = 1_int64 , n self % buf ( k : k ) = self % buf ( i + k - 1_int64 : i + k - 1_int64 ) end do end if self % len = max ( 0_int64 , n ) end if end subroutine pic_string_ltrim","tags":"","url":"proc/pic_string_ltrim.html"},{"title":"pic_string_push_back – PIC","text":"private  subroutine pic_string_push_back(self, ch) append a single character to the current string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=1), intent(in) :: ch Calls proc~~pic_string_push_back~~CallsGraph proc~pic_string_push_back pic_string_type%pic_string_push_back proc~ensure_capacity ensure_capacity proc~pic_string_push_back->proc~ensure_capacity Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine pic_string_push_back ( self , ch ) !! append a single character to the current string class ( pic_string_type ), intent ( inout ) :: self character ( 1 ), intent ( in ) :: ch call ensure_capacity ( self , self % len + 1_int64 ) self % len = self % len + 1_int64 self % buf ( self % len : self % len ) = ch end subroutine pic_string_push_back","tags":"","url":"proc/pic_string_push_back.html"},{"title":"pic_string_release – PIC","text":"private  subroutine pic_string_release(self) release the internal buffer and reset the string Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Source Code subroutine pic_string_release ( self ) !! release the internal buffer and reset the string class ( pic_string_type ), intent ( inout ) :: self if ( allocated ( self % buf )) deallocate ( self % buf ) self % len = 0_int64 ; self % cap = 0_int64 end subroutine pic_string_release","tags":"","url":"proc/pic_string_release.html"},{"title":"pic_string_reserve – PIC","text":"private  subroutine pic_string_reserve(self, n) ensure the string has capacity for at least n characters Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: n Calls proc~~pic_string_reserve~~CallsGraph proc~pic_string_reserve pic_string_type%pic_string_reserve proc~ensure_capacity ensure_capacity proc~pic_string_reserve->proc~ensure_capacity Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~pic_string_reserve~~CalledByGraph proc~pic_string_reserve pic_string_type%pic_string_reserve proc~pic_string_substr pic_string_type%pic_string_substr proc~pic_string_substr->proc~pic_string_reserve Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine pic_string_reserve ( self , n ) !! ensure the string has capacity for at least n characters class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: n call ensure_capacity ( self , n ) end subroutine pic_string_reserve","tags":"","url":"proc/pic_string_reserve.html"},{"title":"pic_string_rtrim – PIC","text":"private  subroutine pic_string_rtrim(self) trim trailing whitespace characters Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Called by proc~~pic_string_rtrim~~CalledByGraph proc~pic_string_rtrim pic_string_type%pic_string_rtrim proc~pic_string_trim pic_string_type%pic_string_trim proc~pic_string_trim->proc~pic_string_rtrim Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int64), private :: j Source Code subroutine pic_string_rtrim ( self ) !! trim trailing whitespace characters class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ) :: j if (. not . allocated ( self % buf ) . or . self % len == 0_int64 ) return j = self % len do if ( j < 1_int64 ) exit if ( self % buf ( j : j ) <= ' ' ) then j = j - 1_int64 else exit end if end do self % len = max ( 0_int64 , j ) end subroutine pic_string_rtrim","tags":"","url":"proc/pic_string_rtrim.html"},{"title":"pic_string_set – PIC","text":"private  subroutine pic_string_set(self, i, ch) set the character at position i (1-based) Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: i character(len=1), intent(in) :: ch Source Code subroutine pic_string_set ( self , i , ch ) !! set the character at position i (1-based) class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: i character ( 1 ), intent ( in ) :: ch if ( i < 1_int64 . or . i > self % len ) then !error stop \"Index out of bounds in pic_string_set\" return end if self % buf ( i : i ) = ch end subroutine pic_string_set","tags":"","url":"proc/pic_string_set.html"},{"title":"pic_string_shrink_to_fit – PIC","text":"private  subroutine pic_string_shrink_to_fit(self) shrink the capacity to fit the current size Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Variables Type Visibility Attributes Name Initial character(len=:), private, allocatable :: tmp Source Code subroutine pic_string_shrink_to_fit ( self ) !! shrink the capacity to fit the current size class ( pic_string_type ), intent ( inout ) :: self character ( len = :), allocatable :: tmp if (. not . allocated ( self % buf )) return if ( self % len == 0_int64 ) then deallocate ( self % buf ); self % cap = 0_int64 else allocate ( character ( len = self % len ) :: tmp ) tmp ( 1 : self % len ) = self % buf ( 1 : self % len ) call move_alloc ( tmp , self % buf ) self % cap = self % len end if end subroutine pic_string_shrink_to_fit","tags":"","url":"proc/pic_string_shrink_to_fit.html"},{"title":"pic_string_trim – PIC","text":"private  subroutine pic_string_trim(self) trim leading and trailing whitespace characters Type Bound pic_string_type Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self Calls proc~~pic_string_trim~~CallsGraph proc~pic_string_trim pic_string_type%pic_string_trim proc~pic_string_ltrim pic_string_type%pic_string_ltrim proc~pic_string_trim->proc~pic_string_ltrim proc~pic_string_rtrim pic_string_type%pic_string_rtrim proc~pic_string_trim->proc~pic_string_rtrim Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine pic_string_trim ( self ) !! trim leading and trailing whitespace characters class ( pic_string_type ), intent ( inout ) :: self call self % rtrim () call self % ltrim () end subroutine pic_string_trim","tags":"","url":"proc/pic_string_trim.html"},{"title":"operator(/=) – PIC","text":"public interface operator(/=) Calls interface~~operator(SLASH=)~~CallsGraph interface~operator(SLASH=) operator(/=) proc~char_ne_pic_string char_ne_pic_string interface~operator(SLASH=)->proc~char_ne_pic_string proc~pic_string_ne_char pic_string_ne_char interface~operator(SLASH=)->proc~pic_string_ne_char proc~pic_string_ne_string pic_string_ne_string interface~operator(SLASH=)->proc~pic_string_ne_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private pure function pic_string_ne_string (a, b) result(ok) return true if the two strings are not equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical private pure function pic_string_ne_char (a, c) result(ok) return true if the pic_string_type is not equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical private pure function char_ne_pic_string (c, a) result(ok) return true if the character string is not equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical","tags":"","url":"interface/operator(SLASH=).html"},{"title":"operator(==) – PIC","text":"public interface operator(==) Calls interface~~operator(==)~~CallsGraph interface~operator(==) operator(==) proc~char_eq_pic_string char_eq_pic_string interface~operator(==)->proc~char_eq_pic_string proc~pic_string_eq_char pic_string_eq_char interface~operator(==)->proc~pic_string_eq_char proc~pic_string_eq_string pic_string_eq_string interface~operator(==)->proc~pic_string_eq_string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private pure function pic_string_eq_string (a, b) result(ok) return true if the two strings are equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical private pure function pic_string_eq_char (a, c) result(ok) return true if the pic_string_type is equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical private pure function char_eq_pic_string (c, a) result(ok) return true if the character string is equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical","tags":"","url":"interface/operator(==).html"},{"title":"char_decrease_sort – PIC","text":"private pure subroutine char_decrease_sort(array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) Calls proc~~char_decrease_sort~~CallsGraph proc~char_decrease_sort char_decrease_sort none~introsort~10 introsort proc~char_decrease_sort->none~introsort~10 none~introsort~10->none~introsort~10 none~heap_sort~10 heap_sort none~introsort~10->none~heap_sort~10 none~insertion_sort~10 insertion_sort none~introsort~10->none~insertion_sort~10 none~partition~10 partition none~introsort~10->none~partition~10 none~max_heapify~10 max_heapify none~heap_sort~10->none~max_heapify~10 none~max_heapify~10->none~max_heapify~10 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~char_decrease_sort~~CalledByGraph proc~char_decrease_sort char_decrease_sort proc~char_sort char_sort proc~char_sort->proc~char_decrease_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine char_decrease_sort ( array ) ! `char_decrease_sort( array )` sorts the input `ARRAY` of type `character(len=*)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `char_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index character ( len = len ( array )) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size character ( len = len ( array )) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest character ( len = len ( array )) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine char_decrease_sort","tags":"","url":"proc/char_decrease_sort.html"},{"title":"char_increase_sort – PIC","text":"private pure subroutine char_increase_sort(array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) Calls proc~~char_increase_sort~~CallsGraph proc~char_increase_sort char_increase_sort none~introsort~5 introsort proc~char_increase_sort->none~introsort~5 none~introsort~5->none~introsort~5 none~heap_sort~5 heap_sort none~introsort~5->none~heap_sort~5 none~insertion_sort~5 insertion_sort none~introsort~5->none~insertion_sort~5 none~partition~5 partition none~introsort~5->none~partition~5 none~max_heapify~5 max_heapify none~heap_sort~5->none~max_heapify~5 none~max_heapify~5->none~max_heapify~5 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~char_increase_sort~~CalledByGraph proc~char_increase_sort char_increase_sort proc~char_sort char_sort proc~char_sort->proc~char_increase_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine char_increase_sort ( array ) ! `char_increase_sort( array )` sorts the input `ARRAY` of type `character(len=*)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `char_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index character ( len = len ( array )) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size character ( len = len ( array )) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest character ( len = len ( array )) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine char_increase_sort","tags":"","url":"proc/char_increase_sort.html"},{"title":"char_sort – PIC","text":"private pure module subroutine char_sort(array, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) logical, intent(in), optional :: reverse Calls proc~~char_sort~~CallsGraph proc~char_sort char_sort interface~pic_optional pic_optional proc~char_sort->interface~pic_optional proc~char_decrease_sort char_decrease_sort proc~char_sort->proc~char_decrease_sort proc~char_increase_sort char_increase_sort proc~char_sort->proc~char_increase_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~introsort~10 introsort proc~char_decrease_sort->none~introsort~10 none~introsort~5 introsort proc~char_increase_sort->none~introsort~5 none~introsort~10->none~introsort~10 none~heap_sort~10 heap_sort none~introsort~10->none~heap_sort~10 none~insertion_sort~10 insertion_sort none~introsort~10->none~insertion_sort~10 none~partition~10 partition none~introsort~10->none~partition~10 none~introsort~5->none~introsort~5 none~heap_sort~5 heap_sort none~introsort~5->none~heap_sort~5 none~insertion_sort~5 insertion_sort none~introsort~5->none~insertion_sort~5 none~partition~5 partition none~introsort~5->none~partition~5 none~max_heapify~10 max_heapify none~heap_sort~10->none~max_heapify~10 none~max_heapify~5 max_heapify none~heap_sort~5->none~max_heapify~5 none~max_heapify~10->none~max_heapify~10 none~max_heapify~5->none~max_heapify~5 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure module subroutine char_sort ( array , reverse ) !! `char_sort( array[, reverse] )` sorts the input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none character ( len =* ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_sort","tags":"","url":"proc/char_sort.html"},{"title":"dp_decrease_sort – PIC","text":"private pure subroutine dp_decrease_sort(array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) Calls proc~~dp_decrease_sort~~CallsGraph proc~dp_decrease_sort dp_decrease_sort none~introsort~9 introsort proc~dp_decrease_sort->none~introsort~9 none~introsort~9->none~introsort~9 none~heap_sort~9 heap_sort none~introsort~9->none~heap_sort~9 none~insertion_sort~9 insertion_sort none~introsort~9->none~insertion_sort~9 none~partition~9 partition none~introsort~9->none~partition~9 none~max_heapify~9 max_heapify none~heap_sort~9->none~max_heapify~9 none~max_heapify~9->none~max_heapify~9 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~dp_decrease_sort~~CalledByGraph proc~dp_decrease_sort dp_decrease_sort proc~dp_sort dp_sort proc~dp_sort->proc~dp_decrease_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine dp_decrease_sort ( array ) ! `dp_decrease_sort( array )` sorts the input `ARRAY` of type `real(dp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `dp_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( dp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( dp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( dp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine dp_decrease_sort","tags":"","url":"proc/dp_decrease_sort.html"},{"title":"dp_increase_sort – PIC","text":"private pure subroutine dp_increase_sort(array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) Calls proc~~dp_increase_sort~~CallsGraph proc~dp_increase_sort dp_increase_sort none~introsort~4 introsort proc~dp_increase_sort->none~introsort~4 none~introsort~4->none~introsort~4 none~heap_sort~4 heap_sort none~introsort~4->none~heap_sort~4 none~insertion_sort~4 insertion_sort none~introsort~4->none~insertion_sort~4 none~partition~4 partition none~introsort~4->none~partition~4 none~max_heapify~4 max_heapify none~heap_sort~4->none~max_heapify~4 none~max_heapify~4->none~max_heapify~4 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~dp_increase_sort~~CalledByGraph proc~dp_increase_sort dp_increase_sort proc~dp_sort dp_sort proc~dp_sort->proc~dp_increase_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine dp_increase_sort ( array ) ! `dp_increase_sort( array )` sorts the input `ARRAY` of type `real(dp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `dp_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( dp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( dp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( dp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine dp_increase_sort","tags":"","url":"proc/dp_increase_sort.html"},{"title":"dp_sort – PIC","text":"private pure module subroutine dp_sort(array, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse Calls proc~~dp_sort~~CallsGraph proc~dp_sort dp_sort interface~pic_optional pic_optional proc~dp_sort->interface~pic_optional proc~dp_decrease_sort dp_decrease_sort proc~dp_sort->proc~dp_decrease_sort proc~dp_increase_sort dp_increase_sort proc~dp_sort->proc~dp_increase_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~introsort~9 introsort proc~dp_decrease_sort->none~introsort~9 none~introsort~4 introsort proc~dp_increase_sort->none~introsort~4 none~introsort~4->none~introsort~4 none~heap_sort~4 heap_sort none~introsort~4->none~heap_sort~4 none~insertion_sort~4 insertion_sort none~introsort~4->none~insertion_sort~4 none~partition~4 partition none~introsort~4->none~partition~4 none~introsort~9->none~introsort~9 none~heap_sort~9 heap_sort none~introsort~9->none~heap_sort~9 none~insertion_sort~9 insertion_sort none~introsort~9->none~insertion_sort~9 none~partition~9 partition none~introsort~9->none~partition~9 none~max_heapify~4 max_heapify none~heap_sort~4->none~max_heapify~4 none~max_heapify~9 max_heapify none~heap_sort~9->none~max_heapify~9 none~max_heapify~4->none~max_heapify~4 none~max_heapify~9->none~max_heapify~9 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure module subroutine dp_sort ( array , reverse ) !! `dp_sort( array[, reverse] )` sorts the input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none real ( dp ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_sort","tags":"","url":"proc/dp_sort.html"},{"title":"int32_decrease_sort – PIC","text":"private pure subroutine int32_decrease_sort(array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) Calls proc~~int32_decrease_sort~~CallsGraph proc~int32_decrease_sort int32_decrease_sort none~introsort~6 introsort proc~int32_decrease_sort->none~introsort~6 none~introsort~6->none~introsort~6 none~heap_sort~6 heap_sort none~introsort~6->none~heap_sort~6 none~insertion_sort~6 insertion_sort none~introsort~6->none~insertion_sort~6 none~partition~6 partition none~introsort~6->none~partition~6 none~max_heapify~6 max_heapify none~heap_sort~6->none~max_heapify~6 none~max_heapify~6->none~max_heapify~6 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int32_decrease_sort~~CalledByGraph proc~int32_decrease_sort int32_decrease_sort proc~int32_sort int32_sort proc~int32_sort->proc~int32_decrease_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine int32_decrease_sort ( array ) ! `int32_decrease_sort( array )` sorts the input `ARRAY` of type `integer(int32)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int32_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int32 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int32 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int32 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int32_decrease_sort","tags":"","url":"proc/int32_decrease_sort.html"},{"title":"int32_increase_sort – PIC","text":"private pure subroutine int32_increase_sort(array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) Calls proc~~int32_increase_sort~~CallsGraph proc~int32_increase_sort int32_increase_sort none~introsort introsort proc~int32_increase_sort->none~introsort none~introsort->none~introsort none~heap_sort heap_sort none~introsort->none~heap_sort none~insertion_sort insertion_sort none~introsort->none~insertion_sort none~partition partition none~introsort->none~partition none~max_heapify max_heapify none~heap_sort->none~max_heapify none~max_heapify->none~max_heapify Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int32_increase_sort~~CalledByGraph proc~int32_increase_sort int32_increase_sort proc~int32_sort int32_sort proc~int32_sort->proc~int32_increase_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine int32_increase_sort ( array ) ! `int32_increase_sort( array )` sorts the input `ARRAY` of type `integer(int32)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int32_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int32 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int32 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int32 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int32_increase_sort","tags":"","url":"proc/int32_increase_sort.html"},{"title":"int32_sort – PIC","text":"private pure module subroutine int32_sort(array, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) logical, intent(in), optional :: reverse Calls proc~~int32_sort~~CallsGraph proc~int32_sort int32_sort interface~pic_optional pic_optional proc~int32_sort->interface~pic_optional proc~int32_decrease_sort int32_decrease_sort proc~int32_sort->proc~int32_decrease_sort proc~int32_increase_sort int32_increase_sort proc~int32_sort->proc~int32_increase_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~introsort~6 introsort proc~int32_decrease_sort->none~introsort~6 none~introsort introsort proc~int32_increase_sort->none~introsort none~introsort->none~introsort none~heap_sort heap_sort none~introsort->none~heap_sort none~insertion_sort insertion_sort none~introsort->none~insertion_sort none~partition partition none~introsort->none~partition none~introsort~6->none~introsort~6 none~heap_sort~6 heap_sort none~introsort~6->none~heap_sort~6 none~insertion_sort~6 insertion_sort none~introsort~6->none~insertion_sort~6 none~partition~6 partition none~introsort~6->none~partition~6 none~max_heapify max_heapify none~heap_sort->none~max_heapify none~max_heapify~6 max_heapify none~heap_sort~6->none~max_heapify~6 none~max_heapify->none~max_heapify none~max_heapify~6->none~max_heapify~6 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure module subroutine int32_sort ( array , reverse ) !! `int32_sort( array[, reverse] )` sorts the input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none integer ( int32 ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_sort","tags":"","url":"proc/int32_sort.html"},{"title":"int64_decrease_sort – PIC","text":"private pure subroutine int64_decrease_sort(array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) Calls proc~~int64_decrease_sort~~CallsGraph proc~int64_decrease_sort int64_decrease_sort none~introsort~7 introsort proc~int64_decrease_sort->none~introsort~7 none~introsort~7->none~introsort~7 none~heap_sort~7 heap_sort none~introsort~7->none~heap_sort~7 none~insertion_sort~7 insertion_sort none~introsort~7->none~insertion_sort~7 none~partition~7 partition none~introsort~7->none~partition~7 none~max_heapify~7 max_heapify none~heap_sort~7->none~max_heapify~7 none~max_heapify~7->none~max_heapify~7 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int64_decrease_sort~~CalledByGraph proc~int64_decrease_sort int64_decrease_sort proc~int64_sort int64_sort proc~int64_sort->proc~int64_decrease_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine int64_decrease_sort ( array ) ! `int64_decrease_sort( array )` sorts the input `ARRAY` of type `integer(int64)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int64_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int64 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int64 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int64 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int64_decrease_sort","tags":"","url":"proc/int64_decrease_sort.html"},{"title":"int64_increase_sort – PIC","text":"private pure subroutine int64_increase_sort(array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) Calls proc~~int64_increase_sort~~CallsGraph proc~int64_increase_sort int64_increase_sort none~introsort~2 introsort proc~int64_increase_sort->none~introsort~2 none~introsort~2->none~introsort~2 none~heap_sort~2 heap_sort none~introsort~2->none~heap_sort~2 none~insertion_sort~2 insertion_sort none~introsort~2->none~insertion_sort~2 none~partition~2 partition none~introsort~2->none~partition~2 none~max_heapify~2 max_heapify none~heap_sort~2->none~max_heapify~2 none~max_heapify~2->none~max_heapify~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int64_increase_sort~~CalledByGraph proc~int64_increase_sort int64_increase_sort proc~int64_sort int64_sort proc~int64_sort->proc~int64_increase_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine int64_increase_sort ( array ) ! `int64_increase_sort( array )` sorts the input `ARRAY` of type `integer(int64)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int64_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int64 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int64 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int64 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int64_increase_sort","tags":"","url":"proc/int64_increase_sort.html"},{"title":"int64_sort – PIC","text":"private pure module subroutine int64_sort(array, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) logical, intent(in), optional :: reverse Calls proc~~int64_sort~~CallsGraph proc~int64_sort int64_sort interface~pic_optional pic_optional proc~int64_sort->interface~pic_optional proc~int64_decrease_sort int64_decrease_sort proc~int64_sort->proc~int64_decrease_sort proc~int64_increase_sort int64_increase_sort proc~int64_sort->proc~int64_increase_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~introsort~7 introsort proc~int64_decrease_sort->none~introsort~7 none~introsort~2 introsort proc~int64_increase_sort->none~introsort~2 none~introsort~2->none~introsort~2 none~heap_sort~2 heap_sort none~introsort~2->none~heap_sort~2 none~insertion_sort~2 insertion_sort none~introsort~2->none~insertion_sort~2 none~partition~2 partition none~introsort~2->none~partition~2 none~introsort~7->none~introsort~7 none~heap_sort~7 heap_sort none~introsort~7->none~heap_sort~7 none~insertion_sort~7 insertion_sort none~introsort~7->none~insertion_sort~7 none~partition~7 partition none~introsort~7->none~partition~7 none~max_heapify~2 max_heapify none~heap_sort~2->none~max_heapify~2 none~max_heapify~7 max_heapify none~heap_sort~7->none~max_heapify~7 none~max_heapify~2->none~max_heapify~2 none~max_heapify~7->none~max_heapify~7 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure module subroutine int64_sort ( array , reverse ) !! `int64_sort( array[, reverse] )` sorts the input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none integer ( int64 ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_sort","tags":"","url":"proc/int64_sort.html"},{"title":"sp_decrease_sort – PIC","text":"private pure subroutine sp_decrease_sort(array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) Calls proc~~sp_decrease_sort~~CallsGraph proc~sp_decrease_sort sp_decrease_sort none~introsort~8 introsort proc~sp_decrease_sort->none~introsort~8 none~introsort~8->none~introsort~8 none~heap_sort~8 heap_sort none~introsort~8->none~heap_sort~8 none~insertion_sort~8 insertion_sort none~introsort~8->none~insertion_sort~8 none~partition~8 partition none~introsort~8->none~partition~8 none~max_heapify~8 max_heapify none~heap_sort~8->none~max_heapify~8 none~max_heapify~8->none~max_heapify~8 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sp_decrease_sort~~CalledByGraph proc~sp_decrease_sort sp_decrease_sort proc~sp_sort sp_sort proc~sp_sort->proc~sp_decrease_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine sp_decrease_sort ( array ) ! `sp_decrease_sort( array )` sorts the input `ARRAY` of type `real(sp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `sp_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( sp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( sp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( sp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine sp_decrease_sort","tags":"","url":"proc/sp_decrease_sort.html"},{"title":"sp_increase_sort – PIC","text":"private pure subroutine sp_increase_sort(array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) Calls proc~~sp_increase_sort~~CallsGraph proc~sp_increase_sort sp_increase_sort none~introsort~3 introsort proc~sp_increase_sort->none~introsort~3 none~introsort~3->none~introsort~3 none~heap_sort~3 heap_sort none~introsort~3->none~heap_sort~3 none~insertion_sort~3 insertion_sort none~introsort~3->none~insertion_sort~3 none~partition~3 partition none~introsort~3->none~partition~3 none~max_heapify~3 max_heapify none~heap_sort~3->none~max_heapify~3 none~max_heapify~3->none~max_heapify~3 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sp_increase_sort~~CalledByGraph proc~sp_increase_sort sp_increase_sort proc~sp_sort sp_sort proc~sp_sort->proc~sp_increase_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: depth_limit Subroutines pure subroutine heap_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure recursive subroutine introsort (array, depth_limit) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int32), intent(in) :: depth_limit pure recursive subroutine max_heapify (array, i, heap_size) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: i integer(kind=int_index), intent(in) :: heap_size pure subroutine partition (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index Source Code pure subroutine sp_increase_sort ( array ) ! `sp_increase_sort( array )` sorts the input `ARRAY` of type `real(sp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `sp_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( sp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( sp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( sp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine sp_increase_sort","tags":"","url":"proc/sp_increase_sort.html"},{"title":"sp_sort – PIC","text":"private pure module subroutine sp_sort(array, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse Calls proc~~sp_sort~~CallsGraph proc~sp_sort sp_sort interface~pic_optional pic_optional proc~sp_sort->interface~pic_optional proc~sp_decrease_sort sp_decrease_sort proc~sp_sort->proc~sp_decrease_sort proc~sp_increase_sort sp_increase_sort proc~sp_sort->proc~sp_increase_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~introsort~8 introsort proc~sp_decrease_sort->none~introsort~8 none~introsort~3 introsort proc~sp_increase_sort->none~introsort~3 none~introsort~3->none~introsort~3 none~heap_sort~3 heap_sort none~introsort~3->none~heap_sort~3 none~insertion_sort~3 insertion_sort none~introsort~3->none~insertion_sort~3 none~partition~3 partition none~introsort~3->none~partition~3 none~introsort~8->none~introsort~8 none~heap_sort~8 heap_sort none~introsort~8->none~heap_sort~8 none~insertion_sort~8 insertion_sort none~introsort~8->none~insertion_sort~8 none~partition~8 partition none~introsort~8->none~partition~8 none~max_heapify~3 max_heapify none~heap_sort~3->none~max_heapify~3 none~max_heapify~8 max_heapify none~heap_sort~8->none~max_heapify~8 none~max_heapify~3->none~max_heapify~3 none~max_heapify~8->none~max_heapify~8 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code pure module subroutine sp_sort ( array , reverse ) !! `sp_sort( array[, reverse] )` sorts the input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none real ( sp ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_sort","tags":"","url":"proc/sp_sort.html"},{"title":"sort – PIC","text":"public interface sort The generic subroutine interface implementing the SORT algorithm, based\non the introsort of David Musser.\n( Specification ) Subroutines private pure module subroutine char_sort(array, reverse) Implementation → char_sort( array[, reverse] ) sorts the input ARRAY of type character(len=*) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine dp_sort(array, reverse) Implementation → dp_sort( array[, reverse] ) sorts the input ARRAY of type real(dp) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine int32_sort(array, reverse) Implementation → int32_sort( array[, reverse] ) sorts the input ARRAY of type integer(int32) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine int64_sort(array, reverse) Implementation → int64_sort( array[, reverse] ) sorts the input ARRAY of type integer(int64) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine sp_sort(array, reverse) Implementation → sp_sort( array[, reverse] ) sorts the input ARRAY of type real(sp) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse","tags":"","url":"interface/sort.html"},{"title":"get_threading_mode – PIC","text":"public  function get_threading_mode() result(mode) get the current threading mode for the array routines\nUsage: mode = get_threading_mode() Arguments None Return Value logical Source Code function get_threading_mode () result ( mode ) !! get the current threading mode for the array routines !! Usage: mode = get_threading_mode() logical :: mode mode = use_threaded_default end function get_threading_mode","tags":"","url":"proc/get_threading_mode.html"},{"title":"is_sorted_char – PIC","text":"private pure function is_sorted_char(array, order) result(sorted) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical Calls proc~~is_sorted_char~~CallsGraph proc~is_sorted_char is_sorted_char interface~pic_optional pic_optional proc~is_sorted_char->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~is_sorted_char~~CalledByGraph proc~is_sorted_char is_sorted_char interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_char Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i integer(kind=default_int), private :: sort_order Source Code pure function is_sorted_char ( array , order ) result ( sorted ) character ( len =* ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_char","tags":"","url":"proc/is_sorted_char.html"},{"title":"is_sorted_dp – PIC","text":"private pure function is_sorted_dp(array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical Calls proc~~is_sorted_dp~~CallsGraph proc~is_sorted_dp is_sorted_dp interface~pic_optional pic_optional proc~is_sorted_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~is_sorted_dp~~CalledByGraph proc~is_sorted_dp is_sorted_dp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i integer(kind=default_int), private :: sort_order Source Code pure function is_sorted_dp ( array , order ) result ( sorted ) real ( dp ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_dp","tags":"","url":"proc/is_sorted_dp.html"},{"title":"is_sorted_int32 – PIC","text":"private pure function is_sorted_int32(array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical Calls proc~~is_sorted_int32~~CallsGraph proc~is_sorted_int32 is_sorted_int32 interface~pic_optional pic_optional proc~is_sorted_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~is_sorted_int32~~CalledByGraph proc~is_sorted_int32 is_sorted_int32 interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i integer(kind=default_int), private :: sort_order Source Code pure function is_sorted_int32 ( array , order ) result ( sorted ) integer ( int32 ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_int32","tags":"","url":"proc/is_sorted_int32.html"},{"title":"is_sorted_int64 – PIC","text":"private pure function is_sorted_int64(array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical Calls proc~~is_sorted_int64~~CallsGraph proc~is_sorted_int64 is_sorted_int64 interface~pic_optional pic_optional proc~is_sorted_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~is_sorted_int64~~CalledByGraph proc~is_sorted_int64 is_sorted_int64 interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i integer(kind=default_int), private :: sort_order Source Code pure function is_sorted_int64 ( array , order ) result ( sorted ) integer ( int64 ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_int64","tags":"","url":"proc/is_sorted_int64.html"},{"title":"is_sorted_sp – PIC","text":"private pure function is_sorted_sp(array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical Calls proc~~is_sorted_sp~~CallsGraph proc~is_sorted_sp is_sorted_sp interface~pic_optional pic_optional proc~is_sorted_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~is_sorted_sp~~CalledByGraph proc~is_sorted_sp is_sorted_sp interface~is_sorted is_sorted interface~is_sorted->proc~is_sorted_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i integer(kind=default_int), private :: sort_order Source Code pure function is_sorted_sp ( array , order ) result ( sorted ) real ( sp ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_sp","tags":"","url":"proc/is_sorted_sp.html"},{"title":"sum_matrix_dp – PIC","text":"private  function sum_matrix_dp(matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=dp) Calls proc~~sum_matrix_dp~~CallsGraph proc~sum_matrix_dp sum_matrix_dp interface~pic_optional pic_optional proc~sum_matrix_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_matrix_dp~~CalledByGraph proc~sum_matrix_dp sum_matrix_dp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code function sum_matrix_dp ( matrix , threaded ) result ( res ) real ( dp ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads real ( dp ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_dp if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_dp","tags":"","url":"proc/sum_matrix_dp.html"},{"title":"sum_matrix_int32 – PIC","text":"private  function sum_matrix_int32(matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) Calls proc~~sum_matrix_int32~~CallsGraph proc~sum_matrix_int32 sum_matrix_int32 interface~pic_optional pic_optional proc~sum_matrix_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_matrix_int32~~CalledByGraph proc~sum_matrix_int32 sum_matrix_int32 interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code function sum_matrix_int32 ( matrix , threaded ) result ( res ) integer ( int32 ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int32 ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_int32 if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_int32","tags":"","url":"proc/sum_matrix_int32.html"},{"title":"sum_matrix_int64 – PIC","text":"private  function sum_matrix_int64(matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) Calls proc~~sum_matrix_int64~~CallsGraph proc~sum_matrix_int64 sum_matrix_int64 interface~pic_optional pic_optional proc~sum_matrix_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_matrix_int64~~CalledByGraph proc~sum_matrix_int64 sum_matrix_int64 interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code function sum_matrix_int64 ( matrix , threaded ) result ( res ) integer ( int64 ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int64 ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_int64 if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_int64","tags":"","url":"proc/sum_matrix_int64.html"},{"title":"sum_matrix_sp – PIC","text":"private  function sum_matrix_sp(matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=sp) Calls proc~~sum_matrix_sp~~CallsGraph proc~sum_matrix_sp sum_matrix_sp interface~pic_optional pic_optional proc~sum_matrix_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_matrix_sp~~CalledByGraph proc~sum_matrix_sp sum_matrix_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code function sum_matrix_sp ( matrix , threaded ) result ( res ) real ( sp ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads real ( sp ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_sp if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_sp","tags":"","url":"proc/sum_matrix_sp.html"},{"title":"sum_vector_dp – PIC","text":"private  function sum_vector_dp(vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=dp) Calls proc~~sum_vector_dp~~CallsGraph proc~sum_vector_dp sum_vector_dp interface~pic_optional pic_optional proc~sum_vector_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_vector_dp~~CalledByGraph proc~sum_vector_dp sum_vector_dp interface~pic_sum pic_sum interface~pic_sum->proc~sum_vector_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code function sum_vector_dp ( vector , threaded ) result ( res ) real ( dp ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads real ( dp ) :: res integer ( default_int ) :: i res = 0_dp use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_dp","tags":"","url":"proc/sum_vector_dp.html"},{"title":"sum_vector_int32 – PIC","text":"private  function sum_vector_int32(vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) Calls proc~~sum_vector_int32~~CallsGraph proc~sum_vector_int32 sum_vector_int32 interface~pic_optional pic_optional proc~sum_vector_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_vector_int32~~CalledByGraph proc~sum_vector_int32 sum_vector_int32 interface~pic_sum pic_sum interface~pic_sum->proc~sum_vector_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code function sum_vector_int32 ( vector , threaded ) result ( res ) integer ( int32 ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int32 ) :: res integer ( default_int ) :: i res = 0_int32 use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_int32","tags":"","url":"proc/sum_vector_int32.html"},{"title":"sum_vector_int64 – PIC","text":"private  function sum_vector_int64(vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) Calls proc~~sum_vector_int64~~CallsGraph proc~sum_vector_int64 sum_vector_int64 interface~pic_optional pic_optional proc~sum_vector_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_vector_int64~~CalledByGraph proc~sum_vector_int64 sum_vector_int64 interface~pic_sum pic_sum interface~pic_sum->proc~sum_vector_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code function sum_vector_int64 ( vector , threaded ) result ( res ) integer ( int64 ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int64 ) :: res integer ( default_int ) :: i res = 0_int64 use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_int64","tags":"","url":"proc/sum_vector_int64.html"},{"title":"sum_vector_sp – PIC","text":"private  function sum_vector_sp(vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=sp) Calls proc~~sum_vector_sp~~CallsGraph proc~sum_vector_sp sum_vector_sp interface~pic_optional pic_optional proc~sum_vector_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sum_vector_sp~~CalledByGraph proc~sum_vector_sp sum_vector_sp interface~pic_sum pic_sum interface~pic_sum->proc~sum_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code function sum_vector_sp ( vector , threaded ) result ( res ) real ( sp ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads real ( sp ) :: res integer ( default_int ) :: i res = 0_sp use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_sp","tags":"","url":"proc/sum_vector_sp.html"},{"title":"set_threading_mode – PIC","text":"public  subroutine set_threading_mode(threaded) set the threading mode for the array routines, this will set the use_threaded variable\nto true or false depending on the input Usage: call set_threading(.true.) or call set_threading(.false.) Arguments Type Intent Optional Attributes Name logical, intent(in) :: threaded Source Code subroutine set_threading_mode ( threaded ) !! set the threading mode for the array routines, this will set the use_threaded variable !! to true or false depending on the input !! !! Usage: call set_threading(.true.) or call set_threading(.false.) logical , intent ( in ) :: threaded use_threaded_default = threaded end subroutine set_threading_mode","tags":"","url":"proc/set_threading_mode.html"},{"title":"copy_matrix_dp – PIC","text":"private  subroutine copy_matrix_dp(dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:,:) real(kind=dp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded Calls proc~~copy_matrix_dp~~CallsGraph proc~copy_matrix_dp copy_matrix_dp interface~pic_optional pic_optional proc~copy_matrix_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_matrix_dp~~CalledByGraph proc~copy_matrix_dp copy_matrix_dp interface~copy copy interface~copy->proc~copy_matrix_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine copy_matrix_dp ( dest , source , threaded ) real ( dp ), intent ( inout ) :: dest (:, :) real ( dp ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_dp","tags":"","url":"proc/copy_matrix_dp.html"},{"title":"copy_matrix_int32 – PIC","text":"private  subroutine copy_matrix_int32(dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:,:) integer(kind=int32), intent(in) :: source (:,:) logical, intent(in), optional :: threaded Calls proc~~copy_matrix_int32~~CallsGraph proc~copy_matrix_int32 copy_matrix_int32 interface~pic_optional pic_optional proc~copy_matrix_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_matrix_int32~~CalledByGraph proc~copy_matrix_int32 copy_matrix_int32 interface~copy copy interface~copy->proc~copy_matrix_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine copy_matrix_int32 ( dest , source , threaded ) integer ( int32 ), intent ( inout ) :: dest (:, :) integer ( int32 ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_int32","tags":"","url":"proc/copy_matrix_int32.html"},{"title":"copy_matrix_int64 – PIC","text":"private  subroutine copy_matrix_int64(dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:,:) integer(kind=int64), intent(in) :: source (:,:) logical, intent(in), optional :: threaded Calls proc~~copy_matrix_int64~~CallsGraph proc~copy_matrix_int64 copy_matrix_int64 interface~pic_optional pic_optional proc~copy_matrix_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_matrix_int64~~CalledByGraph proc~copy_matrix_int64 copy_matrix_int64 interface~copy copy interface~copy->proc~copy_matrix_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine copy_matrix_int64 ( dest , source , threaded ) integer ( int64 ), intent ( inout ) :: dest (:, :) integer ( int64 ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_int64","tags":"","url":"proc/copy_matrix_int64.html"},{"title":"copy_matrix_sp – PIC","text":"private  subroutine copy_matrix_sp(dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:,:) real(kind=sp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded Calls proc~~copy_matrix_sp~~CallsGraph proc~copy_matrix_sp copy_matrix_sp interface~pic_optional pic_optional proc~copy_matrix_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_matrix_sp~~CalledByGraph proc~copy_matrix_sp copy_matrix_sp interface~copy copy interface~copy->proc~copy_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine copy_matrix_sp ( dest , source , threaded ) real ( sp ), intent ( inout ) :: dest (:, :) real ( sp ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_sp","tags":"","url":"proc/copy_matrix_sp.html"},{"title":"copy_vector_dp – PIC","text":"private  subroutine copy_vector_dp(dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:) real(kind=dp), intent(in) :: source (:) logical, intent(in), optional :: threaded Calls proc~~copy_vector_dp~~CallsGraph proc~copy_vector_dp copy_vector_dp interface~pic_optional pic_optional proc~copy_vector_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_vector_dp~~CalledByGraph proc~copy_vector_dp copy_vector_dp interface~copy copy interface~copy->proc~copy_vector_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine copy_vector_dp ( dest , source , threaded ) real ( dp ), intent ( inout ) :: dest (:) real ( dp ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_dp","tags":"","url":"proc/copy_vector_dp.html"},{"title":"copy_vector_int32 – PIC","text":"private  subroutine copy_vector_int32(dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:) integer(kind=int32), intent(in) :: source (:) logical, intent(in), optional :: threaded Calls proc~~copy_vector_int32~~CallsGraph proc~copy_vector_int32 copy_vector_int32 interface~pic_optional pic_optional proc~copy_vector_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_vector_int32~~CalledByGraph proc~copy_vector_int32 copy_vector_int32 interface~copy copy interface~copy->proc~copy_vector_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine copy_vector_int32 ( dest , source , threaded ) integer ( int32 ), intent ( inout ) :: dest (:) integer ( int32 ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_int32","tags":"","url":"proc/copy_vector_int32.html"},{"title":"copy_vector_int64 – PIC","text":"private  subroutine copy_vector_int64(dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:) integer(kind=int64), intent(in) :: source (:) logical, intent(in), optional :: threaded Calls proc~~copy_vector_int64~~CallsGraph proc~copy_vector_int64 copy_vector_int64 interface~pic_optional pic_optional proc~copy_vector_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_vector_int64~~CalledByGraph proc~copy_vector_int64 copy_vector_int64 interface~copy copy interface~copy->proc~copy_vector_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine copy_vector_int64 ( dest , source , threaded ) integer ( int64 ), intent ( inout ) :: dest (:) integer ( int64 ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_int64","tags":"","url":"proc/copy_vector_int64.html"},{"title":"copy_vector_sp – PIC","text":"private  subroutine copy_vector_sp(dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:) real(kind=sp), intent(in) :: source (:) logical, intent(in), optional :: threaded Calls proc~~copy_vector_sp~~CallsGraph proc~copy_vector_sp copy_vector_sp interface~pic_optional pic_optional proc~copy_vector_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~copy_vector_sp~~CalledByGraph proc~copy_vector_sp copy_vector_sp interface~copy copy interface~copy->proc~copy_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine copy_vector_sp ( dest , source , threaded ) real ( sp ), intent ( inout ) :: dest (:) real ( sp ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_sp","tags":"","url":"proc/copy_vector_sp.html"},{"title":"fill_matrix_dp – PIC","text":"private  subroutine fill_matrix_dp(matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: matrix (:,:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_matrix_dp~~CallsGraph proc~fill_matrix_dp fill_matrix_dp interface~pic_optional pic_optional proc~fill_matrix_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_matrix_dp~~CalledByGraph proc~fill_matrix_dp fill_matrix_dp interface~fill fill interface~fill->proc~fill_matrix_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine fill_matrix_dp ( matrix , alpha , threaded ) real ( dp ), intent ( inout ) :: matrix (:, :) real ( dp ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_dp","tags":"","url":"proc/fill_matrix_dp.html"},{"title":"fill_matrix_int32 – PIC","text":"private  subroutine fill_matrix_int32(matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: matrix (:,:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_matrix_int32~~CallsGraph proc~fill_matrix_int32 fill_matrix_int32 interface~pic_optional pic_optional proc~fill_matrix_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_matrix_int32~~CalledByGraph proc~fill_matrix_int32 fill_matrix_int32 interface~fill fill interface~fill->proc~fill_matrix_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine fill_matrix_int32 ( matrix , alpha , threaded ) integer ( int32 ), intent ( inout ) :: matrix (:, :) integer ( int32 ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_int32","tags":"","url":"proc/fill_matrix_int32.html"},{"title":"fill_matrix_int64 – PIC","text":"private  subroutine fill_matrix_int64(matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: matrix (:,:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_matrix_int64~~CallsGraph proc~fill_matrix_int64 fill_matrix_int64 interface~pic_optional pic_optional proc~fill_matrix_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_matrix_int64~~CalledByGraph proc~fill_matrix_int64 fill_matrix_int64 interface~fill fill interface~fill->proc~fill_matrix_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine fill_matrix_int64 ( matrix , alpha , threaded ) integer ( int64 ), intent ( inout ) :: matrix (:, :) integer ( int64 ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_int64","tags":"","url":"proc/fill_matrix_int64.html"},{"title":"fill_matrix_sp – PIC","text":"private  subroutine fill_matrix_sp(matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: matrix (:,:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_matrix_sp~~CallsGraph proc~fill_matrix_sp fill_matrix_sp interface~pic_optional pic_optional proc~fill_matrix_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_matrix_sp~~CalledByGraph proc~fill_matrix_sp fill_matrix_sp interface~fill fill interface~fill->proc~fill_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine fill_matrix_sp ( matrix , alpha , threaded ) real ( sp ), intent ( inout ) :: matrix (:, :) real ( sp ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_sp","tags":"","url":"proc/fill_matrix_sp.html"},{"title":"fill_vector_dp – PIC","text":"private  subroutine fill_vector_dp(vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: vector (:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_vector_dp~~CallsGraph proc~fill_vector_dp fill_vector_dp interface~pic_optional pic_optional proc~fill_vector_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_vector_dp~~CalledByGraph proc~fill_vector_dp fill_vector_dp interface~fill fill interface~fill->proc~fill_vector_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine fill_vector_dp ( vector , alpha , threaded ) real ( dp ), intent ( inout ) :: vector (:) real ( dp ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_dp","tags":"","url":"proc/fill_vector_dp.html"},{"title":"fill_vector_int32 – PIC","text":"private  subroutine fill_vector_int32(vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: vector (:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_vector_int32~~CallsGraph proc~fill_vector_int32 fill_vector_int32 interface~pic_optional pic_optional proc~fill_vector_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_vector_int32~~CalledByGraph proc~fill_vector_int32 fill_vector_int32 interface~fill fill interface~fill->proc~fill_vector_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine fill_vector_int32 ( vector , alpha , threaded ) integer ( int32 ), intent ( inout ) :: vector (:) integer ( int32 ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_int32","tags":"","url":"proc/fill_vector_int32.html"},{"title":"fill_vector_int64 – PIC","text":"private  subroutine fill_vector_int64(vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: vector (:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_vector_int64~~CallsGraph proc~fill_vector_int64 fill_vector_int64 interface~pic_optional pic_optional proc~fill_vector_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_vector_int64~~CalledByGraph proc~fill_vector_int64 fill_vector_int64 interface~fill fill interface~fill->proc~fill_vector_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine fill_vector_int64 ( vector , alpha , threaded ) integer ( int64 ), intent ( inout ) :: vector (:) integer ( int64 ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_int64","tags":"","url":"proc/fill_vector_int64.html"},{"title":"fill_vector_sp – PIC","text":"private  subroutine fill_vector_sp(vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: vector (:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded Calls proc~~fill_vector_sp~~CallsGraph proc~fill_vector_sp fill_vector_sp interface~pic_optional pic_optional proc~fill_vector_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~fill_vector_sp~~CalledByGraph proc~fill_vector_sp fill_vector_sp interface~fill fill interface~fill->proc~fill_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i logical, private :: use_threads Source Code subroutine fill_vector_sp ( vector , alpha , threaded ) real ( sp ), intent ( inout ) :: vector (:) real ( sp ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_sp","tags":"","url":"proc/fill_vector_sp.html"},{"title":"print_3d_tensor_dp – PIC","text":"private  subroutine print_3d_tensor_dp(matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_3d_tensor_dp~~CallsGraph proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_optional pic_optional proc~print_3d_tensor_dp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~set_brackets set_brackets proc~print_3d_tensor_dp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_matrix_dp print_matrix_dp interface~pic_print_array->proc~print_matrix_dp proc~print_matrix_int32 print_matrix_int32 interface~pic_print_array->proc~print_matrix_int32 proc~print_matrix_int64 print_matrix_int64 interface~pic_print_array->proc~print_matrix_int64 proc~print_matrix_sp print_matrix_sp interface~pic_print_array->proc~print_matrix_sp proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_dp proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int32 proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_int64 proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_print_array->proc~print_packed_matrix_sp proc~print_vector_dp print_vector_dp interface~pic_print_array->proc~print_vector_dp proc~print_vector_int32 print_vector_int32 interface~pic_print_array->proc~print_vector_int32 proc~print_vector_int64 print_vector_int64 interface~pic_print_array->proc~print_vector_int64 proc~print_vector_sp print_vector_sp interface~pic_print_array->proc~print_vector_sp to_upper to_upper proc~set_brackets->to_upper proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int32->proc~set_brackets proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_int64->proc~set_brackets proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_3d_tensor_sp->proc~set_brackets proc~print_matrix_dp->interface~pic_optional proc~print_matrix_dp->proc~set_brackets interface~to_string to_string proc~print_matrix_dp->interface~to_string proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int32->proc~set_brackets proc~print_matrix_int32->interface~to_string proc~print_matrix_int64->interface~pic_optional proc~print_matrix_int64->proc~set_brackets proc~print_matrix_int64->interface~to_string proc~print_matrix_sp->interface~pic_optional proc~print_matrix_sp->proc~set_brackets proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_dp->proc~set_brackets proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int32->proc~set_brackets proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_int64->proc~set_brackets proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp->interface~pic_optional proc~print_packed_matrix_sp->proc~set_brackets proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp->interface~pic_optional proc~print_vector_dp->proc~set_brackets proc~print_vector_dp->interface~to_string proc~print_vector_int32->interface~pic_optional proc~print_vector_int32->proc~set_brackets proc~print_vector_int32->interface~to_string proc~print_vector_int64->interface~pic_optional proc~print_vector_int64->proc~set_brackets proc~print_vector_int64->interface~to_string proc~print_vector_sp->interface~pic_optional proc~print_vector_sp->proc~set_brackets proc~print_vector_sp->interface~to_string proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_3d_tensor_dp~~CalledByGraph proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_3d_tensor_dp ( matrix , format_type ) !! Print a 3D tensor of ${T} values real ( dp ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_dp","tags":"","url":"proc/print_3d_tensor_dp.html"},{"title":"print_3d_tensor_int32 – PIC","text":"private  subroutine print_3d_tensor_int32(matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_3d_tensor_int32~~CallsGraph proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_optional pic_optional proc~print_3d_tensor_int32->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~set_brackets set_brackets proc~print_3d_tensor_int32->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_matrix_dp print_matrix_dp interface~pic_print_array->proc~print_matrix_dp proc~print_matrix_int32 print_matrix_int32 interface~pic_print_array->proc~print_matrix_int32 proc~print_matrix_int64 print_matrix_int64 interface~pic_print_array->proc~print_matrix_int64 proc~print_matrix_sp print_matrix_sp interface~pic_print_array->proc~print_matrix_sp proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_dp proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int32 proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_int64 proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_print_array->proc~print_packed_matrix_sp proc~print_vector_dp print_vector_dp interface~pic_print_array->proc~print_vector_dp proc~print_vector_int32 print_vector_int32 interface~pic_print_array->proc~print_vector_int32 proc~print_vector_int64 print_vector_int64 interface~pic_print_array->proc~print_vector_int64 proc~print_vector_sp print_vector_sp interface~pic_print_array->proc~print_vector_sp to_upper to_upper proc~set_brackets->to_upper proc~print_3d_tensor_dp->interface~pic_optional proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_dp->proc~set_brackets proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_int64->proc~set_brackets proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_3d_tensor_sp->proc~set_brackets proc~print_matrix_dp->interface~pic_optional proc~print_matrix_dp->proc~set_brackets interface~to_string to_string proc~print_matrix_dp->interface~to_string proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int32->proc~set_brackets proc~print_matrix_int32->interface~to_string proc~print_matrix_int64->interface~pic_optional proc~print_matrix_int64->proc~set_brackets proc~print_matrix_int64->interface~to_string proc~print_matrix_sp->interface~pic_optional proc~print_matrix_sp->proc~set_brackets proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_dp->proc~set_brackets proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int32->proc~set_brackets proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_int64->proc~set_brackets proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp->interface~pic_optional proc~print_packed_matrix_sp->proc~set_brackets proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp->interface~pic_optional proc~print_vector_dp->proc~set_brackets proc~print_vector_dp->interface~to_string proc~print_vector_int32->interface~pic_optional proc~print_vector_int32->proc~set_brackets proc~print_vector_int32->interface~to_string proc~print_vector_int64->interface~pic_optional proc~print_vector_int64->proc~set_brackets proc~print_vector_int64->interface~to_string proc~print_vector_sp->interface~pic_optional proc~print_vector_sp->proc~set_brackets proc~print_vector_sp->interface~to_string proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_3d_tensor_int32~~CalledByGraph proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_3d_tensor_int32 ( matrix , format_type ) !! Print a 3D tensor of ${T} values integer ( int32 ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_int32","tags":"","url":"proc/print_3d_tensor_int32.html"},{"title":"print_3d_tensor_int64 – PIC","text":"private  subroutine print_3d_tensor_int64(matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_3d_tensor_int64~~CallsGraph proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_optional pic_optional proc~print_3d_tensor_int64->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~set_brackets set_brackets proc~print_3d_tensor_int64->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_matrix_dp print_matrix_dp interface~pic_print_array->proc~print_matrix_dp proc~print_matrix_int32 print_matrix_int32 interface~pic_print_array->proc~print_matrix_int32 proc~print_matrix_int64 print_matrix_int64 interface~pic_print_array->proc~print_matrix_int64 proc~print_matrix_sp print_matrix_sp interface~pic_print_array->proc~print_matrix_sp proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_dp proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int32 proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_int64 proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_print_array->proc~print_packed_matrix_sp proc~print_vector_dp print_vector_dp interface~pic_print_array->proc~print_vector_dp proc~print_vector_int32 print_vector_int32 interface~pic_print_array->proc~print_vector_int32 proc~print_vector_int64 print_vector_int64 interface~pic_print_array->proc~print_vector_int64 proc~print_vector_sp print_vector_sp interface~pic_print_array->proc~print_vector_sp to_upper to_upper proc~set_brackets->to_upper proc~print_3d_tensor_dp->interface~pic_optional proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_dp->proc~set_brackets proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int32->proc~set_brackets proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->interface~pic_print_array proc~print_3d_tensor_sp->proc~set_brackets proc~print_matrix_dp->interface~pic_optional proc~print_matrix_dp->proc~set_brackets interface~to_string to_string proc~print_matrix_dp->interface~to_string proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int32->proc~set_brackets proc~print_matrix_int32->interface~to_string proc~print_matrix_int64->interface~pic_optional proc~print_matrix_int64->proc~set_brackets proc~print_matrix_int64->interface~to_string proc~print_matrix_sp->interface~pic_optional proc~print_matrix_sp->proc~set_brackets proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_dp->proc~set_brackets proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int32->proc~set_brackets proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_int64->proc~set_brackets proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp->interface~pic_optional proc~print_packed_matrix_sp->proc~set_brackets proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp->interface~pic_optional proc~print_vector_dp->proc~set_brackets proc~print_vector_dp->interface~to_string proc~print_vector_int32->interface~pic_optional proc~print_vector_int32->proc~set_brackets proc~print_vector_int32->interface~to_string proc~print_vector_int64->interface~pic_optional proc~print_vector_int64->proc~set_brackets proc~print_vector_int64->interface~to_string proc~print_vector_sp->interface~pic_optional proc~print_vector_sp->proc~set_brackets proc~print_vector_sp->interface~to_string proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_3d_tensor_int64~~CalledByGraph proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_3d_tensor_int64 ( matrix , format_type ) !! Print a 3D tensor of ${T} values integer ( int64 ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_int64","tags":"","url":"proc/print_3d_tensor_int64.html"},{"title":"print_3d_tensor_sp – PIC","text":"private  subroutine print_3d_tensor_sp(matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_3d_tensor_sp~~CallsGraph proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_optional pic_optional proc~print_3d_tensor_sp->interface~pic_optional interface~pic_print_array pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array proc~set_brackets set_brackets proc~print_3d_tensor_sp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_matrix_dp print_matrix_dp interface~pic_print_array->proc~print_matrix_dp proc~print_matrix_int32 print_matrix_int32 interface~pic_print_array->proc~print_matrix_int32 proc~print_matrix_int64 print_matrix_int64 interface~pic_print_array->proc~print_matrix_int64 proc~print_matrix_sp print_matrix_sp interface~pic_print_array->proc~print_matrix_sp proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_dp proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int32 proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_int64 proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_print_array->proc~print_packed_matrix_sp proc~print_vector_dp print_vector_dp interface~pic_print_array->proc~print_vector_dp proc~print_vector_int32 print_vector_int32 interface~pic_print_array->proc~print_vector_int32 proc~print_vector_int64 print_vector_int64 interface~pic_print_array->proc~print_vector_int64 proc~print_vector_sp print_vector_sp interface~pic_print_array->proc~print_vector_sp to_upper to_upper proc~set_brackets->to_upper proc~print_3d_tensor_dp->interface~pic_optional proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_dp->proc~set_brackets proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int32->proc~set_brackets proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_int64->proc~set_brackets proc~print_matrix_dp->interface~pic_optional proc~print_matrix_dp->proc~set_brackets interface~to_string to_string proc~print_matrix_dp->interface~to_string proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int32->proc~set_brackets proc~print_matrix_int32->interface~to_string proc~print_matrix_int64->interface~pic_optional proc~print_matrix_int64->proc~set_brackets proc~print_matrix_int64->interface~to_string proc~print_matrix_sp->interface~pic_optional proc~print_matrix_sp->proc~set_brackets proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_dp->proc~set_brackets proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int32->proc~set_brackets proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_int64->proc~set_brackets proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp->interface~pic_optional proc~print_packed_matrix_sp->proc~set_brackets proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp->interface~pic_optional proc~print_vector_dp->proc~set_brackets proc~print_vector_dp->interface~to_string proc~print_vector_int32->interface~pic_optional proc~print_vector_int32->proc~set_brackets proc~print_vector_int32->interface~to_string proc~print_vector_int64->interface~pic_optional proc~print_vector_int64->proc~set_brackets proc~print_vector_int64->interface~to_string proc~print_vector_sp->interface~pic_optional proc~print_vector_sp->proc~set_brackets proc~print_vector_sp->interface~to_string proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_3d_tensor_sp~~CalledByGraph proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_3d_tensor_sp ( matrix , format_type ) !! Print a 3D tensor of ${T} values real ( sp ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_sp","tags":"","url":"proc/print_3d_tensor_sp.html"},{"title":"print_matrix_dp – PIC","text":"private  subroutine print_matrix_dp(matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_matrix_dp~~CallsGraph proc~print_matrix_dp print_matrix_dp interface~pic_optional pic_optional proc~print_matrix_dp->interface~pic_optional interface~to_string to_string proc~print_matrix_dp->interface~to_string proc~set_brackets set_brackets proc~print_matrix_dp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_matrix_dp~~CalledByGraph proc~print_matrix_dp print_matrix_dp interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_matrix_dp ( matrix , format_type ) !! print a matrix of ${T} values real ( dp ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_dp","tags":"","url":"proc/print_matrix_dp.html"},{"title":"print_matrix_int32 – PIC","text":"private  subroutine print_matrix_int32(matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_matrix_int32~~CallsGraph proc~print_matrix_int32 print_matrix_int32 interface~pic_optional pic_optional proc~print_matrix_int32->interface~pic_optional interface~to_string to_string proc~print_matrix_int32->interface~to_string proc~set_brackets set_brackets proc~print_matrix_int32->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_matrix_int32~~CalledByGraph proc~print_matrix_int32 print_matrix_int32 interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_int32 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_matrix_int32 ( matrix , format_type ) !! print a matrix of ${T} values integer ( int32 ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_int32","tags":"","url":"proc/print_matrix_int32.html"},{"title":"print_matrix_int64 – PIC","text":"private  subroutine print_matrix_int64(matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_matrix_int64~~CallsGraph proc~print_matrix_int64 print_matrix_int64 interface~pic_optional pic_optional proc~print_matrix_int64->interface~pic_optional interface~to_string to_string proc~print_matrix_int64->interface~to_string proc~set_brackets set_brackets proc~print_matrix_int64->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_matrix_int64~~CalledByGraph proc~print_matrix_int64 print_matrix_int64 interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_int64 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_matrix_int64 ( matrix , format_type ) !! print a matrix of ${T} values integer ( int64 ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_int64","tags":"","url":"proc/print_matrix_int64.html"},{"title":"print_matrix_sp – PIC","text":"private  subroutine print_matrix_sp(matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type Calls proc~~print_matrix_sp~~CallsGraph proc~print_matrix_sp print_matrix_sp interface~pic_optional pic_optional proc~print_matrix_sp->interface~pic_optional interface~to_string to_string proc~print_matrix_sp->interface~to_string proc~set_brackets set_brackets proc~print_matrix_sp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_matrix_sp~~CalledByGraph proc~print_matrix_sp print_matrix_sp interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_matrix_sp ( matrix , format_type ) !! print a matrix of ${T} values real ( sp ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_sp","tags":"","url":"proc/print_matrix_sp.html"},{"title":"print_packed_matrix_dp – PIC","text":"private  subroutine print_packed_matrix_dp(packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type Calls proc~~print_packed_matrix_dp~~CallsGraph proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_optional pic_optional proc~print_packed_matrix_dp->interface~pic_optional interface~to_string to_string proc~print_packed_matrix_dp->interface~to_string proc~set_brackets set_brackets proc~print_packed_matrix_dp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_packed_matrix_dp~~CalledByGraph proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_packed_matrix_dp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=1), private :: close_bracket integer(kind=default_int), private :: i integer(kind=default_int), private :: idx integer(kind=default_int), private :: j integer(kind=default_int), private :: n real(kind=dp), private :: n_real character(len=1), private :: open_bracket character(len=20), private :: print_format Source Code subroutine print_packed_matrix_dp ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values real ( dp ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_dp","tags":"","url":"proc/print_packed_matrix_dp.html"},{"title":"print_packed_matrix_int32 – PIC","text":"private  subroutine print_packed_matrix_int32(packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type Calls proc~~print_packed_matrix_int32~~CallsGraph proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_optional pic_optional proc~print_packed_matrix_int32->interface~pic_optional interface~to_string to_string proc~print_packed_matrix_int32->interface~to_string proc~set_brackets set_brackets proc~print_packed_matrix_int32->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_packed_matrix_int32~~CalledByGraph proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_packed_matrix_int32 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=1), private :: close_bracket integer(kind=default_int), private :: i integer(kind=default_int), private :: idx integer(kind=default_int), private :: j integer(kind=default_int), private :: n real(kind=dp), private :: n_real character(len=1), private :: open_bracket character(len=20), private :: print_format Source Code subroutine print_packed_matrix_int32 ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values integer ( int32 ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_int32","tags":"","url":"proc/print_packed_matrix_int32.html"},{"title":"print_packed_matrix_int64 – PIC","text":"private  subroutine print_packed_matrix_int64(packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type Calls proc~~print_packed_matrix_int64~~CallsGraph proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_optional pic_optional proc~print_packed_matrix_int64->interface~pic_optional interface~to_string to_string proc~print_packed_matrix_int64->interface~to_string proc~set_brackets set_brackets proc~print_packed_matrix_int64->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_packed_matrix_int64~~CalledByGraph proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_packed_matrix_int64 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=1), private :: close_bracket integer(kind=default_int), private :: i integer(kind=default_int), private :: idx integer(kind=default_int), private :: j integer(kind=default_int), private :: n real(kind=dp), private :: n_real character(len=1), private :: open_bracket character(len=20), private :: print_format Source Code subroutine print_packed_matrix_int64 ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values integer ( int64 ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_int64","tags":"","url":"proc/print_packed_matrix_int64.html"},{"title":"print_packed_matrix_sp – PIC","text":"private  subroutine print_packed_matrix_sp(packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type Calls proc~~print_packed_matrix_sp~~CallsGraph proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_optional pic_optional proc~print_packed_matrix_sp->interface~pic_optional interface~to_string to_string proc~print_packed_matrix_sp->interface~to_string proc~set_brackets set_brackets proc~print_packed_matrix_sp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_packed_matrix_sp~~CalledByGraph proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_packed_matrix_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=1), private :: close_bracket integer(kind=default_int), private :: i integer(kind=default_int), private :: idx integer(kind=default_int), private :: j integer(kind=default_int), private :: n real(kind=dp), private :: n_real character(len=1), private :: open_bracket character(len=20), private :: print_format Source Code subroutine print_packed_matrix_sp ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values real ( sp ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_sp","tags":"","url":"proc/print_packed_matrix_sp.html"},{"title":"print_vector_dp – PIC","text":"private  subroutine print_vector_dp(vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type Calls proc~~print_vector_dp~~CallsGraph proc~print_vector_dp print_vector_dp interface~pic_optional pic_optional proc~print_vector_dp->interface~pic_optional interface~to_string to_string proc~print_vector_dp->interface~to_string proc~set_brackets set_brackets proc~print_vector_dp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_vector_dp~~CalledByGraph proc~print_vector_dp print_vector_dp interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_vector_dp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_vector_dp ( vector , format_type ) !! print a vector of ${T} values real ( dp ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_dp","tags":"","url":"proc/print_vector_dp.html"},{"title":"print_vector_int32 – PIC","text":"private  subroutine print_vector_int32(vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type Calls proc~~print_vector_int32~~CallsGraph proc~print_vector_int32 print_vector_int32 interface~pic_optional pic_optional proc~print_vector_int32->interface~pic_optional interface~to_string to_string proc~print_vector_int32->interface~to_string proc~set_brackets set_brackets proc~print_vector_int32->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_vector_int32~~CalledByGraph proc~print_vector_int32 print_vector_int32 interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_vector_int32 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_vector_int32 ( vector , format_type ) !! print a vector of ${T} values integer ( int32 ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_int32","tags":"","url":"proc/print_vector_int32.html"},{"title":"print_vector_int64 – PIC","text":"private  subroutine print_vector_int64(vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type Calls proc~~print_vector_int64~~CallsGraph proc~print_vector_int64 print_vector_int64 interface~pic_optional pic_optional proc~print_vector_int64->interface~pic_optional interface~to_string to_string proc~print_vector_int64->interface~to_string proc~set_brackets set_brackets proc~print_vector_int64->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_vector_int64~~CalledByGraph proc~print_vector_int64 print_vector_int64 interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_vector_int64 proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_vector_int64 ( vector , format_type ) !! print a vector of ${T} values integer ( int64 ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_int64","tags":"","url":"proc/print_vector_int64.html"},{"title":"print_vector_sp – PIC","text":"private  subroutine print_vector_sp(vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type Calls proc~~print_vector_sp~~CallsGraph proc~print_vector_sp print_vector_sp interface~pic_optional pic_optional proc~print_vector_sp->interface~pic_optional interface~to_string to_string proc~print_vector_sp->interface~to_string proc~set_brackets set_brackets proc~print_vector_sp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~print_vector_sp~~CalledByGraph proc~print_vector_sp print_vector_sp interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=20), private :: print_format Source Code subroutine print_vector_sp ( vector , format_type ) !! print a vector of ${T} values real ( sp ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_sp","tags":"","url":"proc/print_vector_sp.html"},{"title":"scramble_array_character – PIC","text":"private  subroutine scramble_array_character(array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (:) Called by proc~~scramble_array_character~~CalledByGraph proc~scramble_array_character scramble_array_character interface~pic_scramble_array pic_scramble_array interface~pic_scramble_array->proc~scramble_array_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: i integer(kind=int32), private :: j integer(kind=int32), private :: n real(kind=sp), private :: rand_val character(len=len), private :: temp Source Code subroutine scramble_array_character ( array ) character ( len =* ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n character ( len = len ( array )) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_character","tags":"","url":"proc/scramble_array_character.html"},{"title":"scramble_array_dp – PIC","text":"private  subroutine scramble_array_dp(array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (:) Called by proc~~scramble_array_dp~~CalledByGraph proc~scramble_array_dp scramble_array_dp interface~pic_scramble_array pic_scramble_array interface~pic_scramble_array->proc~scramble_array_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: i integer(kind=int32), private :: j integer(kind=int32), private :: n real(kind=sp), private :: rand_val real(kind=dp), private :: temp Source Code subroutine scramble_array_dp ( array ) real ( dp ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n real ( dp ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_dp","tags":"","url":"proc/scramble_array_dp.html"},{"title":"scramble_array_int32 – PIC","text":"private  subroutine scramble_array_int32(array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (:) Called by proc~~scramble_array_int32~~CalledByGraph proc~scramble_array_int32 scramble_array_int32 interface~pic_scramble_array pic_scramble_array interface~pic_scramble_array->proc~scramble_array_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: i integer(kind=int32), private :: j integer(kind=int32), private :: n real(kind=sp), private :: rand_val integer(kind=int32), private :: temp Source Code subroutine scramble_array_int32 ( array ) integer ( int32 ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n integer ( int32 ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_int32","tags":"","url":"proc/scramble_array_int32.html"},{"title":"scramble_array_int64 – PIC","text":"private  subroutine scramble_array_int64(array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (:) Called by proc~~scramble_array_int64~~CalledByGraph proc~scramble_array_int64 scramble_array_int64 interface~pic_scramble_array pic_scramble_array interface~pic_scramble_array->proc~scramble_array_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: i integer(kind=int32), private :: j integer(kind=int32), private :: n real(kind=sp), private :: rand_val integer(kind=int64), private :: temp Source Code subroutine scramble_array_int64 ( array ) integer ( int64 ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n integer ( int64 ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_int64","tags":"","url":"proc/scramble_array_int64.html"},{"title":"scramble_array_sp – PIC","text":"private  subroutine scramble_array_sp(array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (:) Called by proc~~scramble_array_sp~~CalledByGraph proc~scramble_array_sp scramble_array_sp interface~pic_scramble_array pic_scramble_array interface~pic_scramble_array->proc~scramble_array_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private :: i integer(kind=int32), private :: j integer(kind=int32), private :: n real(kind=sp), private :: rand_val real(kind=sp), private :: temp Source Code subroutine scramble_array_sp ( array ) real ( sp ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n real ( sp ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_sp","tags":"","url":"proc/scramble_array_sp.html"},{"title":"set_brackets – PIC","text":"private  subroutine set_brackets(format_type, open_bracket, close_bracket) Set brackets based on output format type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: format_type character(len=1), intent(out) :: open_bracket character(len=1), intent(out) :: close_bracket Calls proc~~set_brackets~~CallsGraph proc~set_brackets set_brackets to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~set_brackets~~CalledByGraph proc~set_brackets set_brackets proc~print_3d_tensor_dp print_3d_tensor_dp proc~print_3d_tensor_dp->proc~set_brackets interface~pic_print_array pic_print_array proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32 print_3d_tensor_int32 proc~print_3d_tensor_int32->proc~set_brackets proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64 print_3d_tensor_int64 proc~print_3d_tensor_int64->proc~set_brackets proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp print_3d_tensor_sp proc~print_3d_tensor_sp->proc~set_brackets proc~print_3d_tensor_sp->interface~pic_print_array proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->proc~set_brackets proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->proc~set_brackets proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->proc~set_brackets proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->proc~set_brackets proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->proc~set_brackets proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->proc~set_brackets proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->proc~set_brackets proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->proc~set_brackets proc~print_vector_dp print_vector_dp proc~print_vector_dp->proc~set_brackets proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->proc~set_brackets proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->proc~set_brackets proc~print_vector_sp print_vector_sp proc~print_vector_sp->proc~set_brackets interface~pic_print_array->proc~print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_sp interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine set_brackets ( format_type , open_bracket , close_bracket ) !! Set brackets based on output format type character ( len =* ), intent ( in ) :: format_type character ( len = 1 ), intent ( out ) :: open_bracket , close_bracket select case ( trim ( to_upper ( adjustl ( format_type )))) case ( \"NUMPY\" ) open_bracket = \"[\" close_bracket = \"]\" case ( \"MATHEMATICA\" ) open_bracket = \"{\" close_bracket = \"}\" case ( \"PLAIN\" ) open_bracket = \"[\" close_bracket = \"]\" case default print * , \"Warning: Unsupported format type '\" // trim ( format_type ) // \"'. Defaulting to NumPy style.\" open_bracket = \"[\" close_bracket = \"]\" end select end subroutine set_brackets","tags":"","url":"proc/set_brackets.html"},{"title":"transpose_matrix_dp – PIC","text":"private  subroutine transpose_matrix_dp(A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded Calls proc~~transpose_matrix_dp~~CallsGraph proc~transpose_matrix_dp transpose_matrix_dp interface~pic_optional pic_optional proc~transpose_matrix_dp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~transpose_matrix_dp~~CalledByGraph proc~transpose_matrix_dp transpose_matrix_dp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine transpose_matrix_dp ( A , B , threaded ) real ( dp ), intent ( in ) :: A (:, :) real ( dp ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_dp","tags":"","url":"proc/transpose_matrix_dp.html"},{"title":"transpose_matrix_int32 – PIC","text":"private  subroutine transpose_matrix_int32(A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: A (:,:) integer(kind=int32), intent(out) :: B (:,:) logical, intent(in), optional :: threaded Calls proc~~transpose_matrix_int32~~CallsGraph proc~transpose_matrix_int32 transpose_matrix_int32 interface~pic_optional pic_optional proc~transpose_matrix_int32->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~transpose_matrix_int32~~CalledByGraph proc~transpose_matrix_int32 transpose_matrix_int32 interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_int32 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine transpose_matrix_int32 ( A , B , threaded ) integer ( int32 ), intent ( in ) :: A (:, :) integer ( int32 ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_int32","tags":"","url":"proc/transpose_matrix_int32.html"},{"title":"transpose_matrix_int64 – PIC","text":"private  subroutine transpose_matrix_int64(A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: A (:,:) integer(kind=int64), intent(out) :: B (:,:) logical, intent(in), optional :: threaded Calls proc~~transpose_matrix_int64~~CallsGraph proc~transpose_matrix_int64 transpose_matrix_int64 interface~pic_optional pic_optional proc~transpose_matrix_int64->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~transpose_matrix_int64~~CalledByGraph proc~transpose_matrix_int64 transpose_matrix_int64 interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_int64 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine transpose_matrix_int64 ( A , B , threaded ) integer ( int64 ), intent ( in ) :: A (:, :) integer ( int64 ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_int64","tags":"","url":"proc/transpose_matrix_int64.html"},{"title":"transpose_matrix_sp – PIC","text":"private  subroutine transpose_matrix_sp(A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded Calls proc~~transpose_matrix_sp~~CallsGraph proc~transpose_matrix_sp transpose_matrix_sp interface~pic_optional pic_optional proc~transpose_matrix_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~transpose_matrix_sp~~CalledByGraph proc~transpose_matrix_sp transpose_matrix_sp interface~pic_transpose pic_transpose interface~pic_transpose->proc~transpose_matrix_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: cols integer(kind=default_int), private :: i integer(kind=default_int), private :: ii integer(kind=default_int), private :: j integer(kind=default_int), private :: jj integer(kind=default_int), private :: rows logical, private :: use_threads Source Code subroutine transpose_matrix_sp ( A , B , threaded ) real ( sp ), intent ( in ) :: A (:, :) real ( sp ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_sp","tags":"","url":"proc/transpose_matrix_sp.html"},{"title":"copy – PIC","text":"public interface copy copy provides a blas-less implementation of xcopy where x is (i,s,d) icopy, scopy, dcopy\nif you built pic with BLAS use the copy interface provided there, I will not beat BLAS\ncopy is implemented for (int32, int64, sp, dp) for 1 and 2d arrays of the same types Usage: call copy(destination, source, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to .true. Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism Calls interface~~copy~~CallsGraph interface~copy copy proc~copy_matrix_dp copy_matrix_dp interface~copy->proc~copy_matrix_dp proc~copy_matrix_int32 copy_matrix_int32 interface~copy->proc~copy_matrix_int32 proc~copy_matrix_int64 copy_matrix_int64 interface~copy->proc~copy_matrix_int64 proc~copy_matrix_sp copy_matrix_sp interface~copy->proc~copy_matrix_sp proc~copy_vector_dp copy_vector_dp interface~copy->proc~copy_vector_dp proc~copy_vector_int32 copy_vector_int32 interface~copy->proc~copy_vector_int32 proc~copy_vector_int64 copy_vector_int64 interface~copy->proc~copy_vector_int64 proc~copy_vector_sp copy_vector_sp interface~copy->proc~copy_vector_sp interface~pic_optional pic_optional proc~copy_matrix_dp->interface~pic_optional proc~copy_matrix_int32->interface~pic_optional proc~copy_matrix_int64->interface~pic_optional proc~copy_matrix_sp->interface~pic_optional proc~copy_vector_dp->interface~pic_optional proc~copy_vector_int32->interface~pic_optional proc~copy_vector_int64->interface~pic_optional proc~copy_vector_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine copy_vector_int32 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:) integer(kind=int32), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_int64 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:) integer(kind=int64), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_sp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:) real(kind=sp), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_dp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:) real(kind=dp), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_int32 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:,:) integer(kind=int32), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_int64 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:,:) integer(kind=int64), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_sp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:,:) real(kind=sp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_dp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:,:) real(kind=dp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded","tags":"","url":"interface/copy.html"},{"title":"fill – PIC","text":"public interface fill fill provides a generic interface to assing a value\nalpha of types (int32, int64, sp, dp) as defined in pic_types.F90\nThe inteface supports filling 1d and 2d arrays of the specified\nvariables Usage: call fill(array, value, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to .true. Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism Calls interface~~fill~~CallsGraph interface~fill fill proc~fill_matrix_dp fill_matrix_dp interface~fill->proc~fill_matrix_dp proc~fill_matrix_int32 fill_matrix_int32 interface~fill->proc~fill_matrix_int32 proc~fill_matrix_int64 fill_matrix_int64 interface~fill->proc~fill_matrix_int64 proc~fill_matrix_sp fill_matrix_sp interface~fill->proc~fill_matrix_sp proc~fill_vector_dp fill_vector_dp interface~fill->proc~fill_vector_dp proc~fill_vector_int32 fill_vector_int32 interface~fill->proc~fill_vector_int32 proc~fill_vector_int64 fill_vector_int64 interface~fill->proc~fill_vector_int64 proc~fill_vector_sp fill_vector_sp interface~fill->proc~fill_vector_sp interface~pic_optional pic_optional proc~fill_matrix_dp->interface~pic_optional proc~fill_matrix_int32->interface~pic_optional proc~fill_matrix_int64->interface~pic_optional proc~fill_matrix_sp->interface~pic_optional proc~fill_vector_dp->interface~pic_optional proc~fill_vector_int32->interface~pic_optional proc~fill_vector_int64->interface~pic_optional proc~fill_vector_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine fill_vector_int32 (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: vector (:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_int64 (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: vector (:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_sp (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: vector (:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_dp (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: vector (:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_int32 (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: matrix (:,:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_int64 (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: matrix (:,:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_sp (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: matrix (:,:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_dp (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: matrix (:,:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded","tags":"","url":"interface/fill.html"},{"title":"is_sorted – PIC","text":"public interface is_sorted is_sorted provides a simple way to checking if a 1d array is sorted\nit is implemented for int32, int64, sp, and dp datatypes. The default\nis to check if an array is sorted in ascending fashion. Usage: result = is_sorted(array, [optional] ASCENDING/DESCENDING) Calls interface~~is_sorted~~CallsGraph interface~is_sorted is_sorted proc~is_sorted_char is_sorted_char interface~is_sorted->proc~is_sorted_char proc~is_sorted_dp is_sorted_dp interface~is_sorted->proc~is_sorted_dp proc~is_sorted_int32 is_sorted_int32 interface~is_sorted->proc~is_sorted_int32 proc~is_sorted_int64 is_sorted_int64 interface~is_sorted->proc~is_sorted_int64 proc~is_sorted_sp is_sorted_sp interface~is_sorted->proc~is_sorted_sp interface~pic_optional pic_optional proc~is_sorted_char->interface~pic_optional proc~is_sorted_dp->interface~pic_optional proc~is_sorted_int32->interface~pic_optional proc~is_sorted_int64->interface~pic_optional proc~is_sorted_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private pure function is_sorted_int32 (array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_int64 (array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_sp (array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_dp (array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_char (array, order) result(sorted) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical","tags":"","url":"interface/is_sorted.html"},{"title":"pic_print_array – PIC","text":"public interface pic_print_array Generic interface for printing arrays of different types Usage: call print_array_v2(array, [optional] format)\nWhere format can be: NUMPY, PLAIN, MATHEMATICA (can use lower caps) Implemented types are: array(:)   -> int32, int64, sp, dp array(:,:) -> int32, int64, sp, dp array(:) (packed matrix) -> sp, dp array(:,:,:) -> sp, dp Calls interface~~pic_print_array~~CallsGraph interface~pic_print_array pic_print_array proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_matrix_dp print_matrix_dp interface~pic_print_array->proc~print_matrix_dp proc~print_matrix_int32 print_matrix_int32 interface~pic_print_array->proc~print_matrix_int32 proc~print_matrix_int64 print_matrix_int64 interface~pic_print_array->proc~print_matrix_int64 proc~print_matrix_sp print_matrix_sp interface~pic_print_array->proc~print_matrix_sp proc~print_packed_matrix_dp print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_dp proc~print_packed_matrix_int32 print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int32 proc~print_packed_matrix_int64 print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_int64 proc~print_packed_matrix_sp print_packed_matrix_sp interface~pic_print_array->proc~print_packed_matrix_sp proc~print_vector_dp print_vector_dp interface~pic_print_array->proc~print_vector_dp proc~print_vector_int32 print_vector_int32 interface~pic_print_array->proc~print_vector_int32 proc~print_vector_int64 print_vector_int64 interface~pic_print_array->proc~print_vector_int64 proc~print_vector_sp print_vector_sp interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp->interface~pic_print_array interface~pic_optional pic_optional proc~print_3d_tensor_dp->interface~pic_optional proc~set_brackets set_brackets proc~print_3d_tensor_dp->proc~set_brackets proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_optional proc~print_3d_tensor_int32->proc~set_brackets proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_optional proc~print_3d_tensor_int64->proc~set_brackets proc~print_3d_tensor_sp->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_optional proc~print_3d_tensor_sp->proc~set_brackets proc~print_matrix_dp->interface~pic_optional interface~to_string to_string proc~print_matrix_dp->interface~to_string proc~print_matrix_dp->proc~set_brackets proc~print_matrix_int32->interface~pic_optional proc~print_matrix_int32->interface~to_string proc~print_matrix_int32->proc~set_brackets proc~print_matrix_int64->interface~pic_optional proc~print_matrix_int64->interface~to_string proc~print_matrix_int64->proc~set_brackets proc~print_matrix_sp->interface~pic_optional proc~print_matrix_sp->interface~to_string proc~print_matrix_sp->proc~set_brackets proc~print_packed_matrix_dp->interface~pic_optional proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_dp->proc~set_brackets proc~print_packed_matrix_int32->interface~pic_optional proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int32->proc~set_brackets proc~print_packed_matrix_int64->interface~pic_optional proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_int64->proc~set_brackets proc~print_packed_matrix_sp->interface~pic_optional proc~print_packed_matrix_sp->interface~to_string proc~print_packed_matrix_sp->proc~set_brackets proc~print_vector_dp->interface~pic_optional proc~print_vector_dp->interface~to_string proc~print_vector_dp->proc~set_brackets proc~print_vector_int32->interface~pic_optional proc~print_vector_int32->interface~to_string proc~print_vector_int32->proc~set_brackets proc~print_vector_int64->interface~pic_optional proc~print_vector_int64->interface~to_string proc~print_vector_int64->proc~set_brackets proc~print_vector_sp->interface~pic_optional proc~print_vector_sp->interface~to_string proc~print_vector_sp->proc~set_brackets proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp to_upper to_upper proc~set_brackets->to_upper Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by interface~~pic_print_array~~CalledByGraph interface~pic_print_array pic_print_array proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine print_vector_int32 (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_int64 (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_sp (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_dp (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_int32 (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_int64 (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_sp (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_dp (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_int32 (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_int64 (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_sp (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_dp (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_int32 (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_int64 (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_sp (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_dp (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type","tags":"","url":"interface/pic_print_array.html"},{"title":"pic_scramble_array – PIC","text":"public interface pic_scramble_array Calls interface~~pic_scramble_array~~CallsGraph interface~pic_scramble_array pic_scramble_array proc~scramble_array_character scramble_array_character interface~pic_scramble_array->proc~scramble_array_character proc~scramble_array_dp scramble_array_dp interface~pic_scramble_array->proc~scramble_array_dp proc~scramble_array_int32 scramble_array_int32 interface~pic_scramble_array->proc~scramble_array_int32 proc~scramble_array_int64 scramble_array_int64 interface~pic_scramble_array->proc~scramble_array_int64 proc~scramble_array_sp scramble_array_sp interface~pic_scramble_array->proc~scramble_array_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine scramble_array_int32 (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (:) private  subroutine scramble_array_int64 (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (:) private  subroutine scramble_array_sp (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (:) private  subroutine scramble_array_dp (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (:) private  subroutine scramble_array_character (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (:)","tags":"","url":"interface/pic_scramble_array.html"},{"title":"pic_sum – PIC","text":"public interface pic_sum pic_sum provides a threaded alternative to the sum(array) Fortran intrinsic which will\nbe too slow for large sizes of vectors and matrices. Note that this provides the total\nsum. As opposed to the blas alternative XASUM which does the absolute sum pic_sum is implemented for (int32, int64, sp, dp) 1 and 2d arrays Usage: result = pic_sum(array, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to true Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism Calls interface~~pic_sum~~CallsGraph interface~pic_sum pic_sum proc~sum_matrix_dp sum_matrix_dp interface~pic_sum->proc~sum_matrix_dp proc~sum_matrix_int32 sum_matrix_int32 interface~pic_sum->proc~sum_matrix_int32 proc~sum_matrix_int64 sum_matrix_int64 interface~pic_sum->proc~sum_matrix_int64 proc~sum_matrix_sp sum_matrix_sp interface~pic_sum->proc~sum_matrix_sp proc~sum_vector_dp sum_vector_dp interface~pic_sum->proc~sum_vector_dp proc~sum_vector_int32 sum_vector_int32 interface~pic_sum->proc~sum_vector_int32 proc~sum_vector_int64 sum_vector_int64 interface~pic_sum->proc~sum_vector_int64 proc~sum_vector_sp sum_vector_sp interface~pic_sum->proc~sum_vector_sp interface~pic_optional pic_optional proc~sum_matrix_dp->interface~pic_optional proc~sum_matrix_int32->interface~pic_optional proc~sum_matrix_int64->interface~pic_optional proc~sum_matrix_sp->interface~pic_optional proc~sum_vector_dp->interface~pic_optional proc~sum_vector_int32->interface~pic_optional proc~sum_vector_int64->interface~pic_optional proc~sum_vector_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  function sum_vector_int32 (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) private  function sum_vector_int64 (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) private  function sum_vector_sp (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=sp) private  function sum_vector_dp (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=dp) private  function sum_matrix_int32 (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) private  function sum_matrix_int64 (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) private  function sum_matrix_sp (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=sp) private  function sum_matrix_dp (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=dp)","tags":"","url":"interface/pic_sum.html"},{"title":"pic_transpose – PIC","text":"public interface pic_transpose pic_transpose provides a blas-less, threaded alternative to the Fortran transpose intrinsic\nwhich will be slow for large matrix sizes. pic_transpose does not assume symmetric matrices pic_transpose is implemented for (int32, int64, sp, dp) 2d arrays Usage: call pic_transpose(matrix_to_transpose, result, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to true Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism Calls interface~~pic_transpose~~CallsGraph interface~pic_transpose pic_transpose proc~transpose_matrix_dp transpose_matrix_dp interface~pic_transpose->proc~transpose_matrix_dp proc~transpose_matrix_int32 transpose_matrix_int32 interface~pic_transpose->proc~transpose_matrix_int32 proc~transpose_matrix_int64 transpose_matrix_int64 interface~pic_transpose->proc~transpose_matrix_int64 proc~transpose_matrix_sp transpose_matrix_sp interface~pic_transpose->proc~transpose_matrix_sp interface~pic_optional pic_optional proc~transpose_matrix_dp->interface~pic_optional proc~transpose_matrix_int32->interface~pic_optional proc~transpose_matrix_int64->interface~pic_optional proc~transpose_matrix_sp->interface~pic_optional proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  subroutine transpose_matrix_int32 (A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: A (:,:) integer(kind=int32), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_int64 (A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: A (:,:) integer(kind=int64), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_sp (A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_dp (A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded","tags":"","url":"interface/pic_transpose.html"},{"title":"get_threading_mode – PIC","text":"private interface get_threading_mode get_threading_mode returns the current threading mode for the array routines\nUsage: mode = get_threading_mode() Module Procedures private  interface get_threading_mode () get_threading_mode returns the current threading mode for the array routines\nUsage: mode = get_threading_mode() Arguments None","tags":"","url":"interface/get_threading_mode.html"},{"title":"set_threading_mode – PIC","text":"private interface set_threading_mode set_threading sets the threading mode for the array routines\nthis will set the use_threaded variable to true or false depending on the input\nUsage: call set_threading_mode(.true.) or call set_threading_mode(.false.) Module Procedures private  interface set_threading_mode () set_threading sets the threading mode for the array routines\nthis will set the use_threaded variable to true or false depending on the input\nUsage: call set_threading_mode(.true.) or call set_threading_mode(.false.) Arguments None","tags":"","url":"interface/set_threading_mode.html"},{"title":"char_sort_index_default – PIC","text":"private module subroutine char_sort_index_default(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~char_sort_index_default~~CallsGraph proc~char_sort_index_default char_sort_index_default interface~pic_optional pic_optional proc~char_sort_index_default->interface~pic_optional none~merge_sort~5 merge_sort proc~char_sort_index_default->none~merge_sort~5 none~reverse_segment~5 reverse_segment proc~char_sort_index_default->none~reverse_segment~5 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~5->none~reverse_segment~5 none~calc_min_run~5 calc_min_run none~merge_sort~5->none~calc_min_run~5 none~collapse~5 collapse none~merge_sort~5->none~collapse~5 none~insert_head~5 insert_head none~merge_sort~5->none~insert_head~5 none~insertion_sort~15 insertion_sort none~merge_sort~5->none~insertion_sort~15 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int_index), private :: i integer(kind=int_index), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid character(len=len), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) character(len=len), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) Source Code module subroutine char_sort_index_default ( array , index , work , iwork , & reverse ) !! `char_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_sort_index_default","tags":"","url":"proc/char_sort_index_default.html"},{"title":"char_sort_index_low – PIC","text":"private module subroutine char_sort_index_low(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~char_sort_index_low~~CallsGraph proc~char_sort_index_low char_sort_index_low interface~pic_optional pic_optional proc~char_sort_index_low->interface~pic_optional none~merge_sort~10 merge_sort proc~char_sort_index_low->none~merge_sort~10 none~reverse_segment~10 reverse_segment proc~char_sort_index_low->none~reverse_segment~10 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~10->none~reverse_segment~10 none~calc_min_run~10 calc_min_run none~merge_sort~10->none~calc_min_run~10 none~collapse~10 collapse none~merge_sort~10->none~collapse~10 none~insert_head~10 insert_head none~merge_sort~10->none~insert_head~10 none~insertion_sort~20 insertion_sort none~merge_sort~10->none~insertion_sort~20 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int_index), private :: i integer(kind=int_index_low), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid character(len=len), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) character(len=len), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) Source Code module subroutine char_sort_index_low ( array , index , work , iwork , & reverse ) !! `char_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_sort_index_low","tags":"","url":"proc/char_sort_index_low.html"},{"title":"dp_sort_index_default – PIC","text":"private module subroutine dp_sort_index_default(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~dp_sort_index_default~~CallsGraph proc~dp_sort_index_default dp_sort_index_default interface~pic_optional pic_optional proc~dp_sort_index_default->interface~pic_optional none~merge_sort~4 merge_sort proc~dp_sort_index_default->none~merge_sort~4 none~reverse_segment~4 reverse_segment proc~dp_sort_index_default->none~reverse_segment~4 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~4->none~reverse_segment~4 none~calc_min_run~4 calc_min_run none~merge_sort~4->none~calc_min_run~4 none~collapse~4 collapse none~merge_sort~4->none~collapse~4 none~insert_head~4 insert_head none~merge_sort~4->none~insert_head~4 none~insertion_sort~14 insertion_sort none~merge_sort~4->none~insertion_sort~14 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=dp), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=dp), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) real(kind=dp), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) Source Code module subroutine dp_sort_index_default ( array , index , work , iwork , & reverse ) !! `dp_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_sort_index_default","tags":"","url":"proc/dp_sort_index_default.html"},{"title":"dp_sort_index_low – PIC","text":"private module subroutine dp_sort_index_low(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~dp_sort_index_low~~CallsGraph proc~dp_sort_index_low dp_sort_index_low interface~pic_optional pic_optional proc~dp_sort_index_low->interface~pic_optional none~merge_sort~9 merge_sort proc~dp_sort_index_low->none~merge_sort~9 none~reverse_segment~9 reverse_segment proc~dp_sort_index_low->none~reverse_segment~9 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~9->none~reverse_segment~9 none~calc_min_run~9 calc_min_run none~merge_sort~9->none~calc_min_run~9 none~collapse~9 collapse none~merge_sort~9->none~collapse~9 none~insert_head~9 insert_head none~merge_sort~9->none~insert_head~9 none~insertion_sort~19 insertion_sort none~merge_sort~9->none~insertion_sort~19 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=dp), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index_low), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=dp), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) real(kind=dp), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) Source Code module subroutine dp_sort_index_low ( array , index , work , iwork , & reverse ) !! `dp_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_sort_index_low","tags":"","url":"proc/dp_sort_index_low.html"},{"title":"int32_sort_index_default – PIC","text":"private module subroutine int32_sort_index_default(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~int32_sort_index_default~~CallsGraph proc~int32_sort_index_default int32_sort_index_default interface~pic_optional pic_optional proc~int32_sort_index_default->interface~pic_optional none~merge_sort merge_sort proc~int32_sort_index_default->none~merge_sort none~reverse_segment reverse_segment proc~int32_sort_index_default->none~reverse_segment proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort->none~reverse_segment none~calc_min_run calc_min_run none~merge_sort->none~calc_min_run none~collapse collapse none~merge_sort->none~collapse none~insert_head insert_head none~merge_sort->none~insert_head none~insertion_sort~11 insertion_sort none~merge_sort->none~insertion_sort~11 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int32), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int32), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int32), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) Source Code module subroutine int32_sort_index_default ( array , index , work , iwork , & reverse ) !! `int32_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_sort_index_default","tags":"","url":"proc/int32_sort_index_default.html"},{"title":"int32_sort_index_low – PIC","text":"private module subroutine int32_sort_index_low(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~int32_sort_index_low~~CallsGraph proc~int32_sort_index_low int32_sort_index_low interface~pic_optional pic_optional proc~int32_sort_index_low->interface~pic_optional none~merge_sort~6 merge_sort proc~int32_sort_index_low->none~merge_sort~6 none~reverse_segment~6 reverse_segment proc~int32_sort_index_low->none~reverse_segment~6 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~6->none~reverse_segment~6 none~calc_min_run~6 calc_min_run none~merge_sort~6->none~calc_min_run~6 none~collapse~6 collapse none~merge_sort~6->none~collapse~6 none~insert_head~6 insert_head none~merge_sort~6->none~insert_head~6 none~insertion_sort~16 insertion_sort none~merge_sort~6->none~insertion_sort~16 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int32), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index_low), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int32), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int32), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) Source Code module subroutine int32_sort_index_low ( array , index , work , iwork , & reverse ) !! `int32_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_sort_index_low","tags":"","url":"proc/int32_sort_index_low.html"},{"title":"int64_sort_index_default – PIC","text":"private module subroutine int64_sort_index_default(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~int64_sort_index_default~~CallsGraph proc~int64_sort_index_default int64_sort_index_default interface~pic_optional pic_optional proc~int64_sort_index_default->interface~pic_optional none~merge_sort~2 merge_sort proc~int64_sort_index_default->none~merge_sort~2 none~reverse_segment~2 reverse_segment proc~int64_sort_index_default->none~reverse_segment~2 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~2->none~reverse_segment~2 none~calc_min_run~2 calc_min_run none~merge_sort~2->none~calc_min_run~2 none~collapse~2 collapse none~merge_sort~2->none~collapse~2 none~insert_head~2 insert_head none~merge_sort~2->none~insert_head~2 none~insertion_sort~12 insertion_sort none~merge_sort~2->none~insertion_sort~12 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int64), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int64), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int64), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) Source Code module subroutine int64_sort_index_default ( array , index , work , iwork , & reverse ) !! `int64_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_sort_index_default","tags":"","url":"proc/int64_sort_index_default.html"},{"title":"int64_sort_index_low – PIC","text":"private module subroutine int64_sort_index_low(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~int64_sort_index_low~~CallsGraph proc~int64_sort_index_low int64_sort_index_low interface~pic_optional pic_optional proc~int64_sort_index_low->interface~pic_optional none~merge_sort~7 merge_sort proc~int64_sort_index_low->none~merge_sort~7 none~reverse_segment~7 reverse_segment proc~int64_sort_index_low->none~reverse_segment~7 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~7->none~reverse_segment~7 none~calc_min_run~7 calc_min_run none~merge_sort~7->none~calc_min_run~7 none~collapse~7 collapse none~merge_sort~7->none~collapse~7 none~insert_head~7 insert_head none~merge_sort~7->none~insert_head~7 none~insertion_sort~17 insertion_sort none~merge_sort~7->none~insertion_sort~17 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int64), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index_low), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int64), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int64), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) Source Code module subroutine int64_sort_index_low ( array , index , work , iwork , & reverse ) !! `int64_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_sort_index_low","tags":"","url":"proc/int64_sort_index_low.html"},{"title":"sp_sort_index_default – PIC","text":"private module subroutine sp_sort_index_default(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~sp_sort_index_default~~CallsGraph proc~sp_sort_index_default sp_sort_index_default interface~pic_optional pic_optional proc~sp_sort_index_default->interface~pic_optional none~merge_sort~3 merge_sort proc~sp_sort_index_default->none~merge_sort~3 none~reverse_segment~3 reverse_segment proc~sp_sort_index_default->none~reverse_segment~3 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~3->none~reverse_segment~3 none~calc_min_run~3 calc_min_run none~merge_sort~3->none~calc_min_run~3 none~collapse~3 collapse none~merge_sort~3->none~collapse~3 none~insert_head~3 insert_head none~merge_sort~3->none~insert_head~3 none~insertion_sort~13 insertion_sort none~merge_sort~3->none~insertion_sort~13 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=sp), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=sp), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: index (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) real(kind=sp), intent(inout) :: buf (0:) integer(kind=int_index), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(inout) :: index (0:) Source Code module subroutine sp_sort_index_default ( array , index , work , iwork , & reverse ) !! `sp_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_sort_index_default","tags":"","url":"proc/sp_sort_index_default.html"},{"title":"sp_sort_index_low – PIC","text":"private module subroutine sp_sort_index_low(array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Calls proc~~sp_sort_index_low~~CallsGraph proc~sp_sort_index_low sp_sort_index_low interface~pic_optional pic_optional proc~sp_sort_index_low->interface~pic_optional none~merge_sort~8 merge_sort proc~sp_sort_index_low->none~merge_sort~8 none~reverse_segment~8 reverse_segment proc~sp_sort_index_low->none~reverse_segment~8 proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~8->none~reverse_segment~8 none~calc_min_run~8 calc_min_run none~merge_sort~8->none~calc_min_run~8 none~collapse~8 collapse none~merge_sort~8->none~collapse~8 none~insert_head~8 insert_head none~merge_sort~8->none~insert_head~8 none~insertion_sort~18 insertion_sort none~merge_sort~8->none~insertion_sort~18 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=sp), private, allocatable :: buf (:) integer(kind=int_index), private :: i integer(kind=int_index_low), private, allocatable :: ibuf (:) integer(kind=int_index), private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine insertion_sort (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) pure subroutine merge (array, mid, buf, index, ibuf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=sp), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: index (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) subroutine merge_sort (array, index, buf, ibuf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) real(kind=sp), intent(inout) :: buf (0:) integer(kind=int_index_low), intent(inout) :: ibuf (0:) pure subroutine reverse_segment (array, index) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(inout) :: index (0:) Source Code module subroutine sp_sort_index_low ( array , index , work , iwork , & reverse ) !! `sp_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_sort_index_low","tags":"","url":"proc/sp_sort_index_low.html"},{"title":"sort_index – PIC","text":"public interface sort_index The generic subroutine interface implementing the SORT_INDEX algorithm,\nbased on the \"Rust\" sort algorithm found in slice.rs https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159\nbut modified to return an array of indices that would provide a stable\nsort of the rank one ARRAY input. The indices by default correspond to a\nnon-decreasing sort, but if the optional argument REVERSE is present\nwith a value of .TRUE. the indices correspond to a non-increasing sort. Subroutines private module subroutine char_sort_index_default(array, index, work, iwork, reverse) Implementation → char_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type character(len=*) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine char_sort_index_low(array, index, work, iwork, reverse) Implementation → char_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type character(len=*) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine dp_sort_index_default(array, index, work, iwork, reverse) Implementation → dp_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(dp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine dp_sort_index_low(array, index, work, iwork, reverse) Implementation → dp_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(dp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int32_sort_index_default(array, index, work, iwork, reverse) Implementation → int32_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int32) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int32_sort_index_low(array, index, work, iwork, reverse) Implementation → int32_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int32) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int64_sort_index_default(array, index, work, iwork, reverse) Implementation → int64_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int64) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int64_sort_index_low(array, index, work, iwork, reverse) Implementation → int64_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int64) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine sp_sort_index_default(array, index, work, iwork, reverse) Implementation → sp_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(sp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine sp_sort_index_low(array, index, work, iwork, reverse) Implementation → sp_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(sp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse","tags":"","url":"interface/sort_index.html"},{"title":"timer_get_elapsed_time – PIC","text":"private  function timer_get_elapsed_time(self) result(elapsed) Returns the elapsed time as a real(dp) variable Usage: var = my_timer%get_elapsed_time() Needs my_timer to be declared previously as type(pic_timer_type) :: my_timer Type Bound pic_timer_type Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(in) :: self Return Value real(kind=dp) Called by proc~~timer_get_elapsed_time~~CalledByGraph proc~timer_get_elapsed_time pic_timer_type%timer_get_elapsed_time proc~flop_rate_get_flop_rate flop_rate_type%flop_rate_get_flop_rate proc~flop_rate_get_flop_rate->proc~timer_get_elapsed_time proc~flop_rate_get_time flop_rate_type%flop_rate_get_time proc~flop_rate_get_time->proc~timer_get_elapsed_time proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->proc~timer_get_elapsed_time proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->proc~flop_rate_get_flop_rate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: current_count Source Code function timer_get_elapsed_time ( self ) result ( elapsed ) !! Returns the elapsed time as a real(dp) variable !! !! Usage: var = my_timer%get_elapsed_time() !! !! Needs my_timer to be declared previously as type(pic_timer_type) :: my_timer !! class ( pic_timer_type ), intent ( in ) :: self real ( dp ) :: elapsed integer ( default_int ) :: current_count elapsed = 0.0_dp #ifdef _OPENMP if ( self % is_running ) then elapsed = omp_get_wtime () - self % start_time else elapsed = self % stop_time - self % start_time end if #else if ( self % is_running ) then call system_clock ( count = current_count ) elapsed = real ( current_count - self % start_count , dp ) / real ( self % count_rate , dp ) else elapsed = real ( self % stop_count - self % start_count , dp ) / real ( self % count_rate , dp ) end if #endif end function timer_get_elapsed_time","tags":"","url":"proc/timer_get_elapsed_time.html"},{"title":"timer_print_time – PIC","text":"private  subroutine timer_print_time(self) Prints the elapsed time at the time of calling Usage: call my_timer%print_time() Needs my_timer to be declared previously as type(pic_timer_type) :: my_timer This function does not stop the timer, it will get the current time elapsed stopped or not Type Bound pic_timer_type Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(in) :: self Calls proc~~timer_print_time~~CallsGraph proc~timer_print_time pic_timer_type%timer_print_time interface~to_string to_string proc~timer_print_time->interface~to_string proc~timer_get_elapsed_time pic_timer_type%timer_get_elapsed_time proc~timer_print_time->proc~timer_get_elapsed_time proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial real(kind=dp), private :: elapsed Source Code subroutine timer_print_time ( self ) !! Prints the elapsed time at the time of calling !! !! Usage: call my_timer%print_time() !! !! Needs my_timer to be declared previously as type(pic_timer_type) :: my_timer !! !! This function does not stop the timer, it will get the current time elapsed stopped or not class ( pic_timer_type ), intent ( in ) :: self real ( dp ) :: elapsed elapsed = self % get_elapsed_time () if ( self % is_running ) then print * , \"Currently elapsed time: \" // to_string ( elapsed ) // \" seconds\" else print * , \"Elapsed time: \" // to_string ( elapsed ) // \" seconds\" end if end subroutine timer_print_time","tags":"","url":"proc/timer_print_time.html"},{"title":"timer_start – PIC","text":"private  subroutine timer_start(self) starts the timer. If OMP is enabled, it will use omp_get_wtime()\nif not, it will use Fortran’s system_clock Usage: call my_timer%start() Usage assumes a declaration of type(pic_timer_type) :: my_timer Type Bound pic_timer_type Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(inout) :: self Called by proc~~timer_start~~CalledByGraph proc~timer_start pic_timer_type%timer_start proc~flop_rate_start_time flop_rate_type%flop_rate_start_time proc~flop_rate_start_time->proc~timer_start Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine timer_start ( self ) !! starts the timer. If OMP is enabled, it will use omp_get_wtime() !! if not, it will use Fortran's system_clock !! !! Usage: call my_timer%start() !! !! Usage assumes a declaration of type(pic_timer_type) :: my_timer class ( pic_timer_type ), intent ( inout ) :: self self % is_running = . true . #ifdef _OPENMP self % start_time = omp_get_wtime () #else call system_clock ( self % start_count , self % count_rate ) #endif end subroutine timer_start","tags":"","url":"proc/timer_start.html"},{"title":"timer_stop – PIC","text":"private  subroutine timer_stop(self) stop the timer. If OMP is enabled, it will use omp_get_wtime()\nif not, it will use Fortran’s system_clock Usage: call my_timer%stop() Usage assumes a declaration of type(pic_timer_type) :: my_timer\nwill fail if a timer has not been started! Type Bound pic_timer_type Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(inout) :: self Source Code subroutine timer_stop ( self ) !! stop the timer. If OMP is enabled, it will use omp_get_wtime() !! if not, it will use Fortran's system_clock !! !! Usage: call my_timer%stop() !! !! Usage assumes a declaration of type(pic_timer_type) :: my_timer !! will fail if a timer has not been started! class ( pic_timer_type ), intent ( inout ) :: self if (. not . self % is_running ) then error stop \"Cannot stop a timer that has not been started!\" end if #ifdef _OPENMP self % stop_time = omp_get_wtime () #else call system_clock ( self % stop_count ) #endif ! if someone stops the timer, we stop ! self % is_running = . false . end subroutine timer_stop","tags":"","url":"proc/timer_stop.html"},{"title":"char_decrease_ord_sort – PIC","text":"private  subroutine char_decrease_ord_sort(array, work) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) Calls proc~~char_decrease_ord_sort~~CallsGraph proc~char_decrease_ord_sort char_decrease_ord_sort none~merge_sort~20 merge_sort proc~char_decrease_ord_sort->none~merge_sort~20 none~calc_min_run~20 calc_min_run none~merge_sort~20->none~calc_min_run~20 none~collapse~20 collapse none~merge_sort~20->none~collapse~20 none~insert_head~20 insert_head none~merge_sort~20->none~insert_head~20 none~insertion_sort~30 insertion_sort none~merge_sort~20->none~insertion_sort~30 none~reverse_segment~20 reverse_segment none~merge_sort~20->none~reverse_segment~20 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~char_decrease_ord_sort~~CalledByGraph proc~char_decrease_ord_sort char_decrease_ord_sort proc~char_ord_sort char_ord_sort proc~char_ord_sort->proc~char_decrease_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid character(len=len), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) Source Code subroutine char_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"char_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else block character ( len = :), allocatable :: buf (:) ! Allocate a buffer to use as scratch memory. allocate ( character ( len = len ( array )) :: buf ( 0 : array_size / 2 - 1 ), & stat = stat ) if ( stat /= 0 ) error stop \"char_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end block end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi character ( len = len ( array )) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine char_decrease_ord_sort","tags":"","url":"proc/char_decrease_ord_sort.html"},{"title":"char_increase_ord_sort – PIC","text":"private  subroutine char_increase_ord_sort(array, work) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) Calls proc~~char_increase_ord_sort~~CallsGraph proc~char_increase_ord_sort char_increase_ord_sort none~merge_sort~15 merge_sort proc~char_increase_ord_sort->none~merge_sort~15 none~calc_min_run~15 calc_min_run none~merge_sort~15->none~calc_min_run~15 none~collapse~15 collapse none~merge_sort~15->none~collapse~15 none~insert_head~15 insert_head none~merge_sort~15->none~insert_head~15 none~insertion_sort~25 insertion_sort none~merge_sort~15->none~insertion_sort~25 none~reverse_segment~15 reverse_segment none~merge_sort~15->none~reverse_segment~15 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~char_increase_ord_sort~~CalledByGraph proc~char_increase_ord_sort char_increase_ord_sort proc~char_ord_sort char_ord_sort proc~char_ord_sort->proc~char_increase_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid character(len=len), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) Source Code subroutine char_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"char_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else block character ( len = :), allocatable :: buf (:) ! Allocate a buffer to use as scratch memory. allocate ( character ( len = len ( array )) :: buf ( 0 : array_size / 2 - 1 ), & stat = stat ) if ( stat /= 0 ) error stop \"char_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end block end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi character ( len = len ( array )) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine char_increase_ord_sort","tags":"","url":"proc/char_increase_ord_sort.html"},{"title":"char_ord_sort – PIC","text":"private module subroutine char_ord_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse Calls proc~~char_ord_sort~~CallsGraph proc~char_ord_sort char_ord_sort interface~pic_optional pic_optional proc~char_ord_sort->interface~pic_optional proc~char_decrease_ord_sort char_decrease_ord_sort proc~char_ord_sort->proc~char_decrease_ord_sort proc~char_increase_ord_sort char_increase_ord_sort proc~char_ord_sort->proc~char_increase_ord_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~20 merge_sort proc~char_decrease_ord_sort->none~merge_sort~20 none~merge_sort~15 merge_sort proc~char_increase_ord_sort->none~merge_sort~15 none~calc_min_run~15 calc_min_run none~merge_sort~15->none~calc_min_run~15 none~collapse~15 collapse none~merge_sort~15->none~collapse~15 none~insert_head~15 insert_head none~merge_sort~15->none~insert_head~15 none~insertion_sort~25 insertion_sort none~merge_sort~15->none~insertion_sort~25 none~reverse_segment~15 reverse_segment none~merge_sort~15->none~reverse_segment~15 none~calc_min_run~20 calc_min_run none~merge_sort~20->none~calc_min_run~20 none~collapse~20 collapse none~merge_sort~20->none~collapse~20 none~insert_head~20 insert_head none~merge_sort~20->none~insert_head~20 none~insertion_sort~30 insertion_sort none~merge_sort~20->none~insertion_sort~30 none~reverse_segment~20 reverse_segment none~merge_sort~20->none~reverse_segment~20 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module subroutine char_ord_sort ( array , work , reverse ) implicit none !! `char_ord_sort( array )` sorts the input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_ord_sort","tags":"","url":"proc/char_ord_sort.html"},{"title":"dp_decrease_ord_sort – PIC","text":"private  subroutine dp_decrease_ord_sort(array, work) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) Calls proc~~dp_decrease_ord_sort~~CallsGraph proc~dp_decrease_ord_sort dp_decrease_ord_sort none~merge_sort~19 merge_sort proc~dp_decrease_ord_sort->none~merge_sort~19 none~calc_min_run~19 calc_min_run none~merge_sort~19->none~calc_min_run~19 none~collapse~19 collapse none~merge_sort~19->none~collapse~19 none~insert_head~19 insert_head none~merge_sort~19->none~insert_head~19 none~insertion_sort~29 insertion_sort none~merge_sort~19->none~insertion_sort~29 none~reverse_segment~19 reverse_segment none~merge_sort~19->none~reverse_segment~19 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~dp_decrease_ord_sort~~CalledByGraph proc~dp_decrease_ord_sort dp_decrease_ord_sort proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->proc~dp_decrease_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=dp), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=dp), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) Source Code subroutine dp_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) real ( dp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"dp_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"dp_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( dp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine dp_decrease_ord_sort","tags":"","url":"proc/dp_decrease_ord_sort.html"},{"title":"dp_increase_ord_sort – PIC","text":"private  subroutine dp_increase_ord_sort(array, work) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) Calls proc~~dp_increase_ord_sort~~CallsGraph proc~dp_increase_ord_sort dp_increase_ord_sort none~merge_sort~14 merge_sort proc~dp_increase_ord_sort->none~merge_sort~14 none~calc_min_run~14 calc_min_run none~merge_sort~14->none~calc_min_run~14 none~collapse~14 collapse none~merge_sort~14->none~collapse~14 none~insert_head~14 insert_head none~merge_sort~14->none~insert_head~14 none~insertion_sort~24 insertion_sort none~merge_sort~14->none~insertion_sort~24 none~reverse_segment~14 reverse_segment none~merge_sort~14->none~reverse_segment~14 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~dp_increase_ord_sort~~CalledByGraph proc~dp_increase_ord_sort dp_increase_ord_sort proc~dp_ord_sort dp_ord_sort proc~dp_ord_sort->proc~dp_increase_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=dp), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=dp), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) Source Code subroutine dp_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) real ( dp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"dp_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"dp_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( dp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine dp_increase_ord_sort","tags":"","url":"proc/dp_increase_ord_sort.html"},{"title":"dp_ord_sort – PIC","text":"private module subroutine dp_ord_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse Calls proc~~dp_ord_sort~~CallsGraph proc~dp_ord_sort dp_ord_sort interface~pic_optional pic_optional proc~dp_ord_sort->interface~pic_optional proc~dp_decrease_ord_sort dp_decrease_ord_sort proc~dp_ord_sort->proc~dp_decrease_ord_sort proc~dp_increase_ord_sort dp_increase_ord_sort proc~dp_ord_sort->proc~dp_increase_ord_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~19 merge_sort proc~dp_decrease_ord_sort->none~merge_sort~19 none~merge_sort~14 merge_sort proc~dp_increase_ord_sort->none~merge_sort~14 none~calc_min_run~14 calc_min_run none~merge_sort~14->none~calc_min_run~14 none~collapse~14 collapse none~merge_sort~14->none~collapse~14 none~insert_head~14 insert_head none~merge_sort~14->none~insert_head~14 none~insertion_sort~24 insertion_sort none~merge_sort~14->none~insertion_sort~24 none~reverse_segment~14 reverse_segment none~merge_sort~14->none~reverse_segment~14 none~calc_min_run~19 calc_min_run none~merge_sort~19->none~calc_min_run~19 none~collapse~19 collapse none~merge_sort~19->none~collapse~19 none~insert_head~19 insert_head none~merge_sort~19->none~insert_head~19 none~insertion_sort~29 insertion_sort none~merge_sort~19->none~insertion_sort~29 none~reverse_segment~19 reverse_segment none~merge_sort~19->none~reverse_segment~19 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module subroutine dp_ord_sort ( array , work , reverse ) implicit none !! `dp_ord_sort( array )` sorts the input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_ord_sort","tags":"","url":"proc/dp_ord_sort.html"},{"title":"int32_decrease_ord_sort – PIC","text":"private  subroutine int32_decrease_ord_sort(array, work) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) Calls proc~~int32_decrease_ord_sort~~CallsGraph proc~int32_decrease_ord_sort int32_decrease_ord_sort none~merge_sort~16 merge_sort proc~int32_decrease_ord_sort->none~merge_sort~16 none~calc_min_run~16 calc_min_run none~merge_sort~16->none~calc_min_run~16 none~collapse~16 collapse none~merge_sort~16->none~collapse~16 none~insert_head~16 insert_head none~merge_sort~16->none~insert_head~16 none~insertion_sort~26 insertion_sort none~merge_sort~16->none~insertion_sort~26 none~reverse_segment~16 reverse_segment none~merge_sort~16->none~reverse_segment~16 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int32_decrease_ord_sort~~CalledByGraph proc~int32_decrease_ord_sort int32_decrease_ord_sort proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->proc~int32_decrease_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int32), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int32), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) Source Code subroutine int32_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int32 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int32_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int32_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int32 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int32_decrease_ord_sort","tags":"","url":"proc/int32_decrease_ord_sort.html"},{"title":"int32_increase_ord_sort – PIC","text":"private  subroutine int32_increase_ord_sort(array, work) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) Calls proc~~int32_increase_ord_sort~~CallsGraph proc~int32_increase_ord_sort int32_increase_ord_sort none~merge_sort~11 merge_sort proc~int32_increase_ord_sort->none~merge_sort~11 none~calc_min_run~11 calc_min_run none~merge_sort~11->none~calc_min_run~11 none~collapse~11 collapse none~merge_sort~11->none~collapse~11 none~insert_head~11 insert_head none~merge_sort~11->none~insert_head~11 none~insertion_sort~21 insertion_sort none~merge_sort~11->none~insertion_sort~21 none~reverse_segment~11 reverse_segment none~merge_sort~11->none~reverse_segment~11 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int32_increase_ord_sort~~CalledByGraph proc~int32_increase_ord_sort int32_increase_ord_sort proc~int32_ord_sort int32_ord_sort proc~int32_ord_sort->proc~int32_increase_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int32), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int32), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) Source Code subroutine int32_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int32 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int32_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int32_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int32 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int32_increase_ord_sort","tags":"","url":"proc/int32_increase_ord_sort.html"},{"title":"int32_ord_sort – PIC","text":"private module subroutine int32_ord_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse Calls proc~~int32_ord_sort~~CallsGraph proc~int32_ord_sort int32_ord_sort interface~pic_optional pic_optional proc~int32_ord_sort->interface~pic_optional proc~int32_decrease_ord_sort int32_decrease_ord_sort proc~int32_ord_sort->proc~int32_decrease_ord_sort proc~int32_increase_ord_sort int32_increase_ord_sort proc~int32_ord_sort->proc~int32_increase_ord_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~16 merge_sort proc~int32_decrease_ord_sort->none~merge_sort~16 none~merge_sort~11 merge_sort proc~int32_increase_ord_sort->none~merge_sort~11 none~calc_min_run~11 calc_min_run none~merge_sort~11->none~calc_min_run~11 none~collapse~11 collapse none~merge_sort~11->none~collapse~11 none~insert_head~11 insert_head none~merge_sort~11->none~insert_head~11 none~insertion_sort~21 insertion_sort none~merge_sort~11->none~insertion_sort~21 none~reverse_segment~11 reverse_segment none~merge_sort~11->none~reverse_segment~11 none~calc_min_run~16 calc_min_run none~merge_sort~16->none~calc_min_run~16 none~collapse~16 collapse none~merge_sort~16->none~collapse~16 none~insert_head~16 insert_head none~merge_sort~16->none~insert_head~16 none~insertion_sort~26 insertion_sort none~merge_sort~16->none~insertion_sort~26 none~reverse_segment~16 reverse_segment none~merge_sort~16->none~reverse_segment~16 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module subroutine int32_ord_sort ( array , work , reverse ) implicit none !! `int32_ord_sort( array )` sorts the input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_ord_sort","tags":"","url":"proc/int32_ord_sort.html"},{"title":"int64_decrease_ord_sort – PIC","text":"private  subroutine int64_decrease_ord_sort(array, work) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) Calls proc~~int64_decrease_ord_sort~~CallsGraph proc~int64_decrease_ord_sort int64_decrease_ord_sort none~merge_sort~17 merge_sort proc~int64_decrease_ord_sort->none~merge_sort~17 none~calc_min_run~17 calc_min_run none~merge_sort~17->none~calc_min_run~17 none~collapse~17 collapse none~merge_sort~17->none~collapse~17 none~insert_head~17 insert_head none~merge_sort~17->none~insert_head~17 none~insertion_sort~27 insertion_sort none~merge_sort~17->none~insertion_sort~27 none~reverse_segment~17 reverse_segment none~merge_sort~17->none~reverse_segment~17 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int64_decrease_ord_sort~~CalledByGraph proc~int64_decrease_ord_sort int64_decrease_ord_sort proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->proc~int64_decrease_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int64), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int64), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) Source Code subroutine int64_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int64 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int64_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int64_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int64 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int64_decrease_ord_sort","tags":"","url":"proc/int64_decrease_ord_sort.html"},{"title":"int64_increase_ord_sort – PIC","text":"private  subroutine int64_increase_ord_sort(array, work) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) Calls proc~~int64_increase_ord_sort~~CallsGraph proc~int64_increase_ord_sort int64_increase_ord_sort none~merge_sort~12 merge_sort proc~int64_increase_ord_sort->none~merge_sort~12 none~calc_min_run~12 calc_min_run none~merge_sort~12->none~calc_min_run~12 none~collapse~12 collapse none~merge_sort~12->none~collapse~12 none~insert_head~12 insert_head none~merge_sort~12->none~insert_head~12 none~insertion_sort~22 insertion_sort none~merge_sort~12->none~insertion_sort~22 none~reverse_segment~12 reverse_segment none~merge_sort~12->none~reverse_segment~12 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~int64_increase_ord_sort~~CalledByGraph proc~int64_increase_ord_sort int64_increase_ord_sort proc~int64_ord_sort int64_ord_sort proc~int64_ord_sort->proc~int64_increase_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size integer(kind=int64), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid integer(kind=int64), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) Source Code subroutine int64_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int64 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int64_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int64_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int64 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int64_increase_ord_sort","tags":"","url":"proc/int64_increase_ord_sort.html"},{"title":"int64_ord_sort – PIC","text":"private module subroutine int64_ord_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse Calls proc~~int64_ord_sort~~CallsGraph proc~int64_ord_sort int64_ord_sort interface~pic_optional pic_optional proc~int64_ord_sort->interface~pic_optional proc~int64_decrease_ord_sort int64_decrease_ord_sort proc~int64_ord_sort->proc~int64_decrease_ord_sort proc~int64_increase_ord_sort int64_increase_ord_sort proc~int64_ord_sort->proc~int64_increase_ord_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~17 merge_sort proc~int64_decrease_ord_sort->none~merge_sort~17 none~merge_sort~12 merge_sort proc~int64_increase_ord_sort->none~merge_sort~12 none~calc_min_run~12 calc_min_run none~merge_sort~12->none~calc_min_run~12 none~collapse~12 collapse none~merge_sort~12->none~collapse~12 none~insert_head~12 insert_head none~merge_sort~12->none~insert_head~12 none~insertion_sort~22 insertion_sort none~merge_sort~12->none~insertion_sort~22 none~reverse_segment~12 reverse_segment none~merge_sort~12->none~reverse_segment~12 none~calc_min_run~17 calc_min_run none~merge_sort~17->none~calc_min_run~17 none~collapse~17 collapse none~merge_sort~17->none~collapse~17 none~insert_head~17 insert_head none~merge_sort~17->none~insert_head~17 none~insertion_sort~27 insertion_sort none~merge_sort~17->none~insertion_sort~27 none~reverse_segment~17 reverse_segment none~merge_sort~17->none~reverse_segment~17 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module subroutine int64_ord_sort ( array , work , reverse ) implicit none !! `int64_ord_sort( array )` sorts the input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_ord_sort","tags":"","url":"proc/int64_ord_sort.html"},{"title":"sp_decrease_ord_sort – PIC","text":"private  subroutine sp_decrease_ord_sort(array, work) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) Calls proc~~sp_decrease_ord_sort~~CallsGraph proc~sp_decrease_ord_sort sp_decrease_ord_sort none~merge_sort~18 merge_sort proc~sp_decrease_ord_sort->none~merge_sort~18 none~calc_min_run~18 calc_min_run none~merge_sort~18->none~calc_min_run~18 none~collapse~18 collapse none~merge_sort~18->none~collapse~18 none~insert_head~18 insert_head none~merge_sort~18->none~insert_head~18 none~insertion_sort~28 insertion_sort none~merge_sort~18->none~insertion_sort~28 none~reverse_segment~18 reverse_segment none~merge_sort~18->none~reverse_segment~18 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sp_decrease_ord_sort~~CalledByGraph proc~sp_decrease_ord_sort sp_decrease_ord_sort proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->proc~sp_decrease_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=sp), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=sp), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) Source Code subroutine sp_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) real ( sp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"sp_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"sp_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( sp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine sp_decrease_ord_sort","tags":"","url":"proc/sp_decrease_ord_sort.html"},{"title":"sp_increase_ord_sort – PIC","text":"private  subroutine sp_increase_ord_sort(array, work) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) Calls proc~~sp_increase_ord_sort~~CallsGraph proc~sp_increase_ord_sort sp_increase_ord_sort none~merge_sort~13 merge_sort proc~sp_increase_ord_sort->none~merge_sort~13 none~calc_min_run~13 calc_min_run none~merge_sort~13->none~calc_min_run~13 none~collapse~13 collapse none~merge_sort~13->none~collapse~13 none~insert_head~13 insert_head none~merge_sort~13->none~insert_head~13 none~insertion_sort~23 insertion_sort none~merge_sort~13->none~insertion_sort~23 none~reverse_segment~13 reverse_segment none~merge_sort~13->none~reverse_segment~13 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~sp_increase_ord_sort~~CalledByGraph proc~sp_increase_ord_sort sp_increase_ord_sort proc~sp_ord_sort sp_ord_sort proc~sp_ord_sort->proc~sp_increase_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int_index), private :: array_size real(kind=sp), private, allocatable :: buf (:) integer, private :: stat Functions pure function calc_min_run (n) result(min_run) Returns the minimum length of a run from 32-63 so that N/MIN_RUN is\nless than or equal to a power of two. See\nhttps://svn.python.org/projects/python/trunk/Objects/listsort.txt Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: n Return Value integer(kind=int_index) pure function collapse (runs) result(r) Arguments Type Intent Optional Attributes Name type( run_type ), intent(in), target :: runs (0:) Return Value integer(kind=int_index) Subroutines pure subroutine insert_head (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure subroutine insertion_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) pure subroutine merge (array, mid, buf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(in) :: mid real(kind=sp), intent(inout) :: buf (0:) subroutine merge_sort (array, buf) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(inout) :: buf (0:) pure subroutine reverse_segment (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) Source Code subroutine sp_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) real ( sp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"sp_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"sp_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( sp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine sp_increase_ord_sort","tags":"","url":"proc/sp_increase_ord_sort.html"},{"title":"sp_ord_sort – PIC","text":"private module subroutine sp_ord_sort(array, work, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse Calls proc~~sp_ord_sort~~CallsGraph proc~sp_ord_sort sp_ord_sort interface~pic_optional pic_optional proc~sp_ord_sort->interface~pic_optional proc~sp_decrease_ord_sort sp_decrease_ord_sort proc~sp_ord_sort->proc~sp_decrease_ord_sort proc~sp_increase_ord_sort sp_increase_ord_sort proc~sp_ord_sort->proc~sp_increase_ord_sort proc~optional_char optional_char interface~pic_optional->proc~optional_char proc~optional_dp optional_dp interface~pic_optional->proc~optional_dp proc~optional_int32 optional_int32 interface~pic_optional->proc~optional_int32 proc~optional_int64 optional_int64 interface~pic_optional->proc~optional_int64 proc~optional_logical optional_logical interface~pic_optional->proc~optional_logical proc~optional_sp optional_sp interface~pic_optional->proc~optional_sp none~merge_sort~18 merge_sort proc~sp_decrease_ord_sort->none~merge_sort~18 none~merge_sort~13 merge_sort proc~sp_increase_ord_sort->none~merge_sort~13 none~calc_min_run~13 calc_min_run none~merge_sort~13->none~calc_min_run~13 none~collapse~13 collapse none~merge_sort~13->none~collapse~13 none~insert_head~13 insert_head none~merge_sort~13->none~insert_head~13 none~insertion_sort~23 insertion_sort none~merge_sort~13->none~insertion_sort~23 none~reverse_segment~13 reverse_segment none~merge_sort~13->none~reverse_segment~13 none~calc_min_run~18 calc_min_run none~merge_sort~18->none~calc_min_run~18 none~collapse~18 collapse none~merge_sort~18->none~collapse~18 none~insert_head~18 insert_head none~merge_sort~18->none~insert_head~18 none~insertion_sort~28 insertion_sort none~merge_sort~18->none~insertion_sort~28 none~reverse_segment~18 reverse_segment none~merge_sort~18->none~reverse_segment~18 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module subroutine sp_ord_sort ( array , work , reverse ) implicit none !! `sp_ord_sort( array )` sorts the input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_ord_sort","tags":"","url":"proc/sp_ord_sort.html"},{"title":"ord_sort – PIC","text":"public interface ord_sort The generic subroutine interface implementing the ORD_SORT algorithm,\na translation to Fortran 2008, of the \"Rust\" sort algorithm found in slice.rs https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ORD_SORT is a hybrid stable comparison algorithm combining merge sort ,\nand insertion sort . It is always at worst O(N Ln(N)) in sorting random\ndata, having a performance about 25% slower than SORT on such\ndata, but has much better performance than SORT on partially\nsorted data, having O(N) performance on uniformly non-increasing or\nnon-decreasing data. Subroutines private module subroutine char_ord_sort(array, work, reverse) Implementation → char_ord_sort( array ) sorts the input ARRAY of type character(len=*) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine dp_ord_sort(array, work, reverse) Implementation → dp_ord_sort( array ) sorts the input ARRAY of type real(dp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine int32_ord_sort(array, work, reverse) Implementation → int32_ord_sort( array ) sorts the input ARRAY of type integer(int32) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine int64_ord_sort(array, work, reverse) Implementation → int64_ord_sort( array ) sorts the input ARRAY of type integer(int64) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine sp_ord_sort(array, work, reverse) Implementation → sp_ord_sort( array ) sorts the input ARRAY of type real(sp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse","tags":"","url":"interface/ord_sort.html"},{"title":"get_precision – PIC","text":"public  function get_precision() result(precision) Get the current precision for real numbers Arguments None Return Value integer(kind=default_int) Source Code function get_precision () result ( precision ) !! Get the current precision for real numbers integer ( default_int ) :: precision precision = dp_precision end function get_precision","tags":"","url":"proc/get_precision.html"},{"title":"pad – PIC","text":"public  function pad(s, width) result(padded) function to pad a string with a certain number of characters for nice printing Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: s integer(kind=default_int), intent(in) :: width Return Value character(len=:), allocatable Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: len_s Source Code function pad ( s , width ) result ( padded ) !! function to pad a string with a certain number of characters for nice printing character ( len =* ), intent ( in ) :: s integer ( default_int ), intent ( in ) :: width character ( len = :), allocatable :: padded integer ( default_int ) :: len_s len_s = len_trim ( s ) if ( len_s >= width ) then padded = s ( 1 : width ) else padded = repeat ( \" \" , width - len_s ) // s end if end function pad","tags":"","url":"proc/pad.html"},{"title":"to_upper – PIC","text":"public  function to_upper(str) result(upper_str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len) Variables Type Visibility Attributes Name Initial character(len=1), private :: ch integer(kind=default_int), private :: i Source Code function to_upper ( str ) result ( upper_str ) character ( len =* ), intent ( in ) :: str character ( len = len ( str )) :: upper_str integer ( default_int ) :: i character :: ch do i = 1 , len ( str ) ch = str ( i : i ) if ( ch >= 'a' . and . ch <= 'z' ) then upper_str ( i : i ) = char ( iachar ( ch ) - 32 ) else upper_str ( i : i ) = ch end if end do end function to_upper","tags":"","url":"proc/to_upper.html"},{"title":"to_string_char – PIC","text":"private  function to_string_char(c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable Called by proc~~to_string_char~~CalledByGraph proc~to_string_char to_string_char interface~to_string to_string interface~to_string->proc~to_string_char proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=500), private :: str Source Code function to_string_char ( c ) result ( trimmed_str ) !! transform a character to a string character ( len =* ), intent ( in ) :: c character ( len = 500 ) :: str character ( len = :), allocatable :: trimmed_str str = c trimmed_str = trim ( str ) end function to_string_char","tags":"","url":"proc/to_string_char.html"},{"title":"to_string_dp – PIC","text":"private  function to_string_dp(r) result(trimmed_str) transform a real(dp) to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable Called by proc~~to_string_dp~~CalledByGraph proc~to_string_dp to_string_dp interface~to_string to_string interface~to_string->proc~to_string_dp proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=50), private :: str character(len=32), private :: style Source Code function to_string_dp ( r ) result ( trimmed_str ) !! transform a real(dp) to a string real ( kind = dp ), intent ( in ) :: r character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str character ( len = 32 ) :: style !call write_with_precision(r, str) write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' write ( str , style ) r trimmed_str = trim ( str ) end function to_string_dp","tags":"","url":"proc/to_string_dp.html"},{"title":"to_string_int32 – PIC","text":"private  function to_string_int32(i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable Called by proc~~to_string_int32~~CalledByGraph proc~to_string_int32 to_string_int32 interface~to_string to_string interface~to_string->proc~to_string_int32 proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=50), private :: str Source Code function to_string_int32 ( i ) result ( trimmed_str ) !! transform an int32 to a string integer ( kind = int32 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , \"(I0)\" ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int32","tags":"","url":"proc/to_string_int32.html"},{"title":"to_string_int64 – PIC","text":"private  function to_string_int64(i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable Called by proc~~to_string_int64~~CalledByGraph proc~to_string_int64 to_string_int64 interface~to_string to_string interface~to_string->proc~to_string_int64 proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=50), private :: str Source Code function to_string_int64 ( i ) result ( trimmed_str ) !! transform an int64 to a string integer ( kind = int64 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , \"(I0)\" ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int64","tags":"","url":"proc/to_string_int64.html"},{"title":"to_string_logical – PIC","text":"private  function to_string_logical(l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable Called by proc~~to_string_logical~~CalledByGraph proc~to_string_logical to_string_logical interface~to_string to_string interface~to_string->proc~to_string_logical proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=5), private :: str Source Code function to_string_logical ( l ) result ( trimmed_str ) !! tranform a logical to a string either true or false logical , intent ( in ) :: l character ( len = 5 ) :: str character ( len = :), allocatable :: trimmed_str if ( l ) then str = \"TRUE\" else str = \"FALSE\" end if trimmed_str = trim ( str ) end function to_string_logical","tags":"","url":"proc/to_string_logical.html"},{"title":"to_string_matrix_dp – PIC","text":"private  function to_string_matrix_dp(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:,:) Return Value character(len=:), allocatable Called by proc~~to_string_matrix_dp~~CalledByGraph proc~to_string_matrix_dp to_string_matrix_dp interface~to_string to_string interface~to_string->proc~to_string_matrix_dp proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i integer, private :: j integer, private :: ncols integer, private :: nrows character(len=32), private :: style character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_matrix_dp ( array ) result ( trimmed_str ) real ( kind = dp ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' ! Estimate total length needed (rough estimate) total_len = 10 + nrows ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , style ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string with newlines trimmed_str = \"[\" // new_line ( 'a' ) do i = 1 , nrows trimmed_str = trimmed_str // \" [\" do j = 1 , ncols write ( temp_str , style ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do if ( i < nrows ) then trimmed_str = trimmed_str // \"],\" // new_line ( 'a' ) else trimmed_str = trimmed_str // \"]\" // new_line ( 'a' ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_dp","tags":"","url":"proc/to_string_matrix_dp.html"},{"title":"to_string_matrix_int32 – PIC","text":"private  function to_string_matrix_int32(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:,:) Return Value character(len=:), allocatable Called by proc~~to_string_matrix_int32~~CalledByGraph proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string to_string interface~to_string->proc~to_string_matrix_int32 proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i integer, private :: j integer, private :: ncols integer, private :: nrows character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_matrix_int32 ( array ) result ( trimmed_str ) integer ( int32 ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Estimate total length needed total_len = 10 ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , nrows if ( i > 1 ) trimmed_str = trimmed_str // \", \" trimmed_str = trimmed_str // \"[\" do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_int32","tags":"","url":"proc/to_string_matrix_int32.html"},{"title":"to_string_matrix_int64 – PIC","text":"private  function to_string_matrix_int64(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:,:) Return Value character(len=:), allocatable Called by proc~~to_string_matrix_int64~~CalledByGraph proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string to_string interface~to_string->proc~to_string_matrix_int64 proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i integer, private :: j integer, private :: ncols integer, private :: nrows character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_matrix_int64 ( array ) result ( trimmed_str ) integer ( int64 ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Estimate total length needed total_len = 10 + nrows ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string with newlines trimmed_str = \"[\" // new_line ( 'a' ) do i = 1 , nrows trimmed_str = trimmed_str // \" [\" do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do if ( i < nrows ) then trimmed_str = trimmed_str // \"],\" // new_line ( 'a' ) else trimmed_str = trimmed_str // \"]\" // new_line ( 'a' ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_int64","tags":"","url":"proc/to_string_matrix_int64.html"},{"title":"to_string_matrix_sp – PIC","text":"private  function to_string_matrix_sp(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:,:) Return Value character(len=:), allocatable Called by proc~~to_string_matrix_sp~~CalledByGraph proc~to_string_matrix_sp to_string_matrix_sp interface~to_string to_string interface~to_string->proc~to_string_matrix_sp proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i integer, private :: j integer, private :: ncols integer, private :: nrows character(len=32), private :: style character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_matrix_sp ( array ) result ( trimmed_str ) real ( kind = sp ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , sp_precision , ')' ! Estimate total length needed total_len = 10 + nrows ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , style ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string with newlines trimmed_str = \"[\" // new_line ( 'a' ) do i = 1 , nrows trimmed_str = trimmed_str // \" [\" do j = 1 , ncols write ( temp_str , style ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do if ( i < nrows ) then trimmed_str = trimmed_str // \"],\" // new_line ( 'a' ) else trimmed_str = trimmed_str // \"]\" // new_line ( 'a' ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_sp","tags":"","url":"proc/to_string_matrix_sp.html"},{"title":"to_string_sp – PIC","text":"private  function to_string_sp(r) result(trimmed_str) transform a real(sp) to a string Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: r Return Value character(len=:), allocatable Called by proc~~to_string_sp~~CalledByGraph proc~to_string_sp to_string_sp interface~to_string to_string interface~to_string->proc~to_string_sp proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=50), private :: str character(len=32), private :: style Source Code function to_string_sp ( r ) result ( trimmed_str ) !! transform a real(sp) to a string real ( kind = sp ), intent ( in ) :: r character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str character ( len = 32 ) :: style !call write_with_precision(r, str) write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' write ( str , style ) r trimmed_str = trim ( str ) end function to_string_sp","tags":"","url":"proc/to_string_sp.html"},{"title":"to_string_vector_dp – PIC","text":"private  function to_string_vector_dp(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) Return Value character(len=:), allocatable Called by proc~~to_string_vector_dp~~CalledByGraph proc~to_string_vector_dp to_string_vector_dp interface~to_string to_string interface~to_string->proc~to_string_vector_dp proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i character(len=32), private :: style character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_vector_dp ( array ) result ( trimmed_str ) real ( kind = dp ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , total_len ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_dp","tags":"","url":"proc/to_string_vector_dp.html"},{"title":"to_string_vector_int32 – PIC","text":"private  function to_string_vector_int32(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) Return Value character(len=:), allocatable Called by proc~~to_string_vector_int32~~CalledByGraph proc~to_string_vector_int32 to_string_vector_int32 interface~to_string to_string interface~to_string->proc~to_string_vector_int32 proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_vector_int32 ( array ) result ( trimmed_str ) integer ( int32 ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , total_len ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_int32","tags":"","url":"proc/to_string_vector_int32.html"},{"title":"to_string_vector_int64 – PIC","text":"private  function to_string_vector_int64(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) Return Value character(len=:), allocatable Called by proc~~to_string_vector_int64~~CalledByGraph proc~to_string_vector_int64 to_string_vector_int64 interface~to_string to_string interface~to_string->proc~to_string_vector_int64 proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_vector_int64 ( array ) result ( trimmed_str ) integer ( int64 ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , total_len ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_int64","tags":"","url":"proc/to_string_vector_int64.html"},{"title":"to_string_vector_sp – PIC","text":"private  function to_string_vector_sp(array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) Return Value character(len=:), allocatable Called by proc~~to_string_vector_sp~~CalledByGraph proc~to_string_vector_sp to_string_vector_sp interface~to_string to_string interface~to_string->proc~to_string_vector_sp proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private :: i character(len=32), private :: style character(len=50), private :: temp_str integer, private :: total_len Source Code function to_string_vector_sp ( array ) result ( trimmed_str ) real ( kind = sp ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , total_len ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , sp_precision , ')' ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_sp","tags":"","url":"proc/to_string_vector_sp.html"},{"title":"set_precision – PIC","text":"public  subroutine set_precision(precision) Set the precision for real numbers Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: precision Source Code subroutine set_precision ( precision ) !! Set the precision for real numbers integer ( default_int ), intent ( in ) :: precision if ( precision > 0 ) then dp_precision = precision else print * , \"Warning: Precision must be positive. Using default.\" dp_precision = default_dp_precision end if end subroutine set_precision","tags":"","url":"proc/set_precision.html"},{"title":"to_string – PIC","text":"public interface to_string converts a variable of type (int32, int64, sp, dp, char, logical)\nto a “string” which is just a collecting of chars. Usage result = to_string(variable) Note the functions here are not elemental so they won’t work for\narrays. Please use pic_print_array_v2 module for this Calls interface~~to_string~~CallsGraph interface~to_string to_string proc~to_string_char to_string_char interface~to_string->proc~to_string_char proc~to_string_dp to_string_dp interface~to_string->proc~to_string_dp proc~to_string_int32 to_string_int32 interface~to_string->proc~to_string_int32 proc~to_string_int64 to_string_int64 interface~to_string->proc~to_string_int64 proc~to_string_logical to_string_logical interface~to_string->proc~to_string_logical proc~to_string_matrix_dp to_string_matrix_dp interface~to_string->proc~to_string_matrix_dp proc~to_string_matrix_int32 to_string_matrix_int32 interface~to_string->proc~to_string_matrix_int32 proc~to_string_matrix_int64 to_string_matrix_int64 interface~to_string->proc~to_string_matrix_int64 proc~to_string_matrix_sp to_string_matrix_sp interface~to_string->proc~to_string_matrix_sp proc~to_string_sp to_string_sp interface~to_string->proc~to_string_sp proc~to_string_vector_dp to_string_vector_dp interface~to_string->proc~to_string_vector_dp proc~to_string_vector_int32 to_string_vector_int32 interface~to_string->proc~to_string_vector_int32 proc~to_string_vector_int64 to_string_vector_int64 interface~to_string->proc~to_string_vector_int64 proc~to_string_vector_sp to_string_vector_sp interface~to_string->proc~to_string_vector_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by interface~~to_string~~CalledByGraph interface~to_string to_string proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->interface~to_string proc~print_matrix_dp print_matrix_dp proc~print_matrix_dp->interface~to_string proc~print_matrix_int32 print_matrix_int32 proc~print_matrix_int32->interface~to_string proc~print_matrix_int64 print_matrix_int64 proc~print_matrix_int64->interface~to_string proc~print_matrix_sp print_matrix_sp proc~print_matrix_sp->interface~to_string proc~print_packed_matrix_dp print_packed_matrix_dp proc~print_packed_matrix_dp->interface~to_string proc~print_packed_matrix_int32 print_packed_matrix_int32 proc~print_packed_matrix_int32->interface~to_string proc~print_packed_matrix_int64 print_packed_matrix_int64 proc~print_packed_matrix_int64->interface~to_string proc~print_packed_matrix_sp print_packed_matrix_sp proc~print_packed_matrix_sp->interface~to_string proc~print_vector_dp print_vector_dp proc~print_vector_dp->interface~to_string proc~print_vector_int32 print_vector_int32 proc~print_vector_int32->interface~to_string proc~print_vector_int64 print_vector_int64 proc~print_vector_int64->interface~to_string proc~print_vector_sp print_vector_sp proc~print_vector_sp->interface~to_string proc~timer_print_time pic_timer_type%timer_print_time proc~timer_print_time->interface~to_string interface~pic_print_array pic_print_array interface~pic_print_array->proc~print_matrix_dp interface~pic_print_array->proc~print_matrix_int32 interface~pic_print_array->proc~print_matrix_int64 interface~pic_print_array->proc~print_matrix_sp interface~pic_print_array->proc~print_packed_matrix_dp interface~pic_print_array->proc~print_packed_matrix_int32 interface~pic_print_array->proc~print_packed_matrix_int64 interface~pic_print_array->proc~print_packed_matrix_sp interface~pic_print_array->proc~print_vector_dp interface~pic_print_array->proc~print_vector_int32 interface~pic_print_array->proc~print_vector_int64 interface~pic_print_array->proc~print_vector_sp proc~print_3d_tensor_dp print_3d_tensor_dp interface~pic_print_array->proc~print_3d_tensor_dp proc~print_3d_tensor_int32 print_3d_tensor_int32 interface~pic_print_array->proc~print_3d_tensor_int32 proc~print_3d_tensor_int64 print_3d_tensor_int64 interface~pic_print_array->proc~print_3d_tensor_int64 proc~print_3d_tensor_sp print_3d_tensor_sp interface~pic_print_array->proc~print_3d_tensor_sp proc~print_3d_tensor_dp->interface~pic_print_array proc~print_3d_tensor_int32->interface~pic_print_array proc~print_3d_tensor_int64->interface~pic_print_array proc~print_3d_tensor_sp->interface~pic_print_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  function to_string_int32 (i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable private  function to_string_int64 (i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable private  function to_string_sp (r) result(trimmed_str) transform a real(sp) to a string Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: r Return Value character(len=:), allocatable private  function to_string_dp (r) result(trimmed_str) transform a real(dp) to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable private  function to_string_char (c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable private  function to_string_logical (l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable private  function to_string_vector_int32 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_int64 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_sp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_dp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_matrix_int32 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_int64 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_sp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_dp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:,:) Return Value character(len=:), allocatable","tags":"","url":"interface/to_string.html"},{"title":"get_precision – PIC","text":"private interface get_precision Obtain the current precision being used to print variables to strings Usage: precision = get_precision() returns a default_int result Module Procedures private  interface get_precision () Obtain the current precision being used to print variables to strings Read more… Arguments None","tags":"","url":"interface/get_precision.html"},{"title":"pad – PIC","text":"private interface pad adds a number X of spaces to the left of a “string” whcih is just a\ncollection of characters. Mostly used for nice printing Usage: var = pad(“hello”, n_spaces) Module Procedures private  interface pad () adds a number X of spaces to the left of a “string” whcih is just a\ncollection of characters. Mostly used for nice printing Read more… Arguments None","tags":"","url":"interface/pad.html"},{"title":"set_precision – PIC","text":"private interface set_precision This routine overrides the default dp precision used for\nprinting strings in the to_string function, the default\nis : integer(default_int), parameter :: default_dp_precision = 12 Usage: call set_precision(variable) where variable is default_int Module Procedures private  interface set_precision () This routine overrides the default dp precision used for\nprinting strings in the to_string function, the default\nis : integer(default_int), parameter :: default_dp_precision = 12 Read more… Arguments None","tags":"","url":"interface/set_precision.html"},{"title":"to_upper – PIC","text":"private interface to_upper takes a character variable and transforms it to uppercase usage var = to_upper(“hello”) Module Procedures private  interface to_upper () takes a character variable and transforms it to uppercase Read more… Arguments None","tags":"","url":"interface/to_upper.html"},{"title":"close_log_file – PIC","text":"private  subroutine close_log_file(self) Close the log file, needs to be called at the end of the program Usage: call my_logger%close_log_file() TODO: revisit Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self Called by proc~~close_log_file~~CalledByGraph proc~close_log_file logger_type%close_log_file proc~configure_file_output logger_type%configure_file_output proc~configure_file_output->proc~close_log_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine close_log_file ( self ) !! Close the log file, needs to be called at the end of the program !! !! Usage: call my_logger%close_log_file() !! !! TODO: revisit class ( logger_type ), intent ( inout ) :: self if ( self % log_file_open ) then close ( self % log_file_unit ) self % log_file_open = . false . self % log_file_unit = - 1 end if end subroutine close_log_file","tags":"","url":"proc/close_log_file.html"},{"title":"configuration – PIC","text":"private pure subroutine configuration(self, level) Get the current logger verbosity configuration Usage: call my_logger%configuration(level) TODO: this should be a function Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self integer(kind=default_int), intent(out), optional :: level Source Code pure subroutine configuration ( self , level ) !! Get the current logger verbosity configuration !! !! Usage: call my_logger%configuration(level) !! !! TODO: this should be a function class ( logger_type ), intent ( in ) :: self integer ( default_int ), intent ( out ), optional :: level if ( present ( level )) level = self % log_level end subroutine configuration","tags":"","url":"proc/configuration.html"},{"title":"configure – PIC","text":"private pure subroutine configure(self, level) Configure the logger to be a certain verbosity level Usage: call my_logger%configure(level) Where level can be a number according to the level struct\nor can be loaded from the level struct to be debug_level = 10, & verbose_level = 9, & info_level = 8, & performance_level = 7, & warning_level = 6, & error_level = 5 Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self integer(kind=default_int), intent(in), optional :: level Source Code pure subroutine configure ( self , level ) !! Configure the logger to be a certain verbosity level !! !! Usage: call my_logger%configure(level) !! !! Where level can be a number according to the level struct !! or can be loaded from the level struct to be !! !! debug_level = 10, & !! !! verbose_level = 9, & !! !! info_level = 8, & !! !! performance_level = 7, & !! !! warning_level = 6, & !! !! error_level = 5 !! class ( logger_type ), intent ( inout ) :: self integer ( default_int ), intent ( in ), optional :: level if ( present ( level )) self % log_level = level end subroutine configure","tags":"","url":"proc/configure.html"},{"title":"configure_file_output – PIC","text":"private  subroutine configure_file_output(self, filename, level) Configure the logger to file to be a certain verbosity level Usage: call my_logger%configure_file_output(level) Where level can be a number according to the level struct\nor can be loaded from the level struct to be debug_level = 10, & verbose_level = 9, & info_level = 8, & performance_level = 7, & warning_level = 6, & error_level = 5 Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self character(len=*), intent(in) :: filename integer(kind=default_int), intent(in), optional :: level Calls proc~~configure_file_output~~CallsGraph proc~configure_file_output logger_type%configure_file_output proc~close_log_file logger_type%close_log_file proc~configure_file_output->proc~close_log_file Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: ios Source Code subroutine configure_file_output ( self , filename , level ) !! Configure the logger to file to be a certain verbosity level !! !! Usage: call my_logger%configure_file_output(level) !! !! Where level can be a number according to the level struct !! or can be loaded from the level struct to be !! !! debug_level = 10, & !! !! verbose_level = 9, & !! !! info_level = 8, & !! !! performance_level = 7, & !! !! warning_level = 6, & !! !! error_level = 5 !! class ( logger_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: filename integer ( default_int ), intent ( in ), optional :: level integer ( default_int ) :: ios if ( self % log_file_open ) call self % close_log_file () open ( unit = logfile_unit , file = trim ( filename ), status = \"replace\" , action = \"write\" , iostat = ios ) if ( ios /= 0 ) then write ( * , * ) \"ERROR: Failed to open log file: \" , trim ( filename ) return end if self % log_file_unit = logfile_unit self % log_file_open = . true . if ( present ( level )) self % log_file_level = level end subroutine configure_file_output","tags":"","url":"proc/configure_file_output.html"},{"title":"debug – PIC","text":"private  subroutine debug(self, message, module, procedure) Log a message that will only be printed at the debug level of verbosity Usage: call my_logger%debug(“MESSAGE”) Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code subroutine debug ( self , message , module , procedure ) !! Log a message that will only be printed at the debug level of verbosity !! !! Usage: call my_logger%debug(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"DEBUG\" , message , module , procedure ) end subroutine debug","tags":"","url":"proc/debug.html"},{"title":"error – PIC","text":"private  subroutine error(self, message, module, procedure) Log a message that will only be printed at the error of verbosity Usage: call my_logger%error(“MESSAGE”) Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code subroutine error ( self , message , module , procedure ) !! Log a message that will only be printed at the error of verbosity !! !! Usage: call my_logger%error(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"ERROR\" , message , module , procedure ) end subroutine error","tags":"","url":"proc/error.html"},{"title":"info – PIC","text":"private  subroutine info(self, message, module, procedure) Log a message that will only be printed at the info level of verbosity Usage: call my_logger%info(“MESSAGE”) Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code subroutine info ( self , message , module , procedure ) !! Log a message that will only be printed at the info level of verbosity !! !! Usage: call my_logger%info(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"INFO\" , message , module , procedure ) end subroutine info","tags":"","url":"proc/info.html"},{"title":"log – PIC","text":"private  subroutine log(self, level, message, module, procedure) internal subroutines that processes the message and filters it according to\nthe verbosity level set by the user or the default\nthis is a private subroutine so it is not exposed to the user Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: level character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Calls proc~~log~~CallsGraph proc~log logger_type%log proc~write_log_line write_log_line proc~log->proc~write_log_line Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: log_level_value Source Code subroutine log ( self , level , message , module , procedure ) !! internal subroutines that processes the message and filters it according to !! the verbosity level set by the user or the default !! this is a private subroutine so it is not exposed to the user class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: level character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure integer ( default_int ) :: log_level_value select case ( trim ( level )) case ( \"DEBUG\" ) log_level_value = debug_level case ( \"VERBOSE\" ) log_level_value = verbose_level case ( \"INFO\" ) log_level_value = info_level case ( \"WARNING\" ) log_level_value = warning_level case ( \"PERFORMANCE\" ) log_level_value = performance_level case ( \"ERROR\" ) log_level_value = error_level case default write ( * , * ) 'ERROR: Invalid log level \"' , trim ( level ), '\"' return end select ! Console logging if ( self % log_level >= log_level_value ) then call write_log_line ( stdout , level , message , module , procedure ) end if ! File logging if ( self % log_file_open . and . self % log_file_level >= log_level_value ) then call write_log_line ( self % log_file_unit , level , message , module , procedure ) end if end subroutine log","tags":"","url":"proc/log.html"},{"title":"performance – PIC","text":"private  subroutine performance(self, message, module, procedure) Log a message that will only be printed at the performance of verbosity Usage: call my_logger%performance(“MESSAGE”) Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code subroutine performance ( self , message , module , procedure ) !! Log a message that will only be printed at the performance of verbosity !! !! Usage: call my_logger%performance(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"PERFORMANCE\" , message , module , procedure ) end subroutine performance","tags":"","url":"proc/performance.html"},{"title":"verbose – PIC","text":"private  subroutine verbose(self, message, module, procedure) Log a message that will only be printed at the verbose level of verbosity Usage: call my_logger%verbose(“MESSAGE”) Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code subroutine verbose ( self , message , module , procedure ) !! Log a message that will only be printed at the verbose level of verbosity !! !! Usage: call my_logger%verbose(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"VERBOSE\" , message , module , procedure ) end subroutine verbose","tags":"","url":"proc/verbose.html"},{"title":"warning – PIC","text":"private  subroutine warning(self, message, module, procedure) Log a message that will only be printed at the warning level of verbosity Usage: call my_logger%warning(“MESSAGE”) Type Bound logger_type Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code subroutine warning ( self , message , module , procedure ) !! Log a message that will only be printed at the warning level of verbosity !! !! Usage: call my_logger%warning(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"WARNING\" , message , module , procedure ) end subroutine warning","tags":"","url":"proc/warning.html"},{"title":"write_log_line – PIC","text":"private  subroutine write_log_line(unit, level, message, module, procedure) Internal subroutine that will write the message to the log\nno interface to the public Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: unit character(len=*), intent(in) :: level character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Called by proc~~write_log_line~~CalledByGraph proc~write_log_line write_log_line proc~log logger_type%log proc~log->proc~write_log_line Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine write_log_line ( unit , level , message , module , procedure ) !! Internal subroutine that will write the message to the log !! no interface to the public integer ( default_int ), intent ( in ) :: unit character ( * ), intent ( in ) :: level , message character ( * ), intent ( in ), optional :: module , procedure if ( present ( module ) . and . present ( procedure )) then write ( unit , '(A, \": \", A, \".\", A, \": \", A)' ) trim ( level ), trim ( module ), trim ( procedure ), trim ( message ) else if ( present ( module )) then write ( unit , '(A, \": \", A, \": \", A)' ) trim ( level ), trim ( module ), trim ( message ) else write ( unit , '(A, \": \", A)' ) trim ( level ), trim ( message ) end if end subroutine write_log_line","tags":"","url":"proc/write_log_line.html"},{"title":"pic_print_banner – PIC","text":"public  subroutine pic_print_banner() my cool banner, work in progress Arguments None Source Code subroutine pic_print_banner !! my cool banner, work in progress print * , \"========================================\" print * , \"         _____  _____  _____ \" print * , \"        |  __ \\\\|_   _|/ ____|\" print * , \"        | |__) | | | | |     \" print * , \"        |  ___/  | | | |     \" print * , \"        | |     _| |_| |____ \" print * , \"        |_|    |_____|\\\\_____|\" print * , \"                                        \" print * , \"               PIC LIBRARY\" print * , \"========================================\" end subroutine pic_print_banner","tags":"","url":"proc/pic_print_banner.html"},{"title":"print_asterisk_row – PIC","text":"public  subroutine print_asterisk_row(n) prints a convenient row of asterisks of length n Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n number of asterisks to print Variables Type Visibility Attributes Name Initial integer(kind=default_int), private :: i Source Code subroutine print_asterisk_row ( n ) !! prints a convenient row of asterisks of length n integer ( kind = default_int ), intent ( in ) :: n !! number of asterisks to print integer ( kind = default_int ) :: i do i = 1 , n write ( * , \"(A)\" , advance = \"no\" ) \"*\" end do write ( * , * ) end subroutine print_asterisk_row","tags":"","url":"proc/print_asterisk_row.html"},{"title":"gpugetdevice – PIC","text":"public  subroutine gpugetdevice(device_id, ierr) get current device id from the GPU runtime Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: device_id integer(kind=c_int), intent(out) :: ierr Called by proc~~gpugetdevice~~CalledByGraph proc~gpugetdevice gpugetdevice proc~get_device_id get_device_id proc~get_device_id->proc~gpugetdevice proc~get_gpu_information pic_device_type%get_gpu_information proc~get_gpu_information->proc~get_device_id Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine gpugetdevice ( device_id , ierr ) !! get current device id from the GPU runtime integer ( c_int ), intent ( out ) :: device_id , ierr #ifdef HAVE_CUDA ierr = cudaGetDevice ( device_id ) #elif defined(HAVE_HIP) ierr = hipGetDevice ( device_id ) #else ierr = - 1_c_int device_id = - 1_c_int #endif end subroutine gpugetdevice","tags":"","url":"proc/gpugetdevice.html"},{"title":"gpugetdevicecount – PIC","text":"public  subroutine gpugetdevicecount(device_count, ierr) get device count available from the GPU runtime Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: device_count integer(kind=c_int), intent(out) :: ierr Source Code subroutine gpugetdevicecount ( device_count , ierr ) !! get device count available from the GPU runtime integer ( c_int ), intent ( out ) :: device_count , ierr #ifdef HAVE_CUDA ierr = cudaGetDeviceCount ( device_count ) #elif defined(HAVE_HIP) ierr = hipGetDeviceCount ( device_count ) #else ierr = - 1_c_int device_count = 0_c_int #endif end subroutine gpugetdevicecount","tags":"","url":"proc/gpugetdevicecount.html"},{"title":"gpugetmeminfo – PIC","text":"public  subroutine gpugetmeminfo(freeMem, totalMem, ierr) get free and total memory from the GPU runtime Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(out) :: freeMem integer(kind=c_size_t), intent(out) :: totalMem integer(kind=c_int), intent(out) :: ierr Called by proc~~gpugetmeminfo~~CalledByGraph proc~gpugetmeminfo gpugetmeminfo proc~get_gpu_memory_info get_gpu_memory_info proc~get_gpu_memory_info->proc~gpugetmeminfo proc~get_gpu_information pic_device_type%get_gpu_information proc~get_gpu_information->proc~get_gpu_memory_info Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine gpugetmeminfo ( freeMem , totalMem , ierr ) !! get free and total memory from the GPU runtime integer ( c_size_t ), intent ( out ) :: freeMem , totalMem integer ( c_int ), intent ( out ) :: ierr #ifdef HAVE_CUDA ierr = cudaMemGetInfo ( freeMem , totalMem ) #elif defined(HAVE_HIP) ierr = hipMemGetInfo ( freeMem , totalMem ) #else freeMem = 0_c_size_t totalMem = 0_c_size_t ierr = - 1 #endif end subroutine gpugetmeminfo","tags":"","url":"proc/gpugetmeminfo.html"},{"title":"is_equal_dp – PIC","text":"private elemental function is_equal_dp(a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: a real(kind=dp), intent(in) :: b Return Value logical Called by proc~~is_equal_dp~~CalledByGraph proc~is_equal_dp is_equal_dp interface~is_equal is_equal interface~is_equal->proc~is_equal_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental function is_equal_dp ( a , b ) result ( res ) real ( dp ), intent ( in ) :: a , b logical :: res res = abs ( a - b ) < tol_dp end function is_equal_dp","tags":"","url":"proc/is_equal_dp.html"},{"title":"is_equal_sp – PIC","text":"private elemental function is_equal_sp(a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: a real(kind=sp), intent(in) :: b Return Value logical Called by proc~~is_equal_sp~~CalledByGraph proc~is_equal_sp is_equal_sp interface~is_equal is_equal interface~is_equal->proc~is_equal_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code elemental function is_equal_sp ( a , b ) result ( res ) real ( sp ), intent ( in ) :: a , b logical :: res res = abs ( a - b ) < tol_sp end function is_equal_sp","tags":"","url":"proc/is_equal_sp.html"},{"title":"dummy_work – PIC","text":"public  subroutine dummy_work() this subroutine runs a random dgemm to create work so that timers and other testing utils work nicely Usage: call dummy_work() it will simply do a 256 by 256 dgemm, woo Arguments None Variables Type Visibility Attributes Name Initial real(kind=dp), private, allocatable :: A (:,:) real(kind=dp), private, allocatable :: B (:,:) real(kind=dp), private, allocatable :: C (:,:) integer(kind=int64), private :: i integer(kind=int64), private :: j integer(kind=int64), private :: k integer(kind=default_int), private :: m Source Code subroutine dummy_work () !! this subroutine runs a random dgemm to create work so that timers and other testing utils work nicely !! !! Usage: call dummy_work() !! !! it will simply do a 256 by 256 dgemm, woo integer ( int64 ) :: i , j , k integer ( default_int ) :: m real ( dp ), allocatable :: A (:, :), B (:, :), C (:, :) m = 256_default_int allocate ( A ( m , m ), B ( m , m ), C ( m , m )) A = 1.0_dp B = 1.0_dp C = 0.0_dp do i = 1 , m do j = 1 , m do k = 1 , m C ( i , j ) = C ( i , j ) + A ( i , k ) * B ( k , j ) end do end do end do print * , C ( 1 , 1 ) deallocate ( A , B , C ) end subroutine dummy_work","tags":"","url":"proc/dummy_work.html"},{"title":"is_equal – PIC","text":"public interface is_equal The is equal interface is used to circumvent the fact that Fortran, rightfully, complains about\ncomparing two reals without involving a tolerance, i.e. if(a == b) since there is no guarantee that\nthe two reals are exactly equal due to floating point precision issues. The functions are defined as elemental Usage: if (is_equal(a, b)) then\nwhere a and b are real numbers, and the function will return true if they are\nequal within the tolerance defined in pic_global_definitions. Calls interface~~is_equal~~CallsGraph interface~is_equal is_equal proc~is_equal_dp is_equal_dp interface~is_equal->proc~is_equal_dp proc~is_equal_sp is_equal_sp interface~is_equal->proc~is_equal_sp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private elemental function is_equal_sp (a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: a real(kind=sp), intent(in) :: b Return Value logical private elemental function is_equal_dp (a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: a real(kind=dp), intent(in) :: b Return Value logical","tags":"","url":"interface/is_equal.html"},{"title":"get_first_arg_from_command_line – PIC","text":"public  function get_first_arg_from_command_line() result(filename) get the first argument from the command line, this is expected to be a filename Usage: filename = get_first_arg_from_command_line() Arguments None Return Value character(len=255) Variables Type Visibility Attributes Name Initial character(len=255), private :: arg integer(kind=default_int), private :: num_args Source Code function get_first_arg_from_command_line () result ( filename ) !! get the first argument from the command line, this is expected to be a filename !! !! Usage: filename = get_first_arg_from_command_line() !! character ( len = 255 ) :: filename character ( len = 255 ) :: arg integer ( default_int ) :: num_args num_args = command_argument_count () if ( num_args < 1 ) then write ( * , \"(A)\" ) \"Usage: ./my_executable <filename>\" stop 1 end if call get_command_argument ( 1 , arg ) filename = trim ( adjustl ( arg )) end function get_first_arg_from_command_line","tags":"","url":"proc/get_first_arg_from_command_line.html"},{"title":"to_string_device – PIC","text":"private  function to_string_device(self) result(str) cute printing routine for the pic device type, transforms the contents into a\nstring of chars Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(in) :: self Return Value character(len=:), allocatable Called by proc~~to_string_device~~CalledByGraph proc~to_string_device to_string_device interface~to_string~2 to_string interface~to_string~2->proc~to_string_device Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=100), private :: temp_str integer(kind=int32), private :: total_len Source Code function to_string_device ( self ) result ( str ) !! cute printing routine for the pic device type, transforms the contents into a !! string of chars class ( pic_device_type ), intent ( in ) :: self character ( len = :), allocatable :: str character ( len = 100 ) :: temp_str integer ( int32 ) :: total_len total_len = len ( \"Device ID:   \" ) + 6 + & len ( \"Free memory: \" ) + 20 + & len ( \"Total memory:\" ) + 20 + & len ( \"Used memory: \" ) + 20 + 3 * len ( new_line ( 'a' )) allocate ( character ( len = total_len ) :: str ) write ( temp_str , '(I0)' ) self % device_id str = \"Device ID:   \" // trim ( temp_str ) // new_line ( 'a' ) write ( temp_str , '(F10.2)' ) self % free_mb str = str // \"Free memory: \" // trim ( adjustl ( temp_str )) // \" MB\" // new_line ( 'a' ) write ( temp_str , '(F10.2)' ) self % total_mb str = str // \"Total memory: \" // trim ( adjustl ( temp_str )) // \" MB\" // new_line ( 'a' ) write ( temp_str , '(F10.2)' ) self % used_mb str = str // \"Used memory:  \" // trim ( adjustl ( temp_str )) // \" MB\" end function to_string_device","tags":"","url":"proc/to_string_device.html"},{"title":"get_device_id – PIC","text":"public  subroutine get_device_id(mem) routine to get the device id for the device_type Arguments Type Intent Optional Attributes Name type( pic_device_type ), intent(inout) :: mem Calls proc~~get_device_id~~CallsGraph proc~get_device_id get_device_id proc~gpugetdevice gpugetdevice proc~get_device_id->proc~gpugetdevice Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~get_device_id~~CalledByGraph proc~get_device_id get_device_id proc~get_gpu_information pic_device_type%get_gpu_information proc~get_gpu_information->proc~get_device_id Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=c_int), private :: device_id integer(kind=c_int), private :: ierr Source Code subroutine get_device_id ( mem ) !! routine to get the device id for the device_type type ( pic_device_type ), intent ( inout ) :: mem integer ( c_int ) :: ierr , device_id call gpugetdevice ( device_id , ierr ) if ( ierr == 0_c_int ) then mem % device_id = device_id else mem % device_id = - 1_c_int end if end subroutine get_device_id","tags":"","url":"proc/get_device_id.html"},{"title":"get_gpu_information – PIC","text":"public  subroutine get_gpu_information(self) call my_device%get_gpu_informatio() style subroutine to populate the object Type Bound pic_device_type Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(inout) :: self Calls proc~~get_gpu_information~~CallsGraph proc~get_gpu_information pic_device_type%get_gpu_information proc~get_device_id get_device_id proc~get_gpu_information->proc~get_device_id proc~get_gpu_memory_info get_gpu_memory_info proc~get_gpu_information->proc~get_gpu_memory_info proc~gpugetdevice gpugetdevice proc~get_device_id->proc~gpugetdevice proc~gpugetmeminfo gpugetmeminfo proc~get_gpu_memory_info->proc~gpugetmeminfo Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine get_gpu_information ( self ) !! call my_device%get_gpu_informatio() style subroutine to populate the object class ( pic_device_type ), intent ( inout ) :: self call get_gpu_memory_info ( self ) call get_device_id ( self ) end subroutine get_gpu_information","tags":"","url":"proc/get_gpu_information.html"},{"title":"get_gpu_memory_info – PIC","text":"public  subroutine get_gpu_memory_info(mem) routine to get the free and total memory for the device_type object\ncan be used independently with call get_gpu_memory_info(device_object) Arguments Type Intent Optional Attributes Name type( pic_device_type ), intent(inout) :: mem Calls proc~~get_gpu_memory_info~~CallsGraph proc~get_gpu_memory_info get_gpu_memory_info proc~gpugetmeminfo gpugetmeminfo proc~get_gpu_memory_info->proc~gpugetmeminfo Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Called by proc~~get_gpu_memory_info~~CalledByGraph proc~get_gpu_memory_info get_gpu_memory_info proc~get_gpu_information pic_device_type%get_gpu_information proc~get_gpu_information->proc~get_gpu_memory_info Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=c_size_t), private :: freeMem integer(kind=c_int), private :: ierr integer(kind=c_size_t), private :: totalMem Source Code subroutine get_gpu_memory_info ( mem ) !! routine to get the free and total memory for the device_type object !! can be used independently with call get_gpu_memory_info(device_object) type ( pic_device_type ), intent ( inout ) :: mem integer ( c_size_t ) :: freeMem , totalMem integer ( c_int ) :: ierr call gpugetmeminfo ( freeMem , totalMem , ierr ) if ( ierr == 0_c_int ) then mem % free_mb = real ( freeMem , kind = dp ) / 102 4.0_dp / 102 4.0_dp mem % total_mb = real ( totalMem , kind = dp ) / 102 4.0_dp / 102 4.0_dp mem % used_mb = mem % total_mb - mem % free_mb else mem = pic_device_type () ! zero it end if end subroutine get_gpu_memory_info","tags":"","url":"proc/get_gpu_memory_info.html"},{"title":"to_string – PIC","text":"public interface to_string convenient way to print the pic_device_type using to_string(my_device) Calls interface~~to_string~2~~CallsGraph interface~to_string~2 to_string proc~to_string_device to_string_device interface~to_string~2->proc~to_string_device Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  function to_string_device (self) result(str) cute printing routine for the pic device type, transforms the contents into a\nstring of chars Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(in) :: self Return Value character(len=:), allocatable","tags":"","url":"interface/to_string~2.html"},{"title":"get_flops – PIC","text":"private  function get_flops(self) result(flops) Get the int64 number of FLOPs we currently have in the counter Usage: flops = my_flop_recorder%get() Type Bound flop_recorder_type Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(in) :: self Return Value integer(kind=int64) Called by proc~~get_flops~~CalledByGraph proc~get_flops flop_recorder_type%get_flops proc~flop_rate_get_flop_rate flop_rate_type%flop_rate_get_flop_rate proc~flop_rate_get_flop_rate->proc~get_flops proc~flop_rate_get_flops flop_rate_type%flop_rate_get_flops proc~flop_rate_get_flops->proc~get_flops proc~flop_rate_report flop_rate_type%flop_rate_report proc~flop_rate_report->proc~flop_rate_get_flop_rate Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code function get_flops ( self ) result ( flops ) !! Get the int64 number of FLOPs we currently have in the counter !! !! Usage: flops = my_flop_recorder%get() !! class ( flop_recorder_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % flop_count end function get_flops","tags":"","url":"proc/get_flops.html"},{"title":"add_flops – PIC","text":"private  subroutine add_flops(self, flops) Add an int64 variable which contains the FLOPs\nwe use int64 since we might reach very large FLOP counts Usage: call my_flop_recorder%add(flops) Type Bound flop_recorder_type Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops Called by proc~~add_flops~~CalledByGraph proc~add_flops flop_recorder_type%add_flops proc~flop_rate_add_flops flop_rate_type%flop_rate_add_flops proc~flop_rate_add_flops->proc~add_flops Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine add_flops ( self , flops ) !! Add an int64 variable which contains the FLOPs !! we use int64 since we might reach very large FLOP counts !! !! Usage: call my_flop_recorder%add(flops) !! class ( flop_recorder_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops self % flop_count = self % flop_count + flops end subroutine add_flops","tags":"","url":"proc/add_flops.html"},{"title":"reset_flop_counter – PIC","text":"private  subroutine reset_flop_counter(self) Resets the flop counter to 0_int64 Usage: call my_flop_recorder%reset() Type Bound flop_recorder_type Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self Called by proc~~reset_flop_counter~~CalledByGraph proc~reset_flop_counter flop_recorder_type%reset_flop_counter proc~flop_rate_reset flop_rate_type%flop_rate_reset proc~flop_rate_reset->proc~reset_flop_counter Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code subroutine reset_flop_counter ( self ) !! Resets the flop counter to 0_int64 !! !! Usage: call my_flop_recorder%reset() !! class ( flop_recorder_type ), intent ( inout ) :: self self % flop_count = 0_int64 end subroutine reset_flop_counter","tags":"","url":"proc/reset_flop_counter.html"},{"title":"pic_flop_rate – PIC","text":"pic_flop_rate is a convenient encapsulation of the flop_recorder and pic_timer\nit is used to measure the flop rate of a given operation, and report it Uses pic_string pic_timer pic_types pic_flop_recorder module~~pic_flop_rate~~UsesGraph module~pic_flop_rate pic_flop_rate module~pic_flop_recorder pic_flop_recorder module~pic_flop_rate->module~pic_flop_recorder module~pic_string pic_string module~pic_flop_rate->module~pic_string module~pic_timer pic_timer module~pic_flop_rate->module~pic_timer module~pic_types pic_types module~pic_flop_rate->module~pic_types module~pic_flop_recorder->module~pic_types module~pic_string->module~pic_types module~pic_timer->module~pic_string module~pic_timer->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: flop_rate_type derived type for flop rate, contains a timer and a flop recorder Components Type Visibility Attributes Name Initial real(kind=dp), private :: m_flop_rate private by default so that people use the accessor functions type( flop_recorder_type ), private :: m_flops type( pic_timer_type ), private :: m_timer Type-Bound Procedures procedure, public, non_overridable :: add_flops => flop_rate_add_flops procedure, public, non_overridable :: get_flop_rate => flop_rate_get_flop_rate procedure, public, non_overridable :: get_flops => flop_rate_get_flops procedure, public, non_overridable :: get_time => flop_rate_get_time procedure, public, non_overridable :: report => flop_rate_report procedure, public, non_overridable :: reset => flop_rate_reset procedure, public, non_overridable :: start_time => flop_rate_start_time procedure, public, non_overridable :: stop_time => flop_rate_stop_time Functions private  function flop_rate_get_flop_rate (self) result(flop_rate) get the flop rate in GFLOP/s, this will calculate the flop rate based on the\nnumber of flops and the elapsed time Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Return Value real(kind=dp) private  function flop_rate_get_flops (self) result(flops) get the number of flops recorded in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value integer(kind=int64) private  function flop_rate_get_time (self) result(time) get the elapsed time in seconds from the timer contained in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value real(kind=dp) Subroutines private  subroutine flop_rate_add_flops (self, flops) add flops to the flop rate type, this will add the flops to the flop recorder\nUsage: call my_flop_rate%add_flops(1000) Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops private  subroutine flop_rate_report (self) report the flop rate, this will print the flop rate in GFLOP/s Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self private  subroutine flop_rate_reset (self) reset the flop rate type, this will reset the timer and the flop recorder Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self private  subroutine flop_rate_start_time (self) Calls the start method for the timer contained in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self private  subroutine flop_rate_stop_time (self) Calls the stop method for the timer contained in the flop rate type Read more… Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self","tags":"","url":"module/pic_flop_rate.html"},{"title":"pic_blas_interfaces – PIC","text":"pic_blas_interfaces.F90 provides the interfaces for the BLAS routines\nthe idea is to have a two level interface, first pic_blas_xyz which\nis the way programmers will use BLAS, it’ll do some checks and then\ncall the “overloaded” BLAS interfaces to call the correct BLAS routine Uses pic_types module~~pic_blas_interfaces~~UsesGraph module~pic_blas_interfaces pic_blas_interfaces module~pic_types pic_types module~pic_blas_interfaces->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface pic_asum general interface of the BLAS ASUM routines, will call SASUM, DASUM, SCASUM, DZASUM Usage: result = pic_asum(x, incx) where x is a vector and incx is the increment, this will return the sum of the absolute values\nof the elements of x. The vector x must be an allocatable array, we deduce the shape from it.\nThe increment incx is 1 by default. private  function pic_sasum (x) result(res) interface for single precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) private  function pic_dasum (x) result(res) interface for double precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) private  function pic_scasum (x) result(res) interface for single precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) private  function pic_dzasum (x) result(res) interface for double precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) public        interface pic_axpy general interface of the BLAS AXPY routines, will call SAXPY, DAXPY, CAXPY, ZAXPY Usage: call pic_axpy(n, alpha, x, incx, y, incy) where n is the number of elements, alpha is the scaling factor,\nx is the input vector, incx is the increment for x, y is the output vector,\nand incy is the increment for y. The vectors x and y must be allocatable arrays, we deduce the shapes from them.\nThe increments incx and incy are 1 by default. private  subroutine pic_saxpy (x, y, alpha) interface for single precision AXPY Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) real(kind=sp), intent(in), optional :: alpha private  subroutine pic_daxpy (x, y, alpha) interface for double precision AXPY Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) real(kind=dp), intent(in), optional :: alpha public        interface pic_copy general interface of the BLAS COPY routines, will call SCOPY, DCOPY, CCOPY, ZCOPY Usage: call pic_copy(x, y) where x is the input vector, y is the output vector.\nThe vectors x and y must be allocatable arrays, we deduce the shapes from them. private  subroutine pic_scopy (x, y) interface for single precision copy Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) private  subroutine pic_dcopy (x, y) interface for double precision copy Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) public        interface pic_dot general interface of the BLAS DOT routines, will call SDOT, DDOT, CDOTC, ZDOTC Usage: result = pic_dot(x, y) where x is the input vector, y is the output vector.\nThe vectors x and y must be allocatable arrays, we deduce the shapes from them. private  function pic_sdot (x, y) result(res) interface for single precision dot product Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(in) :: y (:) Return Value real(kind=sp) private  function pic_ddot (x, y) result(res) interface for double precision dot product Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(in) :: y (:) Return Value real(kind=dp) public        interface pic_gemm general interface of the BLAS GEMM routines, will call SGEMM, DGEMM, CGEMM Usage: call pic_gemm(A, B, C, [optional] transa, [optional] transb, [optional] alpha, [optional] beta) where A, B, C are matrices, transa and transb are optional transpose options,\nalpha and beta are optional scaling factors By default, if not specified transA and transB are “N” (no transpose),\nand alpha and beta are 1.0 and 0.0 respectively. The matrices A, B, C must be allocatable arrays, we deduce the shapes from them. private pure subroutine pic_sgemm (A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: B (:,:) real(kind=sp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta private pure subroutine pic_dgemm (A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: B (:,:) real(kind=dp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta public        interface pic_gemv general interface of the BLAS GEMV routines, will call SGEMV, DGEMV, CGEMV, ZGEMV Usage: call pic_gemv(A, x, y, [optional] transa, [optional] alpha, [optional] beta) where A is a matrix, x and y are vectors, transa is an optional transpose option,\nalpha and beta are optional scaling factors. The matrix A must be an allocatable array, we deduce the shapes from it.\nTransA is “N” (no transpose) by default. And alpha and beta are 1.0 and 0.0 respectively. private pure subroutine pic_sgemv (A, x, y, trans_a, alpha, beta) interface for single precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta private pure subroutine pic_dgemv (A, x, y, trans_a, alpha, beta) interface for double precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta public        interface pic_iamax general interface of the BLAS IAMAX routines, will call ISAMAX, IDAMAX, ICAMAX, IZAMAX Usage: idx = pic_iamax(x, incx) where x is the input vector, incx is the increment.\nThe vector x must be an allocatable array, we deduce the shape from it.\nThe increment incx is 1 by default. private  function pic_isamax (x) result(idx) interface for single precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value integer(kind=default_int) private  function pic_idamax (x) result(idx) interface for double precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value integer(kind=default_int) public        interface pic_scal general interface of the BLAS SCAL routines, will call SSCAL, DSCAL, CSCAL, ZSCAL Usage: call pic_scal(x, [optional] alpha) where x is the input vector, alpha is the scaling factor.\nThe vector x must be an allocatable array, we deduce the shape from it.\nThe scaling factor alpha is 1.0 by default. private  subroutine pic_sscal (x, alpha) interface for single precision scaling Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: x (:) real(kind=sp), intent(in), optional :: alpha private  subroutine pic_dscal (x, alpha) interface for double precision scaling Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: x (:) real(kind=dp), intent(in), optional :: alpha private        interface blas_asum this is the interface for the BLAS ASUM routines, it will call SASUM, DASUM, SCASUM, DZASUM\nUsage: result = blas_asum(x, incx)\nwhere x is the input vector, incx is the increment. This is not a public interface, it is used internally by pic_asum private pure function dasum(n, x, incx) result(res_dasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=dp) private pure function dzasum(n, x, incx) result(res_dzasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=dp) private pure function sasum(n, x, incx) result(res_sasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=sp) private pure function scasum(n, x, incx) result(res_scasum) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value real(kind=sp) private        interface blas_axpy explicit interface for BLAS AXPY routines Usage: call blas_axpy(n, alpha, x, incx, y, incy) This is not a public interface, it is used internally by pic_axpy private pure subroutine caxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: alpha complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine daxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine saxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine zaxpy(n, alpha, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: alpha complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private        interface blas_copy explicit interface for BLAS COPY routines Usage: call blas_copy(x, y) This is not a public interface, it is used internally by pic_copy private pure subroutine dcopy(n, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine scopy(n, x, incx, y, incy) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private        interface blas_dot explicit interface for BLAS DOT routines Usage: result = blas_dot(x, y, incx, incy, n)\nThis is not a public interface, it is used internally by pic_dot private pure function cdotc(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=sp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value complex(kind=sp) private pure function ddot(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value real(kind=dp) private pure function sdot(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value real(kind=sp) private pure function zdotc(n, x, incx, y, incy) result(res) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=dp), intent(in) :: y (*) integer(kind=default_int), intent(in) :: incy Return Value complex(kind=dp) private        interface blas_gemm explicit interface for BLAS GEMM routines Usage: call blas_gemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) This is not a public interface, it is used internally by pic_gemm private pure subroutine cgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k complex(kind=sp), intent(in) :: alpha complex(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=sp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb complex(kind=sp), intent(in) :: beta complex(kind=sp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private pure subroutine dgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=dp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb real(kind=dp), intent(in) :: beta real(kind=dp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private pure subroutine sgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=sp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb real(kind=sp), intent(in) :: beta real(kind=sp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private pure subroutine zgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: transa character(len=1), intent(in) :: transb integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n integer(kind=default_int), intent(in) :: k complex(kind=dp), intent(in) :: alpha complex(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=dp), intent(in) :: b (ldb,*) integer(kind=default_int), intent(in) :: ldb complex(kind=dp), intent(in) :: beta complex(kind=dp), intent(inout) :: c (ldc,*) integer(kind=default_int), intent(in) :: ldc private        interface blas_gemv explicit interface for BLAS GEMV routines Usage: call blas_gemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) This is not a public interface, it is used internally by pic_gemv private pure subroutine cgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n complex(kind=sp), intent(in) :: alpha complex(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=sp), intent(in) :: beta complex(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine dgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=dp), intent(in) :: beta real(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine sgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx real(kind=sp), intent(in) :: beta real(kind=sp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private pure subroutine zgemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: trans integer(kind=default_int), intent(in) :: m integer(kind=default_int), intent(in) :: n complex(kind=dp), intent(in) :: alpha complex(kind=dp), intent(in) :: a (lda,*) integer(kind=default_int), intent(in) :: lda complex(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx complex(kind=dp), intent(in) :: beta complex(kind=dp), intent(inout) :: y (*) integer(kind=default_int), intent(in) :: incy private        interface blas_iamax explicit interface for BLAS IAMAX routines Usage: idx = blas_iamax(x, incx) This is not a public interface, it is used internally by pic_iamax private pure function idamax(n, x, incx) result(idx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value integer(kind=default_int) private pure function isamax(n, x, incx) result(idx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: x (*) integer(kind=default_int), intent(in) :: incx Return Value integer(kind=default_int) private        interface blas_scal explicit interface for BLAS SCAL routines Usage: call blas_scal(n, alpha, x, incx) This is not a public interface, it is used internally by pic_scal private pure subroutine dscal(n, alpha, x, incx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=dp), intent(in) :: alpha real(kind=dp), intent(inout) :: x (*) integer(kind=default_int), intent(in) :: incx private pure subroutine sscal(n, alpha, x, incx) Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n real(kind=sp), intent(in) :: alpha real(kind=sp), intent(inout) :: x (*) integer(kind=default_int), intent(in) :: incx Functions private  function pic_dasum (x) result(res) interface for double precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) private  function pic_ddot (x, y) result(res) interface for double precision dot product Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(in) :: y (:) Return Value real(kind=dp) private  function pic_dzasum (x) result(res) interface for double precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=dp), intent(in) :: x (:) Return Value real(kind=dp) private  function pic_idamax (x) result(idx) interface for double precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) Return Value integer(kind=default_int) private  function pic_isamax (x) result(idx) interface for single precision index of maximum absolute value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value integer(kind=default_int) private  function pic_sasum (x) result(res) interface for single precision absolute sum Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) private  function pic_scasum (x) result(res) interface for single precision complex absolute sum Arguments Type Intent Optional Attributes Name complex(kind=sp), intent(in) :: x (:) Return Value real(kind=sp) private  function pic_sdot (x, y) result(res) interface for single precision dot product Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(in) :: y (:) Return Value real(kind=sp) Subroutines private  subroutine pic_daxpy (x, y, alpha) interface for double precision AXPY Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) real(kind=dp), intent(in), optional :: alpha private  subroutine pic_dcopy (x, y) interface for double precision copy Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) private pure subroutine pic_dgemm (A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: B (:,:) real(kind=dp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta private pure subroutine pic_dgemv (A, x, y, trans_a, alpha, beta) interface for double precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(in) :: x (:) real(kind=dp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=dp), intent(in), optional :: alpha real(kind=dp), intent(in), optional :: beta private  subroutine pic_dscal (x, alpha) interface for double precision scaling Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: x (:) real(kind=dp), intent(in), optional :: alpha private  subroutine pic_saxpy (x, y, alpha) interface for single precision AXPY Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) real(kind=sp), intent(in), optional :: alpha private  subroutine pic_scopy (x, y) interface for single precision copy Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) private pure subroutine pic_sgemm (A, B, C, transa, transb, alpha, beta) interface for single precision matrix multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: B (:,:) real(kind=sp), intent(inout) :: C (:,:) character(len=1), intent(in), optional :: transa character(len=1), intent(in), optional :: transb real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta private pure subroutine pic_sgemv (A, x, y, trans_a, alpha, beta) interface for single precision matrix-vector multiplication Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(in) :: x (:) real(kind=sp), intent(inout) :: y (:) character(len=1), intent(in), optional :: trans_a real(kind=sp), intent(in), optional :: alpha real(kind=sp), intent(in), optional :: beta private  subroutine pic_sscal (x, alpha) interface for single precision scaling Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: x (:) real(kind=sp), intent(in), optional :: alpha","tags":"","url":"module/pic_blas_interfaces.html"},{"title":"pic_optional_value – PIC","text":"This module provides functions to handle optional arguments Uses pic_types module~~pic_optional_value~~UsesGraph module~pic_optional_value pic_optional_value module~pic_types pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_optional_value~~UsedByGraph module~pic_optional_value pic_optional_value module~pic_array pic_array module~pic_array->module~pic_optional_value module~pic_sorting pic_sorting module~pic_sorting->module~pic_optional_value module~pic_sorting_ord_sort pic_sorting_ord_sort module~pic_sorting->module~pic_sorting_ord_sort module~pic_sorting_radix_sort pic_sorting_radix_sort module~pic_sorting->module~pic_sorting_radix_sort module~pic_sorting_sort pic_sorting_sort module~pic_sorting->module~pic_sorting_sort module~pic_sorting_sort_index pic_sorting_sort_index module~pic_sorting->module~pic_sorting_sort_index module~pic_sorting_ord_sort->module~pic_optional_value module~pic_sorting_radix_sort->module~pic_optional_value module~pic_sorting_sort->module~pic_optional_value module~pic_sorting_sort_index->module~pic_optional_value module~pic_string_mod pic_string_mod module~pic_string_mod->module~pic_optional_value proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->module~pic_optional_value Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface pic_optional Overloaded interface for optional value retrieval, supported types are:\n- integer(int32), integer(int64), real(sp), real(dp), character(len=*), logical private pure function optional_int32 (input_value, default_value) result(output) Handle optional integer(int32) value Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in), optional :: input_value integer(kind=int32), intent(in) :: default_value Return Value integer(kind=int32) private pure function optional_int64 (input_value, default_value) result(output) Handle optional integer(int64) value Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in), optional :: input_value integer(kind=int64), intent(in) :: default_value Return Value integer(kind=int64) private pure function optional_sp (input_value, default_value) result(output) Handle optional real(sp) value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), optional :: input_value real(kind=sp), intent(in) :: default_value Return Value real(kind=sp) private pure function optional_dp (input_value, default_value) result(output) Handle optional real(dp) value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), optional :: input_value real(kind=dp), intent(in) :: default_value Return Value real(kind=dp) private pure function optional_char (input_value, default_value) result(output) Handle optional character(len=*) value Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: input_value character(len=*), intent(in) :: default_value Return Value character(len=:), allocatable private pure function optional_logical (input_value, default_value) result(output) Handle optional logical value Arguments Type Intent Optional Attributes Name logical, intent(in), optional :: input_value logical, intent(in) :: default_value Return Value logical Functions private pure function optional_char (input_value, default_value) result(output) Handle optional character(len=*) value Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: input_value character(len=*), intent(in) :: default_value Return Value character(len=:), allocatable private pure function optional_dp (input_value, default_value) result(output) Handle optional real(dp) value Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in), optional :: input_value real(kind=dp), intent(in) :: default_value Return Value real(kind=dp) private pure function optional_int32 (input_value, default_value) result(output) Handle optional integer(int32) value Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in), optional :: input_value integer(kind=int32), intent(in) :: default_value Return Value integer(kind=int32) private pure function optional_int64 (input_value, default_value) result(output) Handle optional integer(int64) value Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in), optional :: input_value integer(kind=int64), intent(in) :: default_value Return Value integer(kind=int64) private pure function optional_logical (input_value, default_value) result(output) Handle optional logical value Arguments Type Intent Optional Attributes Name logical, intent(in), optional :: input_value logical, intent(in) :: default_value Return Value logical private pure function optional_sp (input_value, default_value) result(output) Handle optional real(sp) value Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in), optional :: input_value real(kind=sp), intent(in) :: default_value Return Value real(kind=sp)","tags":"","url":"module/pic_optional_value.html"},{"title":"pic_sorting_radix_sort – PIC","text":"The generic subroutine implementing the LSD radix sort algorithm to return\n an input array with its elements sorted in order of (non-)decreasing\n value. Its use has the syntax: call radix_sort( array[, work, reverse] ) with the arguments: array: the rank 1 array to be sorted. It is an intent(inout) argument of any of the types integer(int8) , integer(int16) , integer(int32) , integer(int64) , real(real32) , real(real64) .\n   If both the type of array is real and at least one of the\n   elements is a NaN , then the ordering of the result is undefined.\n   Otherwise it is defined to be the original elements in\n   non-decreasing order. Especially, -0.0 is lesser than 0.0. work (optional): shall be a rank 1 array of the same type as array , and shall have at least size(array) elements. It is an intent(inout) argument to be used as buffer. Its value on return is\n   undefined. If it is not present, radix_sort will allocate a\n   buffer for use, and deallocate it before return. If you do several\n   similar radix_sort s, reusing the work array is a good parctice.\n   This argument is not present for int8_radix_sort because it use\n   counting sort, so no buffer is needed. reverse (optional): shall be a scalar of type default logical. It\n   is an intent(in) argument. If present with a value of .true. then array will be sorted in order of non-increasing values in stable\n   order. Otherwise index will sort array in order of non-decreasing\n   values in stable order. Example ... ! Read random data from a file call read_file ( 'dummy_file' , array ) ! Sort the random data call radix_sort ( array ) ... Uses pic_optional_value pic_types module~~pic_sorting_radix_sort~~UsesGraph module~pic_sorting_radix_sort pic_sorting_radix_sort module~pic_optional_value pic_optional_value module~pic_sorting_radix_sort->module~pic_optional_value module~pic_types pic_types module~pic_sorting_radix_sort->module~pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_sorting_radix_sort~~UsedByGraph module~pic_sorting_radix_sort pic_sorting_radix_sort module~pic_sorting pic_sorting module~pic_sorting->module~pic_sorting_radix_sort Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: radix_bits = 8 integer(kind=int32), private, parameter :: radix_bits_i32 = 8_int32 integer(kind=int64), private, parameter :: radix_bits_i64 = 8_int64 integer, private, parameter :: radix_mask = 255 integer(kind=int32), private, parameter :: radix_mask_i32 = 255_int32 integer(kind=int64), private, parameter :: radix_mask_i64 = 255_int64 Interfaces public        interface radix_sort The generic subroutine interface implementing the LSD radix sort algorithm,\nsee https://en.wikipedia.org/wiki/Radix_sort for more details.\nIt is always O(N) in sorting random data, but need a O(N) buffer.\n( Specification ) private module subroutine dp_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout), dimension(:), target :: array real(kind=dp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure module subroutine int32_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: array integer(kind=int32), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure module subroutine int64_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: array integer(kind=int64), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private module subroutine sp_radix_sort(array, work, reverse) Implementation → Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout), dimension(:), target :: array real(kind=sp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse Subroutines private module subroutine dp_radix_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout), dimension(:), target :: array real(kind=dp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure module subroutine int32_radix_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout), dimension(:) :: array integer(kind=int32), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure module subroutine int64_radix_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout), dimension(:) :: array integer(kind=int64), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse private pure subroutine radix_sort_u32_helper (N, arr, buf) Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: N integer(kind=int32), intent(inout), dimension(N) :: arr integer(kind=int32), intent(inout), dimension(N) :: buf private pure subroutine radix_sort_u64_helper (N, arr, buffer) Arguments Type Intent Optional Attributes Name integer(kind=int_index), intent(in) :: N integer(kind=int64), intent(inout), dimension(N) :: arr integer(kind=int64), intent(inout), dimension(N) :: buffer private module subroutine sp_radix_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout), dimension(:), target :: array real(kind=sp), intent(inout), optional, dimension(:), target :: work logical, intent(in), optional :: reverse","tags":"","url":"module/pic_sorting_radix_sort.html"},{"title":"pic_knowledge – PIC","text":"a simple module that collects phrases and prints them out randomly, like fortune Uses pic_types module~~pic_knowledge~~UsesGraph module~pic_knowledge pic_knowledge module~pic_types pic_types module~pic_knowledge->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines public  subroutine get_knowledge () I print random knowledge Arguments None","tags":"","url":"module/pic_knowledge.html"},{"title":"pic_mpi – PIC","text":"General MPI interface module Uses pic_types mpi_f08 module~~pic_mpi~~UsesGraph module~pic_mpi pic_mpi module~pic_types pic_types module~pic_mpi->module~pic_types mpi_f08 mpi_f08 module~pic_mpi->mpi_f08 iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial type( pic_comm_type ), public :: world_comm our world comm Derived Types type, public :: pic_comm_type custom data type that holds the MPI communicators Components Type Visibility Attributes Name Initial type(MPI_COMM), public :: comm use the MPI_COMM from the mpi_f08 module interface integer(kind=int32), public :: m_ierr integer(kind=int32), public :: m_rank MPI rank integer(kind=int32), public :: m_size MPI size Type-Bound Procedures procedure, public :: finalize => pic_comm_finalize procedure, public :: init => pic_comm_init Subroutines private  subroutine pic_comm_finalize (self) finalize the MPI library Arguments Type Intent Optional Attributes Name class( pic_comm_type ), intent(inout) :: self private  subroutine pic_comm_init (self) initilalize the MPI library and get the size and rank variables Arguments Type Intent Optional Attributes Name class( pic_comm_type ), intent(inout) :: self","tags":"","url":"module/pic_mpi.html"},{"title":"pic_sorting – PIC","text":"This module implements overloaded sorting subroutines named ORD_SORT , SORT_INDEX , and SORT , that each can be used to sort two kinds\nof INTEGER arrays, two kinds of REAL arrays, character(len=*) arrays By default sorting is in order of\nincreasing value, but there is an option to sort in decreasing order.\nAll the subroutines have worst case run time performance of O(N Ln(N)) ,\nbut on largely sorted data ORD_SORT and SORT_INDEX can have a run time\nperformance of O(N) . ORD_SORT is a translation of the \"Rust\" sort sorting algorithm in slice.rs :\nhttps://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs\nwhich in turn is inspired by the timsort algorithm of Tim Peters,\nhttp://svn.python.org/projects/python/trunk/Objects/listsort.txt. ORD_SORT is a hybrid stable comparison algorithm combining merge sort ,\nand insertion sort . It is always at worst O(N Ln(N)) in sorting random\ndata, having a performance about 25% slower than SORT on such\ndata, but has much better performance than SORT on partially\nsorted data, having O(N) performance on uniformly non-increasing or\nnon-decreasing data. SORT_INDEX is a modification of ORD_SORT so that in addition to\nsorting the input array, it returns the indices that map to a\nstable sort of the original array. These indices are\nintended to be used to sort data that is correlated with the input\narray, e.g., different arrays in a database, different columns of a\nrank 2 array, different elements of a derived type. It is less\nefficient than ORD_SORT at sorting a simple array. SORT uses the INTROSORT sorting algorithm of David Musser,\nhttp://www.cs.rpi.edu/~musser/gp/introsort.ps. introsort is a hybrid\nunstable comparison algorithm combining quicksort , insertion sort , and heap sort . While this algorithm is always O(N Ln(N)) it is relatively\nfast on randomly ordered data, but inconsistent in performance on partly\nsorted data, sometimes having merge sort performance, sometimes having\nbetter than quicksort performance. UNORD_SOORT is about 25%\nmore efficient than ORD_SORT at sorting purely random data, but af an\norder of Ln(N) less efficient at sorting partially sorted data. Uses pic_sorting_ord_sort pic_sorting_radix_sort pic_optional_value pic_sorting_sort_index pic_sorting_sort pic_types module~~pic_sorting~~UsesGraph module~pic_sorting pic_sorting module~pic_optional_value pic_optional_value module~pic_sorting->module~pic_optional_value module~pic_sorting_ord_sort pic_sorting_ord_sort module~pic_sorting->module~pic_sorting_ord_sort module~pic_sorting_radix_sort pic_sorting_radix_sort module~pic_sorting->module~pic_sorting_radix_sort module~pic_sorting_sort pic_sorting_sort module~pic_sorting->module~pic_sorting_sort module~pic_sorting_sort_index pic_sorting_sort_index module~pic_sorting->module~pic_sorting_sort_index module~pic_types pic_types module~pic_sorting->module~pic_types module~pic_optional_value->module~pic_types module~pic_sorting_ord_sort->module~pic_optional_value module~pic_sorting_ord_sort->module~pic_types module~pic_sorting_radix_sort->module~pic_optional_value module~pic_sorting_radix_sort->module~pic_types module~pic_sorting_sort->module~pic_optional_value module~pic_sorting_sort->module~pic_types module~pic_sorting_sort_index->module~pic_optional_value module~pic_sorting_sort_index->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","url":"module/pic_sorting.html"},{"title":"stdlib_pic_hash_32bit_fnv – PIC","text":"An implementation of the FNV hashes 1 and 1a of Glenn Fowler, Landon Curt\nNoll, and Kiem-Phong-Vo,\nhttps://en.wikipedia.org/wiki/Fowler–Noll–Vo_hash_function Uses pic_types iso_fortran_env module~~stdlib_pic_hash_32bit_fnv~~UsesGraph module~stdlib_pic_hash_32bit_fnv stdlib_pic_hash_32bit_fnv iso_fortran_env iso_fortran_env module~stdlib_pic_hash_32bit_fnv->iso_fortran_env module~pic_types pic_types module~stdlib_pic_hash_32bit_fnv->module~pic_types module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~stdlib_pic_hash_32bit_fnv~~UsedByGraph module~stdlib_pic_hash_32bit_fnv stdlib_pic_hash_32bit_fnv module~stdlib_pic_hash_32bit stdlib_pic_hash_32bit module~stdlib_pic_hash_32bit->module~stdlib_pic_hash_32bit_fnv Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, public, parameter :: int_hash = int32 logical, public, parameter :: little_endian = (1==transfer([1_int8, 0_int8], 0_int16)) integer, private, parameter :: bits_char = character_storage_size integer, private, parameter :: bits_int16 = bit_size(0_int16) integer, private, parameter :: bits_int32 = bit_size(0_int32) integer, private, parameter :: bits_int64 = bit_size(0_int64) integer, private, parameter :: bits_int8 = bit_size(0_int8) integer, private, parameter :: bytes_char = bits_char/bits_int8 integer, private, parameter :: bytes_int16 = bits_int16/bits_int8 integer, private, parameter :: bytes_int32 = bits_int32/bits_int8 integer, private, parameter :: bytes_int64 = bits_int64/bits_int8 integer, private, parameter :: bytes_int8 = bits_int8/bits_int8 integer(kind=int_hash), private, parameter :: offset_basis = int(z'811C9DC5', int_hash) The number of bits in the output hash integer(kind=int_hash), private, parameter :: prime = int(z'01000193', int_hash) The number of bits in the output hash Interfaces public        interface fnv_1_hash FNV_1 interfaces\n( Specification ) private elemental module function character_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for default character string keys Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) private pure module function int16_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int16 Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int32_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int32 Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int64_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int64 Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int8_fnv_1(key) result(hash_code) Implementation → FNV_1 hash function for rank 1 array keys of kind int8 Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash) public        interface fnv_1a_hash FNV_1A interfaces\n( Specification ) private elemental module function character_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for default character string keys Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) private pure module function int16_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int16 Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int32_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int32 Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int64_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int64 Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int8_fnv_1a(key) result(hash_value) Implementation → FNV_1A hash function for rank 1 array keys of kind int8 Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash) Functions private elemental module function character_fnv_1 (key) result(hash_code) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) private elemental module function character_fnv_1a (key) result(hash_code) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: key Return Value integer(kind=int_hash) private pure module function int16_fnv_1 (key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int16_fnv_1a (key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int16), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int32_fnv_1 (key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int32_fnv_1a (key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int64_fnv_1 (key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int64_fnv_1a (key) result(hash_code) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int8_fnv_1 (key) result(hash_code) The original FNV-1 8-bit key algorithm. Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash) private pure module function int8_fnv_1a (key) result(hash_code) The original FNV-1a 8-bit key algorithm. Arguments Type Intent Optional Attributes Name integer(kind=int8), intent(in) :: key (:) Return Value integer(kind=int_hash)","tags":"","url":"module/stdlib_pic_hash_32bit_fnv.html"},{"title":"pic_string_mod – PIC","text":"a simple string type with basic functionalities Uses pic_optional_value pic_types module~~pic_string_mod~~UsesGraph module~pic_string_mod pic_string_mod module~pic_optional_value pic_optional_value module~pic_string_mod->module~pic_optional_value module~pic_types pic_types module~pic_string_mod->module~pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface operator(/=) private pure function pic_string_ne_string (a, b) result(ok) return true if the two strings are not equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical private pure function pic_string_ne_char (a, c) result(ok) return true if the pic_string_type is not equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical private pure function char_ne_pic_string (c, a) result(ok) return true if the character string is not equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical public        interface operator(==) private pure function pic_string_eq_string (a, b) result(ok) return true if the two strings are equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical private pure function pic_string_eq_char (a, c) result(ok) return true if the pic_string_type is equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical private pure function char_eq_pic_string (c, a) result(ok) return true if the character string is equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical Derived Types type, public :: pic_string_type pic_string_type holds a dynamic string, intends to be similar to std::string in C++ Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: buf integer(kind=int64), public :: cap = 0_int64 integer(kind=int64), public :: len = 0_int64 Finalizations Procedures final :: pic_string_finalize Type-Bound Procedures procedure, public :: append => pic_string_append procedure, public :: assign => pic_string_assign procedure, public :: capacity => pic_string_capacity procedure, public :: clear => pic_string_clear procedure, public :: empty => pic_string_empty procedure, public :: ends_with => pic_string_ends_with procedure, public :: find => pic_string_find procedure, public :: get => pic_string_get procedure, public :: ltrim => pic_string_ltrim procedure, public :: push_back => pic_string_push_back procedure, public :: release => pic_string_release procedure, public :: reserve => pic_string_reserve procedure, public :: rtrim => pic_string_rtrim procedure, public :: set => pic_string_set procedure, public :: shrink_to_fit => pic_string_shrink_to_fit procedure, public :: size => pic_string_size procedure, public :: starts_with => pic_string_starts_with procedure, public :: substr => pic_string_substr procedure, public :: to_char => pic_string_to_char procedure, public :: trim => pic_string_trim Functions private pure function char_eq_pic_string (c, a) result(ok) return true if the character string is equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical private pure function char_ne_pic_string (c, a) result(ok) return true if the character string is not equal to the pic_string_type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c class( pic_string_type ), intent(in) :: a Return Value logical private pure function pic_string_capacity (self) result(res) return the current capacity of the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value integer(kind=int64) private pure function pic_string_empty (self) result(res) return true if the string is empty Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value logical private pure function pic_string_ends_with (self, pat) result(ok) return true if the string ends with the given pattern Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat Return Value logical private pure function pic_string_eq_char (a, c) result(ok) return true if the pic_string_type is equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical private pure function pic_string_eq_string (a, b) result(ok) return true if the two strings are equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical private pure function pic_string_find (self, pat, from) result(pos) find the first occurrence of pattern ‘pat’ in the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat integer(kind=int64), intent(in), optional :: from Return Value integer(kind=int64) private pure function pic_string_get (self, i) result(ch) get the character at position i (1-based) Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self integer(kind=int64), intent(in) :: i Return Value character(len=1) private pure function pic_string_ne_char (a, c) result(ok) return true if the pic_string_type is not equal to the character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a character(len=*), intent(in) :: c Return Value logical private pure function pic_string_ne_string (a, b) result(ok) return true if the two strings are not equal Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: a class( pic_string_type ), intent(in) :: b Return Value logical private pure function pic_string_size (self) result(res) return the current size of the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value integer(kind=int64) private pure function pic_string_starts_with (self, pat) result(ok) return true if the string starts with the given pattern Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self character(len=*), intent(in) :: pat Return Value logical private  function pic_string_substr (self, i, n) result(out) return a substring starting at index i (1-based) with length n Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self integer(kind=int64), intent(in) :: i integer(kind=int64), intent(in) :: n Return Value type( pic_string_type ) private  function pic_string_to_char (self) result(out) convert the pic_string_type to a standard Fortran character string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(in) :: self Return Value character(len=self) Subroutines private  subroutine ensure_capacity (self, need) helper routine to ensure that the string container has enough\ncapacity to hold a new size ‘need’ Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: need private  subroutine pic_string_append (self, s) append a string to the current string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=*), intent(in) :: s private  subroutine pic_string_assign (self, s) assign a new value to the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=*), intent(in) :: s private  subroutine pic_string_clear (self) clear the string content Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self private  subroutine pic_string_finalize (self) finalizer to deallocate the string buffer type Arguments Type Intent Optional Attributes Name type( pic_string_type ), intent(inout) :: self private  subroutine pic_string_ltrim (self) trim leading whitespace characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self private  subroutine pic_string_push_back (self, ch) append a single character to the current string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self character(len=1), intent(in) :: ch private  subroutine pic_string_release (self) release the internal buffer and reset the string Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self private  subroutine pic_string_reserve (self, n) ensure the string has capacity for at least n characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: n private  subroutine pic_string_rtrim (self) trim trailing whitespace characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self private  subroutine pic_string_set (self, i, ch) set the character at position i (1-based) Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self integer(kind=int64), intent(in) :: i character(len=1), intent(in) :: ch private  subroutine pic_string_shrink_to_fit (self) shrink the capacity to fit the current size Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self private  subroutine pic_string_trim (self) trim leading and trailing whitespace characters Arguments Type Intent Optional Attributes Name class( pic_string_type ), intent(inout) :: self","tags":"","url":"module/pic_string_mod.html"},{"title":"pic_types – PIC","text":"main module for defining types for integer and double precision Uses iso_fortran_env module~~pic_types~~UsesGraph module~pic_types pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_types~~UsedByGraph module~pic_types pic_types module~pic_array pic_array module~pic_array->module~pic_types module~pic_optional_value pic_optional_value module~pic_array->module~pic_optional_value module~pic_string pic_string module~pic_array->module~pic_string module~pic_blas_interfaces pic_blas_interfaces module~pic_blas_interfaces->module~pic_types module~pic_command_line pic_command_line module~pic_command_line->module~pic_types module~pic_constants pic_constants module~pic_constants->module~pic_types module~pic_device pic_device module~pic_device->module~pic_types module~pic_flop_rate pic_flop_rate module~pic_flop_rate->module~pic_types module~pic_flop_recorder pic_flop_recorder module~pic_flop_rate->module~pic_flop_recorder module~pic_flop_rate->module~pic_string module~pic_timer pic_timer module~pic_flop_rate->module~pic_timer module~pic_flop_recorder->module~pic_types module~pic_global_definitions pic_global_definitions module~pic_global_definitions->module~pic_types module~pic_knowledge pic_knowledge module~pic_knowledge->module~pic_types module~pic_logger pic_logger module~pic_logger->module~pic_types module~pic_logger->module~pic_global_definitions module~pic_mpi pic_mpi module~pic_mpi->module~pic_types module~pic_optional_value->module~pic_types module~pic_output_helpers pic_output_helpers module~pic_output_helpers->module~pic_types module~pic_sorting pic_sorting module~pic_sorting->module~pic_types module~pic_sorting->module~pic_optional_value module~pic_sorting_ord_sort pic_sorting_ord_sort module~pic_sorting->module~pic_sorting_ord_sort module~pic_sorting_radix_sort pic_sorting_radix_sort module~pic_sorting->module~pic_sorting_radix_sort module~pic_sorting_sort pic_sorting_sort module~pic_sorting->module~pic_sorting_sort module~pic_sorting_sort_index pic_sorting_sort_index module~pic_sorting->module~pic_sorting_sort_index module~pic_sorting_ord_sort->module~pic_types module~pic_sorting_ord_sort->module~pic_optional_value module~pic_sorting_radix_sort->module~pic_types module~pic_sorting_radix_sort->module~pic_optional_value module~pic_sorting_sort->module~pic_types module~pic_sorting_sort->module~pic_optional_value module~pic_sorting_sort_index->module~pic_types module~pic_sorting_sort_index->module~pic_optional_value module~pic_string->module~pic_types module~pic_string_mod pic_string_mod module~pic_string_mod->module~pic_types module~pic_string_mod->module~pic_optional_value module~pic_test_helpers pic_test_helpers module~pic_test_helpers->module~pic_types module~pic_test_helpers->module~pic_global_definitions module~pic_timer->module~pic_types module~pic_timer->module~pic_string module~stdlib_pic_hash_32bit stdlib_pic_hash_32bit module~stdlib_pic_hash_32bit->module~pic_types module~stdlib_pic_hash_32bit_fnv stdlib_pic_hash_32bit_fnv module~stdlib_pic_hash_32bit->module~stdlib_pic_hash_32bit_fnv module~stdlib_pic_hash_32bit_fnv->module~pic_types proc~pic_string_find pic_string_type%pic_string_find proc~pic_string_find->module~pic_optional_value Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, public, parameter :: default_complex = dp default complex is double precision integer, public, parameter :: default_int = int32 the default integer kind in PIC is int32 which faciliates the interfaces to MPI\npay special attention if linking PIC to a code that use default int size of 8 integer, public, parameter :: default_real = dp naturally, our default real is double precision integer, public, parameter :: dp = SELECTED_REAL_KIND(15, 307) double precision size integer, public, parameter :: int_index = int64 Integer kind for indexing integer, public, parameter :: int_index_low = int32 Integer kind for indexing using less than huge(1_int32) values integer, public, parameter :: qp = SELECTED_REAL_KIND(33, 4931) quadruple precision size, varies by compiler integer, public, parameter :: sp = SELECTED_REAL_KIND(6, 37) single precision size","tags":"","url":"module/pic_types.html"},{"title":"pic_sorting_sort – PIC","text":"This submodule implements the overloaded sorting subroutine SORT that can be used to sort four kinds of INTEGER arrays and three kinds\n of REAL arrays. Sorting is in order of increasing value, with the worst\n case run time performance of O(N Ln(N)) . SORT uses the INTROSORT sorting algorithm of David Musser,\n http://www.cs.rpi.edu/~musser/gp/introsort.ps. introsort is a hybrid\n unstable comparison algorithm combining quicksort , insertion sort , and heap sort . While this algorithm is always O(N Ln(N)) it is relatively\n fast on randomly ordered data, but inconsistent in performance on partly\n sorted data, sometimes having merge sort performance, sometimes having\n better than quicksort performance. The generic subroutine implementing the SORT algorithm to return\n an input array with its elements sorted in order of (non-)decreasing\n value. Its use has the syntax: call sort( array[, reverse] ) with the arguments: array: the rank 1 array to be sorted. It is an intent(inout) argument of any of the types integer(int8) , integer(int16) , integer(int32) , integer(int64) , real(real32) , real(real64) , real(real128) , character(*) , type(string_type) , type(bitset_64) , type(bitset_large) . If both the type\n   of array is real and at least one of the elements is a NaN , then\n   the ordering of the result is undefined. Otherwise it is defined to be the\n   original elements in non-decreasing order. reverse (optional): shall be a scalar of type default logical. It\n   is an intent(in) argument. If present with a value of .true. then array will be sorted in order of non-increasing values in unstable\n   order. Otherwise index will sort array in order of non-decreasing\n   values in unstable order. Example ... ! Read random data from a file call read_file ( 'dummy_file' , array ) ! Sort the random data call sort ( array ) ! Process the sorted data call array_search ( array , values ) ... Uses pic_optional_value pic_types module~~pic_sorting_sort~~UsesGraph module~pic_sorting_sort pic_sorting_sort module~pic_optional_value pic_optional_value module~pic_sorting_sort->module~pic_optional_value module~pic_types pic_types module~pic_sorting_sort->module~pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_sorting_sort~~UsedByGraph module~pic_sorting_sort pic_sorting_sort module~pic_sorting pic_sorting module~pic_sorting->module~pic_sorting_sort Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface sort The generic subroutine interface implementing the SORT algorithm, based\non the introsort of David Musser.\n( Specification ) private pure module subroutine char_sort(array, reverse) Implementation → char_sort( array[, reverse] ) sorts the input ARRAY of type character(len=*) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine dp_sort(array, reverse) Implementation → dp_sort( array[, reverse] ) sorts the input ARRAY of type real(dp) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine int32_sort(array, reverse) Implementation → int32_sort( array[, reverse] ) sorts the input ARRAY of type integer(int32) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine int64_sort(array, reverse) Implementation → int64_sort( array[, reverse] ) sorts the input ARRAY of type integer(int64) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure module subroutine sp_sort(array, reverse) Implementation → sp_sort( array[, reverse] ) sorts the input ARRAY of type real(sp) using a hybrid sort based on the introsort of David Musser.\nThe algorithm is of order O(N Ln(N)) for all inputs.\nBecause it relies on quicksort , the coefficient of the O(N Ln(N))\nbehavior is small for random data compared to other sorting algorithms. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse Subroutines private pure subroutine char_decrease_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) private pure subroutine char_increase_sort (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) private pure module subroutine char_sort (array, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure subroutine dp_decrease_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) private pure subroutine dp_increase_sort (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) private pure module subroutine dp_sort (array, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure subroutine int32_decrease_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) private pure subroutine int32_increase_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) private pure module subroutine int32_sort (array, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure subroutine int64_decrease_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) private pure subroutine int64_increase_sort (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) private pure module subroutine int64_sort (array, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) logical, intent(in), optional :: reverse private pure subroutine sp_decrease_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) private pure subroutine sp_increase_sort (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) private pure module subroutine sp_sort (array, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) logical, intent(in), optional :: reverse","tags":"","url":"module/pic_sorting_sort.html"},{"title":"pic_array – PIC","text":"Please do not modify this file to implement new methods, please go look at tools/autogen/pic_array_cpu.fypp\nand edit the generator. Uses pic_string pic_optional_value pic_types module~~pic_array~~UsesGraph module~pic_array pic_array module~pic_optional_value pic_optional_value module~pic_array->module~pic_optional_value module~pic_string pic_string module~pic_array->module~pic_string module~pic_types pic_types module~pic_array->module~pic_types module~pic_optional_value->module~pic_types module~pic_string->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), public, parameter :: ASCENDING = 1 integer(kind=default_int), public, parameter :: DESCENDING = 2 integer(kind=default_int), private, parameter :: block_size = 32 This is the size to block over for matrices for performance purposes character(len=5), private, parameter :: default_format = \"NUMPY\" supported formats: NUMPY, MATHEMATICA, and PLAIN which resembles numpy character(len=*), private, parameter :: fmt_edge = \"(A)\" character(len=*), private, parameter :: fmt_in = '(A, \", \")' logical, private :: use_threaded_default = .false. Interfaces public        interface copy copy provides a blas-less implementation of xcopy where x is (i,s,d) icopy, scopy, dcopy\nif you built pic with BLAS use the copy interface provided there, I will not beat BLAS\ncopy is implemented for (int32, int64, sp, dp) for 1 and 2d arrays of the same types Usage: call copy(destination, source, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to .true. Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism private  subroutine copy_vector_int32 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:) integer(kind=int32), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_int64 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:) integer(kind=int64), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_sp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:) real(kind=sp), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_dp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:) real(kind=dp), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_int32 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:,:) integer(kind=int32), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_int64 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:,:) integer(kind=int64), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_sp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:,:) real(kind=sp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_dp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:,:) real(kind=dp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded public        interface fill fill provides a generic interface to assing a value\nalpha of types (int32, int64, sp, dp) as defined in pic_types.F90\nThe inteface supports filling 1d and 2d arrays of the specified\nvariables Usage: call fill(array, value, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to .true. Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism private  subroutine fill_vector_int32 (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: vector (:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_int64 (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: vector (:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_sp (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: vector (:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_dp (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: vector (:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_int32 (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: matrix (:,:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_int64 (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: matrix (:,:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_sp (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: matrix (:,:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_dp (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: matrix (:,:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded public        interface is_sorted is_sorted provides a simple way to checking if a 1d array is sorted\nit is implemented for int32, int64, sp, and dp datatypes. The default\nis to check if an array is sorted in ascending fashion. Usage: result = is_sorted(array, [optional] ASCENDING/DESCENDING) private pure function is_sorted_int32 (array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_int64 (array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_sp (array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_dp (array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_char (array, order) result(sorted) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical public        interface pic_print_array Generic interface for printing arrays of different types Usage: call print_array_v2(array, [optional] format)\nWhere format can be: NUMPY, PLAIN, MATHEMATICA (can use lower caps) Implemented types are: array(:)   -> int32, int64, sp, dp array(:,:) -> int32, int64, sp, dp array(:) (packed matrix) -> sp, dp array(:,:,:) -> sp, dp private  subroutine print_vector_int32 (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_int64 (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_sp (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_dp (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_int32 (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_int64 (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_sp (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_dp (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_int32 (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_int64 (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_sp (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_dp (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_int32 (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_int64 (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_sp (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_dp (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type public        interface pic_scramble_array private  subroutine scramble_array_int32 (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (:) private  subroutine scramble_array_int64 (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (:) private  subroutine scramble_array_sp (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (:) private  subroutine scramble_array_dp (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (:) private  subroutine scramble_array_character (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (:) public        interface pic_sum pic_sum provides a threaded alternative to the sum(array) Fortran intrinsic which will\nbe too slow for large sizes of vectors and matrices. Note that this provides the total\nsum. As opposed to the blas alternative XASUM which does the absolute sum pic_sum is implemented for (int32, int64, sp, dp) 1 and 2d arrays Usage: result = pic_sum(array, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to true Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism private  function sum_vector_int32 (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) private  function sum_vector_int64 (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) private  function sum_vector_sp (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=sp) private  function sum_vector_dp (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=dp) private  function sum_matrix_int32 (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) private  function sum_matrix_int64 (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) private  function sum_matrix_sp (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=sp) private  function sum_matrix_dp (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=dp) public        interface pic_transpose pic_transpose provides a blas-less, threaded alternative to the Fortran transpose intrinsic\nwhich will be slow for large matrix sizes. pic_transpose does not assume symmetric matrices pic_transpose is implemented for (int32, int64, sp, dp) 2d arrays Usage: call pic_transpose(matrix_to_transpose, result, [optional] threaded) This subroutine is threaded for performance purposes if threaded is set to true Note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism private  subroutine transpose_matrix_int32 (A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: A (:,:) integer(kind=int32), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_int64 (A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: A (:,:) integer(kind=int64), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_sp (A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_dp (A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private        interface get_threading_mode get_threading_mode returns the current threading mode for the array routines\nUsage: mode = get_threading_mode() private  interface get_threading_mode () get_threading_mode returns the current threading mode for the array routines\nUsage: mode = get_threading_mode() Arguments None private        interface set_threading_mode set_threading sets the threading mode for the array routines\nthis will set the use_threaded variable to true or false depending on the input\nUsage: call set_threading_mode(.true.) or call set_threading_mode(.false.) private  interface set_threading_mode () set_threading sets the threading mode for the array routines\nthis will set the use_threaded variable to true or false depending on the input\nUsage: call set_threading_mode(.true.) or call set_threading_mode(.false.) Arguments None Functions public  function get_threading_mode () result(mode) get the current threading mode for the array routines\nUsage: mode = get_threading_mode() Arguments None Return Value logical private pure function is_sorted_char (array, order) result(sorted) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_dp (array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_int32 (array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_int64 (array, order) result(sorted) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private pure function is_sorted_sp (array, order) result(sorted) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) integer(kind=default_int), intent(in), optional :: order Return Value logical private  function sum_matrix_dp (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=dp) private  function sum_matrix_int32 (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) private  function sum_matrix_int64 (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) private  function sum_matrix_sp (matrix, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) logical, intent(in), optional :: threaded Return Value real(kind=sp) private  function sum_vector_dp (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=dp) private  function sum_vector_int32 (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int32) private  function sum_vector_int64 (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value integer(kind=int64) private  function sum_vector_sp (vector, threaded) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) logical, intent(in), optional :: threaded Return Value real(kind=sp) Subroutines public  subroutine set_threading_mode (threaded) set the threading mode for the array routines, this will set the use_threaded variable\nto true or false depending on the input Read more… Arguments Type Intent Optional Attributes Name logical, intent(in) :: threaded private  subroutine copy_matrix_dp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:,:) real(kind=dp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_int32 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:,:) integer(kind=int32), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_int64 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:,:) integer(kind=int64), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_matrix_sp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:,:) real(kind=sp), intent(in) :: source (:,:) logical, intent(in), optional :: threaded private  subroutine copy_vector_dp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: dest (:) real(kind=dp), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_int32 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: dest (:) integer(kind=int32), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_int64 (dest, source, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: dest (:) integer(kind=int64), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine copy_vector_sp (dest, source, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: dest (:) real(kind=sp), intent(in) :: source (:) logical, intent(in), optional :: threaded private  subroutine fill_matrix_dp (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: matrix (:,:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_int32 (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: matrix (:,:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_int64 (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: matrix (:,:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_matrix_sp (matrix, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: matrix (:,:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_dp (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: vector (:) real(kind=dp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_int32 (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: vector (:) integer(kind=int32), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_int64 (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: vector (:) integer(kind=int64), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine fill_vector_sp (vector, alpha, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: vector (:) real(kind=sp), intent(in) :: alpha logical, intent(in), optional :: threaded private  subroutine print_3d_tensor_dp (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_int32 (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_int64 (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_3d_tensor_sp (matrix, format_type) Print a 3D tensor of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_dp (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_int32 (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_int64 (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_matrix_sp (matrix, format_type) print a matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: matrix (:,:) character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_dp (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_int32 (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_int64 (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_packed_matrix_sp (packed, n_elements, format_type) Print a packed lower triangular matrix of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: packed (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type private  subroutine print_vector_dp (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_int32 (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_int64 (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine print_vector_sp (vector, format_type) print a vector of  values Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: vector (:) character(len=*), intent(in), optional :: format_type private  subroutine scramble_array_character (array) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (:) private  subroutine scramble_array_dp (array) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (:) private  subroutine scramble_array_int32 (array) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (:) private  subroutine scramble_array_int64 (array) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (:) private  subroutine scramble_array_sp (array) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (:) private  subroutine set_brackets (format_type, open_bracket, close_bracket) Set brackets based on output format type Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: format_type character(len=1), intent(out) :: open_bracket character(len=1), intent(out) :: close_bracket private  subroutine transpose_matrix_dp (A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: A (:,:) real(kind=dp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_int32 (A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: A (:,:) integer(kind=int32), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_int64 (A, B, threaded) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: A (:,:) integer(kind=int64), intent(out) :: B (:,:) logical, intent(in), optional :: threaded private  subroutine transpose_matrix_sp (A, B, threaded) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: A (:,:) real(kind=sp), intent(out) :: B (:,:) logical, intent(in), optional :: threaded","tags":"","url":"module/pic_array.html"},{"title":"pic_sorting_sort_index – PIC","text":"The generic subroutine implementing the SORT_INDEX algorithm to\n return an index array whose elements would sort the input array in the\n desired direction. It is primarily intended to be used to sort a\n derived type array based on the values of a component of the array.\n Its use has the syntax: call sort_index( array, index[, work, iwork, reverse ] ) with the arguments: array: the rank 1 array to be sorted. It is an intent(inout) argument of any of the types integer(int8) , integer(int16) , integer(int32) , integer(int64) , real(real32) , real(real64) , real(real128) , character(*) , type(string_type) , type(bitset_64) , type(bitset_large) . If both the\n   type of array is real and at least one of the elements is a NaN ,\n   then the ordering of the array and index results is undefined.\n   Otherwise it is defined to be as specified by reverse. index: a rank 1 array of sorting indices. It is an intent(out) argument of the type integer(int_index) . Its size shall be the\n   same as array . On return, if defined, its elements would\n   sort the input array in the direction specified by reverse . work (optional): shall be a rank 1 array of the same type as array , and shall have at least size(array)/2 elements. It is an intent(out) argument to be used as “scratch” memory\n   for internal record keeping. If associated with an array in static\n   storage, its use can significantly reduce the stack memory requirements\n   for the code. Its value on return is undefined. iwork (optional): shall be a rank 1 integer array of kind int_index ,\n   and shall have at least size(array)/2 elements. It is an intent(out) argument to be used as “scratch” memory\n   for internal record keeping. If associated with an array in static\n   storage, its use can significantly reduce the stack memory requirements\n   for the code. Its value on return is undefined. reverse (optional): shall be a scalar of type default logical. It\n   is an intent(in) argument. If present with a value of .true. then index will sort array in order of non-increasing values in stable\n   order. Otherwise index will sort array in order of non-decreasing\n   values in stable order. Examples Sorting a related rank one array: subroutine sort_related_data ( a , b , work , index , iwork ) ! Sort `b` in terms or its related array `a` integer , intent ( inout ) :: a (:) integer ( int32 ), intent ( inout ) :: b (:) ! The same size as a integer ( int32 ), intent ( out ) :: work (:) integer ( int_index ), intent ( out ) :: index (:) integer ( int_index ), intent ( out ) :: iwork (:) ! Find the indices to sort a call sort_index ( a , index ( 1 : size ( a )),& work ( 1 : size ( a ) / 2 ), iwork ( 1 : size ( a ) / 2 )) ! Sort b based on the sorting of a b (:) = b ( index ( 1 : size ( a )) ) end subroutine sort_related_data Sorting a rank 2 array based on the data in a column subroutine sort_related_data ( array , column , work , index , iwork ) ! Sort `a_data` in terms or its component `a` integer , intent ( inout ) :: a (:,:) integer ( int32 ), intent ( in ) :: column integer ( int32 ), intent ( out ) :: work (:) integer ( int_index ), intent ( out ) :: index (:) integer ( int_index ), intent ( out ) :: iwork (:) integer , allocatable :: dummy (:) integer :: i allocate ( dummy ( size ( a , dim = 1 ))) ! Extract a component of `a_data` dummy (:) = a (:, column ) ! Find the indices to sort the column call sort_index ( dummy , index ( 1 : size ( dummy )),& work ( 1 : size ( dummy ) / 2 ), iwork ( 1 : size ( dummy ) / 2 )) ! Sort a based on the sorting of its column do i = 1 , size ( a , dim = 2 ) a (:, i ) = a ( index ( 1 : size ( a , dim = 1 )), i ) end do end subroutine sort_related_data Sorting an array of a derived type based on the dsta in one component subroutine sort_a_data ( a_data , a , work , index , iwork ) ! Sort `a_data` in terms or its component `a` type ( a_type ), intent ( inout ) :: a_data (:) integer ( int32 ), intent ( inout ) :: a (:) integer ( int32 ), intent ( out ) :: work (:) integer ( int_index ), intent ( out ) :: index (:) integer ( int_index ), intent ( out ) :: iwork (:) ! Extract a component of `a_data` a ( 1 : size ( a_data )) = a_data (:) % a ! Find the indices to sort the component call sort_index ( a ( 1 : size ( a_data )), index ( 1 : size ( a_data )),& work ( 1 : size ( a_data ) / 2 ), iwork ( 1 : size ( a_data ) / 2 )) ! Sort a_data based on the sorting of that component a_data (:) = a_data ( index ( 1 : size ( a_data )) ) end subroutine sort_a_data Uses pic_optional_value pic_types module~~pic_sorting_sort_index~~UsesGraph module~pic_sorting_sort_index pic_sorting_sort_index module~pic_optional_value pic_optional_value module~pic_sorting_sort_index->module~pic_optional_value module~pic_types pic_types module~pic_sorting_sort_index->module~pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_sorting_sort_index~~UsedByGraph module~pic_sorting_sort_index pic_sorting_sort_index module~pic_sorting pic_sorting module~pic_sorting->module~pic_sorting_sort_index Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: max_merge_stack = int(ceiling(log(2._dp**64)/log(1.6180339887_dp))) Interfaces public        interface sort_index The generic subroutine interface implementing the SORT_INDEX algorithm,\nbased on the \"Rust\" sort algorithm found in slice.rs https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159\nbut modified to return an array of indices that would provide a stable\nsort of the rank one ARRAY input. The indices by default correspond to a\nnon-decreasing sort, but if the optional argument REVERSE is present\nwith a value of .TRUE. the indices correspond to a non-increasing sort. private module subroutine char_sort_index_default(array, index, work, iwork, reverse) Implementation → char_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type character(len=*) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine char_sort_index_low(array, index, work, iwork, reverse) Implementation → char_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type character(len=*) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine dp_sort_index_default(array, index, work, iwork, reverse) Implementation → dp_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(dp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine dp_sort_index_low(array, index, work, iwork, reverse) Implementation → dp_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(dp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int32_sort_index_default(array, index, work, iwork, reverse) Implementation → int32_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int32) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int32_sort_index_low(array, index, work, iwork, reverse) Implementation → int32_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int32) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int64_sort_index_default(array, index, work, iwork, reverse) Implementation → int64_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int64) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int64_sort_index_low(array, index, work, iwork, reverse) Implementation → int64_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type integer(int64) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine sp_sort_index_default(array, index, work, iwork, reverse) Implementation → sp_sort_index_default( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(sp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine sp_sort_index_low(array, index, work, iwork, reverse) Implementation → sp_sort_index_low( array, index[, work, iwork, reverse] ) sorts\nan input ARRAY of type real(sp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs and returns the sorted ARRAY and an array INDEX of indices in the\norder that would sort the input ARRAY in the desired direction. Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse Derived Types type, private :: run_type Used to pass state around in a stack among helper functions for the ORD_SORT and SORT_INDEX algorithms Components Type Visibility Attributes Name Initial integer(kind=int_index), public :: base = 0 integer(kind=int_index), public :: len = 0 Subroutines private module subroutine char_sort_index_default (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine char_sort_index_low (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) character(len=len), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine dp_sort_index_default (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine dp_sort_index_low (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=dp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int32_sort_index_default (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int32_sort_index_low (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int32), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int64_sort_index_default (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine int64_sort_index_low (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) integer(kind=int64), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine sp_sort_index_default (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse private module subroutine sp_sort_index_low (array, index, work, iwork, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) integer(kind=int_index_low), intent(out) :: index (0:) real(kind=sp), intent(out), optional :: work (0:) integer(kind=int_index_low), intent(out), optional :: iwork (0:) logical, intent(in), optional :: reverse","tags":"","url":"module/pic_sorting_sort_index.html"},{"title":"pic_timer – PIC","text":"contains a simple timer module to measure and record time Uses pic_string pic_types module~~pic_timer~~UsesGraph module~pic_timer pic_timer module~pic_string pic_string module~pic_timer->module~pic_string module~pic_types pic_types module~pic_timer->module~pic_types module~pic_string->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_timer~~UsedByGraph module~pic_timer pic_timer module~pic_flop_rate pic_flop_rate module~pic_flop_rate->module~pic_timer Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: pic_timer_type derived type for a timer, contains the start, stop, and count variables\ncan work with or without omp. If PIC is compiled with OpenMP the default\ntimer will be the omp time. This is mostly to minimize problems with threading\nand system clock Components Type Visibility Attributes Name Initial integer(kind=default_int), private :: count_rate = 1_default_int logical, private :: is_running = .false. integer(kind=default_int), private :: start_count = 0_default_int real(kind=dp), private :: start_time = 0.0_dp integer(kind=default_int), private :: stop_count = 0_default_int real(kind=dp), private :: stop_time = 0.0_dp real(kind=dp), private :: walltime Type-Bound Procedures procedure, public, non_overridable :: get_elapsed_time => timer_get_elapsed_time procedure, public, non_overridable :: print_time => timer_print_time procedure, public, non_overridable :: start => timer_start procedure, public, non_overridable :: stop => timer_stop Functions private  function timer_get_elapsed_time (self) result(elapsed) Returns the elapsed time as a real(dp) variable Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(in) :: self Return Value real(kind=dp) Subroutines private  subroutine timer_print_time (self) Prints the elapsed time at the time of calling Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(in) :: self private  subroutine timer_start (self) starts the timer. If OMP is enabled, it will use omp_get_wtime()\nif not, it will use Fortran’s system_clock Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(inout) :: self private  subroutine timer_stop (self) stop the timer. If OMP is enabled, it will use omp_get_wtime()\nif not, it will use Fortran’s system_clock Read more… Arguments Type Intent Optional Attributes Name class( pic_timer_type ), intent(inout) :: self","tags":"","url":"module/pic_timer.html"},{"title":"pic_sorting_ord_sort – PIC","text":"The generic subroutine implementing the ORD_SORT algorithm to return\n an input array with its elements sorted in order of (non-)decreasing\n value. Its use has the syntax: call ord_sort( array[, work, reverse] ) with the arguments: array: the rank 1 array to be sorted. It is an intent(inout) argument of any of the types integer(int8) , integer(int16) , integer(int32) , integer(int64) , real(real32) , real(real64) , real(real128) , character(*) , type(string_type) , type(bitset_64) , type(bitset_large) . If both the\n   type of array is real and at least one of the elements is a NaN , then the ordering of the result is undefined. Otherwise it\n   is defined to be the original elements in non-decreasing order. work (optional): shall be a rank 1 array of the same type as array , and shall have at least size(array)/2 elements. It is an intent(out) argument to be used as “scratch” memory\n   for internal record keeping. If associated with an array in static\n   storage, its use can significantly reduce the stack memory requirements\n   for the code. Its value on return is undefined. reverse (optional): shall be a scalar of type default logical. It\n   is an intent(in) argument. If present with a value of .true. then array will be sorted in order of non-increasing values in stable\n   order. Otherwise index will sort array in order of non-decreasing\n   values in stable order. Example ... ! Read arrays from sorted files call read_sorted_file ( 'dummy_file1' , array1 ) call read_sorted_file ( 'dummy_file2' , array2 ) ! Concatenate the arrays allocate ( array ( size ( array1 ) + size ( array2 ) ) ) array ( 1 : size ( array1 ) ) = array1 (:) array ( size ( array1 ) + 1 : size ( array1 ) + size ( array2 ) ) = array2 (:) ! Sort the resulting array call ord_sort ( array , work ) ! Process the sorted array call array_search ( array , values ) ... Uses pic_optional_value pic_types module~~pic_sorting_ord_sort~~UsesGraph module~pic_sorting_ord_sort pic_sorting_ord_sort module~pic_optional_value pic_optional_value module~pic_sorting_ord_sort->module~pic_optional_value module~pic_types pic_types module~pic_sorting_ord_sort->module~pic_types module~pic_optional_value->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_sorting_ord_sort~~UsedByGraph module~pic_sorting_ord_sort pic_sorting_ord_sort module~pic_sorting pic_sorting module~pic_sorting->module~pic_sorting_ord_sort Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer, private, parameter :: max_merge_stack = int(ceiling(log(2._dp**64)/log(1.6180339887_dp))) Interfaces public        interface ord_sort The generic subroutine interface implementing the ORD_SORT algorithm,\na translation to Fortran 2008, of the \"Rust\" sort algorithm found in slice.rs https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ORD_SORT is a hybrid stable comparison algorithm combining merge sort ,\nand insertion sort . It is always at worst O(N Ln(N)) in sorting random\ndata, having a performance about 25% slower than SORT on such\ndata, but has much better performance than SORT on partially\nsorted data, having O(N) performance on uniformly non-increasing or\nnon-decreasing data. private module subroutine char_ord_sort(array, work, reverse) Implementation → char_ord_sort( array ) sorts the input ARRAY of type character(len=*) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine dp_ord_sort(array, work, reverse) Implementation → dp_ord_sort( array ) sorts the input ARRAY of type real(dp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine int32_ord_sort(array, work, reverse) Implementation → int32_ord_sort( array ) sorts the input ARRAY of type integer(int32) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine int64_ord_sort(array, work, reverse) Implementation → int64_ord_sort( array ) sorts the input ARRAY of type integer(int64) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private module subroutine sp_ord_sort(array, work, reverse) Implementation → sp_ord_sort( array ) sorts the input ARRAY of type real(sp) using a hybrid sort based on the \"Rust\" sort algorithm found in slice.rs Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse Derived Types type, private :: run_type Used to pass state around in a stack among helper functions for the ORD_SORT and SORT_INDEX algorithms Components Type Visibility Attributes Name Initial integer(kind=int_index), public :: base = 0 integer(kind=int_index), public :: len = 0 Subroutines private  subroutine char_decrease_ord_sort (array, work) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) private  subroutine char_increase_ord_sort (array, work) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) private module subroutine char_ord_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name character(len=*), intent(inout) :: array (0:) character(len=len), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private  subroutine dp_decrease_ord_sort (array, work) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) private  subroutine dp_increase_ord_sort (array, work) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) private module subroutine dp_ord_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(inout) :: array (0:) real(kind=dp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private  subroutine int32_decrease_ord_sort (array, work) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) private  subroutine int32_increase_ord_sort (array, work) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) private module subroutine int32_ord_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(inout) :: array (0:) integer(kind=int32), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private  subroutine int64_decrease_ord_sort (array, work) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) private  subroutine int64_increase_ord_sort (array, work) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) private module subroutine int64_ord_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(inout) :: array (0:) integer(kind=int64), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse private  subroutine sp_decrease_ord_sort (array, work) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) private  subroutine sp_increase_ord_sort (array, work) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) private module subroutine sp_ord_sort (array, work, reverse) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(inout) :: array (0:) real(kind=sp), intent(out), optional :: work (0:) logical, intent(in), optional :: reverse","tags":"","url":"module/pic_sorting_ord_sort.html"},{"title":"pic_string – PIC","text":"General string utilities Uses pic_types module~~pic_string~~UsesGraph module~pic_string pic_string module~pic_types pic_types module~pic_string->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_string~~UsedByGraph module~pic_string pic_string module~pic_array pic_array module~pic_array->module~pic_string module~pic_flop_rate pic_flop_rate module~pic_flop_rate->module~pic_string module~pic_timer pic_timer module~pic_flop_rate->module~pic_timer module~pic_timer->module~pic_string Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), private, parameter :: default_dp_precision = 12 integer(kind=default_int), private, parameter :: default_sp_precision = 6 integer(kind=default_int), private :: dp_precision = default_dp_precision integer(kind=default_int), private :: sp_precision = default_sp_precision Interfaces public        interface to_string converts a variable of type (int32, int64, sp, dp, char, logical)\nto a “string” which is just a collecting of chars. Usage result = to_string(variable) Note the functions here are not elemental so they won’t work for\narrays. Please use pic_print_array_v2 module for this private  function to_string_int32 (i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable private  function to_string_int64 (i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable private  function to_string_sp (r) result(trimmed_str) transform a real(sp) to a string Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: r Return Value character(len=:), allocatable private  function to_string_dp (r) result(trimmed_str) transform a real(dp) to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable private  function to_string_char (c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable private  function to_string_logical (l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable private  function to_string_vector_int32 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_int64 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_sp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_dp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_matrix_int32 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_int64 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_sp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_dp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:,:) Return Value character(len=:), allocatable private        interface get_precision Obtain the current precision being used to print variables to strings Usage: precision = get_precision() returns a default_int result private  interface get_precision () Obtain the current precision being used to print variables to strings Usage: precision = get_precision() returns a default_int result Arguments None private        interface pad adds a number X of spaces to the left of a “string” whcih is just a\ncollection of characters. Mostly used for nice printing Usage: var = pad(“hello”, n_spaces) private  interface pad () adds a number X of spaces to the left of a “string” whcih is just a\ncollection of characters. Mostly used for nice printing Usage: var = pad(“hello”, n_spaces) Arguments None private        interface set_precision This routine overrides the default dp precision used for\nprinting strings in the to_string function, the default\nis : integer(default_int), parameter :: default_dp_precision = 12 Usage: call set_precision(variable) where variable is default_int private  interface set_precision () This routine overrides the default dp precision used for\nprinting strings in the to_string function, the default\nis : integer(default_int), parameter :: default_dp_precision = 12 Usage: call set_precision(variable) where variable is default_int Arguments None private        interface to_upper takes a character variable and transforms it to uppercase usage var = to_upper(“hello”) private  interface to_upper () takes a character variable and transforms it to uppercase usage var = to_upper(“hello”) Arguments None Functions public  function get_precision () result(precision) Get the current precision for real numbers Arguments None Return Value integer(kind=default_int) public  function pad (s, width) result(padded) function to pad a string with a certain number of characters for nice printing Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: s integer(kind=default_int), intent(in) :: width Return Value character(len=:), allocatable public  function to_upper (str) result(upper_str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: str Return Value character(len=len) private  function to_string_char (c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable private  function to_string_dp (r) result(trimmed_str) transform a real(dp) to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable private  function to_string_int32 (i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable private  function to_string_int64 (i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable private  function to_string_logical (l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable private  function to_string_matrix_dp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_int32 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_int64 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_matrix_sp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:,:) Return Value character(len=:), allocatable private  function to_string_sp (r) result(trimmed_str) transform a real(sp) to a string Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: r Return Value character(len=:), allocatable private  function to_string_vector_dp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_int32 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_int64 (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: array (:) Return Value character(len=:), allocatable private  function to_string_vector_sp (array) result(trimmed_str) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: array (:) Return Value character(len=:), allocatable Subroutines public  subroutine set_precision (precision) Set the precision for real numbers Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: precision","tags":"","url":"module/pic_string.html"},{"title":"pic_logger – PIC","text":"this is the logger module Uses pic_types pic_global_definitions module~~pic_logger~~UsesGraph module~pic_logger pic_logger module~pic_global_definitions pic_global_definitions module~pic_logger->module~pic_global_definitions module~pic_types pic_types module~pic_logger->module~pic_types module~pic_global_definitions->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), public, parameter :: debug_level = 10 integer(kind=default_int), public, parameter :: error_level = 5 type( logger_type ), public :: global_logger integer(kind=default_int), public, parameter :: info_level = 8 integer(kind=default_int), public, parameter :: performance_level = 7 integer(kind=default_int), public, parameter :: verbose_level = 9 integer(kind=default_int), public, parameter :: warning_level = 6 character(len=*), private, parameter :: name = \"pic_logger\" Derived Types type, public :: logger_type custom logger data type Components Type Visibility Attributes Name Initial integer(kind=default_int), public :: log_file_level = verbose_level set default log file log level to verbose integer(kind=default_int), public :: log_level = info_level set default log level to info logical, private :: log_file_open = .false. integer(kind=default_int), private :: log_file_unit = -1 Type-Bound Procedures procedure, public, pass(self), non_overridable :: close_log_file Close the log file, needs to be called at the end of the program.\nUsage: call my_logger%close_log_file() procedure, public, pass(self), non_overridable :: configuration Get the current logger verbosity configuration.\nUsage: call my_logger%configuration(level) procedure, public, pass(self), non_overridable :: configure Configure the logger to be a certain verbosity level.\nUsage: call my_logger%configure(level) procedure, public, pass(self), non_overridable :: configure_file_output Configure the logger to file to be a certain verbosity level.\nUsage: call my_logger%configure_file_output(filename, level) procedure, public, pass(self), non_overridable :: debug Log a message that will only be printed at the debug level of verbosity.\nUsage: call my_logger%debug(“MESSAGE”) procedure, public, pass(self), non_overridable :: error Log a message that will only be printed at the error level of verbosity.\nUsage: call my_logger%error(“MESSAGE”) procedure, public, pass(self), non_overridable :: info Log a message that will only be printed at the info level of verbosity.\nUsage: call my_logger%info(“MESSAGE”) procedure, public, pass(self), non_overridable :: performance Log a message that will only be printed at the performance level of verbosity.\nUsage: call my_logger%performance(“MESSAGE”) procedure, public, pass(self), non_overridable :: verbose Log a message that will only be printed at the verbose level of verbosity.\nUsage: call my_logger%verbose(“MESSAGE”) procedure, public, pass(self), non_overridable :: warning Log a message that will only be printed at the warning level of verbosity.\nUsage: call my_logger%warning(“MESSAGE”) procedure, private, pass(self), non_overridable :: log Processes the message and filters it according to the verbosity level set by the user or the default Subroutines private  subroutine close_log_file (self) Close the log file, needs to be called at the end of the program Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self private pure subroutine configuration (self, level) Get the current logger verbosity configuration Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self integer(kind=default_int), intent(out), optional :: level private pure subroutine configure (self, level) Configure the logger to be a certain verbosity level Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self integer(kind=default_int), intent(in), optional :: level private  subroutine configure_file_output (self, filename, level) Configure the logger to file to be a certain verbosity level Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self character(len=*), intent(in) :: filename integer(kind=default_int), intent(in), optional :: level private  subroutine debug (self, message, module, procedure) Log a message that will only be printed at the debug level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine error (self, message, module, procedure) Log a message that will only be printed at the error of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine info (self, message, module, procedure) Log a message that will only be printed at the info level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine log (self, level, message, module, procedure) internal subroutines that processes the message and filters it according to\nthe verbosity level set by the user or the default\nthis is a private subroutine so it is not exposed to the user Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: level character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine performance (self, message, module, procedure) Log a message that will only be printed at the performance of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine verbose (self, message, module, procedure) Log a message that will only be printed at the verbose level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine warning (self, message, module, procedure) Log a message that will only be printed at the warning level of verbosity Read more… Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure private  subroutine write_log_line (unit, level, message, module, procedure) Internal subroutine that will write the message to the log\nno interface to the public Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: unit character(len=*), intent(in) :: level character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure","tags":"","url":"module/pic_logger.html"},{"title":"pic – PIC","text":"simple interface module that prints banner and other information about the library\nmostly here to verify installs, etc. Subroutines public  subroutine pic_print_banner () my cool banner, work in progress Arguments None","tags":"","url":"module/pic.html"},{"title":"pic_output_helpers – PIC","text":"Assorted output helper routines Uses pic_types module~~pic_output_helpers~~UsesGraph module~pic_output_helpers pic_output_helpers module~pic_types pic_types module~pic_output_helpers->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines public  subroutine print_asterisk_row (n) prints a convenient row of asterisks of length n Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n number of asterisks to print","tags":"","url":"module/pic_output_helpers.html"},{"title":"pic_constants – PIC","text":"this will be the physical constants module Uses pic_types module~~pic_constants~~UsesGraph module~pic_constants pic_constants module~pic_types pic_types module~pic_constants->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial real(kind=dp), public, parameter :: gravity = 9.81_dp","tags":"","url":"module/pic_constants.html"},{"title":"pic_gpu_runtime – PIC","text":"gpu runtime interfaces via iso_c Uses iso_c_binding module~~pic_gpu_runtime~~UsesGraph module~pic_gpu_runtime pic_gpu_runtime iso_c_binding iso_c_binding module~pic_gpu_runtime->iso_c_binding Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_gpu_runtime~~UsedByGraph module~pic_gpu_runtime pic_gpu_runtime module~pic_device pic_device module~pic_device->module~pic_gpu_runtime Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Subroutines public  subroutine gpugetdevice (device_id, ierr) get current device id from the GPU runtime Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: device_id integer(kind=c_int), intent(out) :: ierr public  subroutine gpugetdevicecount (device_count, ierr) get device count available from the GPU runtime Arguments Type Intent Optional Attributes Name integer(kind=c_int), intent(out) :: device_count integer(kind=c_int), intent(out) :: ierr public  subroutine gpugetmeminfo (freeMem, totalMem, ierr) get free and total memory from the GPU runtime Arguments Type Intent Optional Attributes Name integer(kind=c_size_t), intent(out) :: freeMem integer(kind=c_size_t), intent(out) :: totalMem integer(kind=c_int), intent(out) :: ierr","tags":"","url":"module/pic_gpu_runtime.html"},{"title":"pic_test_helpers – PIC","text":"simple reusable helpers for random things Uses pic_types pic_global_definitions module~~pic_test_helpers~~UsesGraph module~pic_test_helpers pic_test_helpers module~pic_global_definitions pic_global_definitions module~pic_test_helpers->module~pic_global_definitions module~pic_types pic_types module~pic_test_helpers->module~pic_types module~pic_global_definitions->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface is_equal The is equal interface is used to circumvent the fact that Fortran, rightfully, complains about\ncomparing two reals without involving a tolerance, i.e. if(a == b) since there is no guarantee that\nthe two reals are exactly equal due to floating point precision issues. The functions are defined as elemental Usage: if (is_equal(a, b)) then\nwhere a and b are real numbers, and the function will return true if they are\nequal within the tolerance defined in pic_global_definitions. private elemental function is_equal_sp (a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: a real(kind=sp), intent(in) :: b Return Value logical private elemental function is_equal_dp (a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: a real(kind=dp), intent(in) :: b Return Value logical Functions private elemental function is_equal_dp (a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: a real(kind=dp), intent(in) :: b Return Value logical private elemental function is_equal_sp (a, b) result(res) Arguments Type Intent Optional Attributes Name real(kind=sp), intent(in) :: a real(kind=sp), intent(in) :: b Return Value logical Subroutines public  subroutine dummy_work () this subroutine runs a random dgemm to create work so that timers and other testing utils work nicely Read more… Arguments None","tags":"","url":"module/pic_test_helpers.html"},{"title":"pic_command_line – PIC","text":"command line interaction module Uses pic_types module~~pic_command_line~~UsesGraph module~pic_command_line pic_command_line module~pic_types pic_types module~pic_command_line->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Functions public  function get_first_arg_from_command_line () result(filename) get the first argument from the command line, this is expected to be a filename Read more… Arguments None Return Value character(len=255)","tags":"","url":"module/pic_command_line.html"},{"title":"pic_device – PIC","text":"contains the general routines that interface to the pic_gpu_runtime module\nthere are not C interfaces in this file Uses pic_gpu_runtime pic_types iso_c_binding module~~pic_device~~UsesGraph module~pic_device pic_device iso_c_binding iso_c_binding module~pic_device->iso_c_binding module~pic_gpu_runtime pic_gpu_runtime module~pic_device->module~pic_gpu_runtime module~pic_types pic_types module~pic_device->module~pic_types module~pic_gpu_runtime->iso_c_binding iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface to_string convenient way to print the pic_device_type using to_string(my_device) private  function to_string_device (self) result(str) cute printing routine for the pic device type, transforms the contents into a\nstring of chars Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(in) :: self Return Value character(len=:), allocatable Derived Types type, public :: pic_device_type general device container, contains the id, free, total , and used memory Components Type Visibility Attributes Name Initial integer(kind=c_int), public :: device_id = -1_c_int real(kind=dp), public :: free_mb = 0.0_dp real(kind=dp), public :: total_mb = 0.0_dp real(kind=dp), public :: used_mb = 0.0_dp Type-Bound Procedures procedure, public, non_overridable :: get_device_info => get_gpu_information Functions private  function to_string_device (self) result(str) cute printing routine for the pic device type, transforms the contents into a\nstring of chars Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(in) :: self Return Value character(len=:), allocatable Subroutines public  subroutine get_device_id (mem) routine to get the device id for the device_type Arguments Type Intent Optional Attributes Name type( pic_device_type ), intent(inout) :: mem public  subroutine get_gpu_information (self) call my_device%get_gpu_informatio() style subroutine to populate the object Arguments Type Intent Optional Attributes Name class( pic_device_type ), intent(inout) :: self public  subroutine get_gpu_memory_info (mem) routine to get the free and total memory for the device_type object\ncan be used independently with call get_gpu_memory_info(device_object) Arguments Type Intent Optional Attributes Name type( pic_device_type ), intent(inout) :: mem","tags":"","url":"module/pic_device.html"},{"title":"pic_flop_recorder – PIC","text":"general flop recorder module Uses pic_types module~~pic_flop_recorder~~UsesGraph module~pic_flop_recorder pic_flop_recorder module~pic_types pic_types module~pic_flop_recorder->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_flop_recorder~~UsedByGraph module~pic_flop_recorder pic_flop_recorder module~pic_flop_rate pic_flop_rate module~pic_flop_rate->module~pic_flop_recorder Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Derived Types type, public :: flop_recorder_type the flop recorder type simply contains a flop count\nthis should be the largest possible integer in the planet\ncurrently this will overflow for zetta flops Components Type Visibility Attributes Name Initial integer(kind=int64), private :: flop_count = 0_int64 Type-Bound Procedures procedure, public, non_overridable :: add => add_flops procedure, public, non_overridable :: get => get_flops procedure, public, non_overridable :: reset => reset_flop_counter Functions private  function get_flops (self) result(flops) Get the int64 number of FLOPs we currently have in the counter Read more… Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(in) :: self Return Value integer(kind=int64) Subroutines private  subroutine add_flops (self, flops) Add an int64 variable which contains the FLOPs\nwe use int64 since we might reach very large FLOP counts Read more… Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops private  subroutine reset_flop_counter (self) Resets the flop counter to 0_int64 Read more… Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self","tags":"","url":"module/pic_flop_recorder.html"},{"title":"pic_global_definitions – PIC","text":"Global definitions for input output Uses pic_types module~~pic_global_definitions~~UsesGraph module~pic_global_definitions pic_global_definitions module~pic_types pic_types module~pic_global_definitions->module~pic_types iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~pic_global_definitions~~UsedByGraph module~pic_global_definitions pic_global_definitions module~pic_logger pic_logger module~pic_logger->module~pic_global_definitions module~pic_test_helpers pic_test_helpers module~pic_test_helpers->module~pic_global_definitions Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=default_int), public, parameter :: logfile_unit = 99 assign output unit 99 for the logfile integer(kind=default_int), public, parameter :: stdout = 6 assign output unit 6 for stdout real(kind=dp), public, parameter :: tol_dp = 1.0e-12_dp real(kind=sp), public, parameter :: tol_sp = 1.0e-6_sp","tags":"","url":"module/pic_global_definitions.html"},{"title":"stdlib_pic_hash_32bit – PIC","text":"Uses pic_types stdlib_pic_hash_32bit_fnv module~~stdlib_pic_hash_32bit~~UsesGraph module~stdlib_pic_hash_32bit stdlib_pic_hash_32bit module~pic_types pic_types module~stdlib_pic_hash_32bit->module~pic_types module~stdlib_pic_hash_32bit_fnv stdlib_pic_hash_32bit_fnv module~stdlib_pic_hash_32bit->module~stdlib_pic_hash_32bit_fnv iso_fortran_env iso_fortran_env module~pic_types->iso_fortran_env module~stdlib_pic_hash_32bit_fnv->module~pic_types module~stdlib_pic_hash_32bit_fnv->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial integer(kind=int32), private, parameter :: pow32_over_phi = int(z'9E3779B9', int32)","tags":"","url":"module/stdlib_pic_hash_32bit.html"},{"title":"pic_flop_rate.f90 – PIC","text":"flop rate handler modules This file depends on sourcefile~~pic_flop_rate.f90~~EfferentGraph sourcefile~pic_flop_rate.f90 pic_flop_rate.f90 sourcefile~pic_flop_recorder.f90 pic_flop_recorder.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_flop_recorder.f90 sourcefile~pic_string_utils.f90 pic_string_utils.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_timer.f90 pic_timer.F90 sourcefile~pic_flop_rate.f90->sourcefile~pic_timer.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_flop_rate.f90->sourcefile~pic_types.f90 sourcefile~pic_flop_recorder.f90->sourcefile~pic_types.f90 sourcefile~pic_string_utils.f90->sourcefile~pic_types.f90 sourcefile~pic_timer.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_timer.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! flop rate handler modules module pic_flop_rate !! pic_flop_rate is a convenient encapsulation of the flop_recorder and pic_timer !! it is used to measure the flop rate of a given operation, and report it use pic_types , only : dp , int64 use pic_timer , only : pic_timer_type use pic_flop_recorder , only : flop_recorder_type use pic_string , only : to_string implicit none private public :: flop_rate_type type flop_rate_type !! derived type for flop rate, contains a timer and a flop recorder private type ( pic_timer_type ) :: m_timer type ( flop_recorder_type ) :: m_flops real ( dp ) :: m_flop_rate !! private by default so that people use the accessor functions contains procedure , non_overridable :: start_time => flop_rate_start_time procedure , non_overridable :: stop_time => flop_rate_stop_time procedure , non_overridable :: add_flops => flop_rate_add_flops procedure , non_overridable :: get_flops => flop_rate_get_flops procedure , non_overridable :: get_time => flop_rate_get_time procedure , non_overridable :: get_flop_rate => flop_rate_get_flop_rate procedure , non_overridable :: report => flop_rate_report procedure , non_overridable :: reset => flop_rate_reset end type flop_rate_type contains subroutine flop_rate_start_time ( self ) !! Calls the start method for the timer contained in the flop rate type !! !! Usage: call my_flop_rate%start_time() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % start () end subroutine flop_rate_start_time subroutine flop_rate_stop_time ( self ) !! Calls the stop method for the timer contained in the flop rate type !! !! Usage: call my_flop_rate%stop_time() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % stop () end subroutine flop_rate_stop_time subroutine flop_rate_add_flops ( self , flops ) !! add flops to the flop rate type, this will add the flops to the flop recorder !! Usage: call my_flop_rate%add_flops(1000) !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops call self % m_flops % add ( flops ) end subroutine flop_rate_add_flops function flop_rate_get_flops ( self ) result ( flops ) !! get the number of flops recorded in the flop rate type !! !! Usage: flops = my_flop_rate%get_flops() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % m_flops % get () end function flop_rate_get_flops function flop_rate_get_time ( self ) result ( time ) !! get the elapsed time in seconds from the timer contained in the flop rate type !! !! Usage: time = my_flop_rate%get_time() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( in ) :: self real ( dp ) :: time time = self % m_timer % get_elapsed_time () end function flop_rate_get_time function flop_rate_get_flop_rate ( self ) result ( flop_rate ) !! get the flop rate in GFLOP/s, this will calculate the flop rate based on the !! number of flops and the elapsed time !! !! Usage: flop_rate = my_flop_rate%get_flop_rate() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self real ( dp ) :: flop_rate real ( dp ) :: time integer ( int64 ) :: flops flops = self % m_flops % get () time = self % m_timer % get_elapsed_time () if ( time <= 0.0_dp ) then print * , \"Warning: Time is zero or negative, setting flop rate to zero.\" self % m_flop_rate = 0.0_dp flop_rate = 0.0_dp return else self % m_flop_rate = flops / time / 1.0e9_dp flop_rate = self % m_flop_rate end if end function flop_rate_get_flop_rate subroutine flop_rate_report ( self ) !! report the flop rate, this will print the flop rate in GFLOP/s !! !! Usage: call my_flop_rate%report() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self self % m_flop_rate = self % get_flop_rate () print * , \"Flop rate is \" // to_string ( self % m_flop_rate ) // \" GFLOP/s\" end subroutine flop_rate_report subroutine flop_rate_reset ( self ) !! reset the flop rate type, this will reset the timer and the flop recorder !! !! Usage: call my_flop_rate%reset() !! !! where my_flop_rate is an instance of flop_rate_type !! class ( flop_rate_type ), intent ( inout ) :: self call self % m_flops % reset () end subroutine flop_rate_reset end module pic_flop_rate","tags":"","url":"sourcefile/pic_flop_rate.f90.html"},{"title":"pic_blas_interfaces.F90 – PIC","text":"this file contains the interfaces for the BLAS routines of all levels\nI might consider splitting them up later but alas, I don’t have the time now\nthe idea of this file is to provide something akin to\ninterface blas_gemm\n subroutine sgemm()\n subroutine dgemm()\n  … etc,\nend interface blas_gemm\nso that I can use the same interface for all BLAS routines This file depends on sourcefile~~pic_blas_interfaces.f90~~EfferentGraph sourcefile~pic_blas_interfaces.f90 pic_blas_interfaces.F90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_blas_interfaces.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! this file contains the interfaces for the BLAS routines of all levels !! I might consider splitting them up later but alas, I don't have the time now !! the idea of this file is to provide something akin to !! interface blas_gemm !!  subroutine sgemm() !!  subroutine dgemm() !!   ... etc, !! end interface blas_gemm !! so that I can use the same interface for all BLAS routines module pic_blas_interfaces !! pic_blas_interfaces.F90 provides the interfaces for the BLAS routines !! the idea is to have a two level interface, first pic_blas_xyz which !! is the way programmers will use BLAS, it'll do some checks and then !! call the \"overloaded\" BLAS interfaces to call the correct BLAS routine use pic_types , only : sp , dp , default_int implicit none private ! these are the cool overloaded interfaces, the pic_xyz function ! has the procedures pic_(type)xyz which will call the correct BLAS routine ! depending on the data type of the arguments ! this _needs_ allocatable arrays since we deduce shapes from the arrays themselves public :: pic_gemm , pic_gemv , pic_asum , pic_axpy , pic_copy , pic_dot , pic_scal , pic_iamax ! tested interface pic_gemm !! general interface of the BLAS GEMM routines, will call SGEMM, DGEMM, CGEMM !! !! Usage: call pic_gemm(A, B, C, [optional] transa, [optional] transb, [optional] alpha, [optional] beta) !! !! where A, B, C are matrices, transa and transb are optional transpose options, !! alpha and beta are optional scaling factors !! !! By default, if not specified transA and transB are \"N\" (no transpose), !! and alpha and beta are 1.0 and 0.0 respectively. !! !! The matrices A, B, C must be allocatable arrays, we deduce the shapes from them. module procedure :: pic_sgemm module procedure :: pic_dgemm end interface pic_gemm interface pic_gemv !! general interface of the BLAS GEMV routines, will call SGEMV, DGEMV, CGEMV, ZGEMV !! !! Usage: call pic_gemv(A, x, y, [optional] transa, [optional] alpha, [optional] beta) !! !! where A is a matrix, x and y are vectors, transa is an optional transpose option, !! alpha and beta are optional scaling factors. !! !! The matrix A must be an allocatable array, we deduce the shapes from it. !! TransA is \"N\" (no transpose) by default. And alpha and beta are 1.0 and 0.0 respectively. !! module procedure :: pic_sgemv module procedure :: pic_dgemv end interface pic_gemv ! tested interface pic_asum !! general interface of the BLAS ASUM routines, will call SASUM, DASUM, SCASUM, DZASUM !! !! Usage: result = pic_asum(x, incx) !! !! where x is a vector and incx is the increment, this will return the sum of the absolute values !! of the elements of x. !! !! The vector x must be an allocatable array, we deduce the shape from it. !! The increment incx is 1 by default. !! module procedure :: pic_sasum module procedure :: pic_dasum module procedure :: pic_scasum module procedure :: pic_dzasum end interface pic_asum interface pic_axpy !! general interface of the BLAS AXPY routines, will call SAXPY, DAXPY, CAXPY, ZAXPY !! !! Usage: call pic_axpy(n, alpha, x, incx, y, incy) !! !! where n is the number of elements, alpha is the scaling factor, !! x is the input vector, incx is the increment for x, y is the output vector, !! and incy is the increment for y. !! !! The vectors x and y must be allocatable arrays, we deduce the shapes from them. !! The increments incx and incy are 1 by default. !! module procedure :: pic_saxpy module procedure :: pic_daxpy end interface pic_axpy interface pic_copy !! general interface of the BLAS COPY routines, will call SCOPY, DCOPY, CCOPY, ZCOPY !! !! Usage: call pic_copy(x, y) !! !! where x is the input vector, y is the output vector. !! The vectors x and y must be allocatable arrays, we deduce the shapes from them. !! module procedure :: pic_scopy module procedure :: pic_dcopy end interface pic_copy interface pic_dot !! general interface of the BLAS DOT routines, will call SDOT, DDOT, CDOTC, ZDOTC !! !! Usage: result = pic_dot(x, y) !! !! where x is the input vector, y is the output vector. !! The vectors x and y must be allocatable arrays, we deduce the shapes from them. !! module procedure :: pic_sdot module procedure :: pic_ddot end interface pic_dot interface pic_scal !! general interface of the BLAS SCAL routines, will call SSCAL, DSCAL, CSCAL, ZSCAL !! !! Usage: call pic_scal(x, [optional] alpha) !! !! where x is the input vector, alpha is the scaling factor. !! The vector x must be an allocatable array, we deduce the shape from it. !! The scaling factor alpha is 1.0 by default. !! module procedure :: pic_sscal module procedure :: pic_dscal end interface pic_scal interface pic_iamax !! general interface of the BLAS IAMAX routines, will call ISAMAX, IDAMAX, ICAMAX, IZAMAX !! !! Usage: idx = pic_iamax(x, incx) !! !! where x is the input vector, incx is the increment. !! The vector x must be an allocatable array, we deduce the shape from it. !! The increment incx is 1 by default. !! module procedure :: pic_isamax module procedure :: pic_idamax end interface pic_iamax interface blas_asum !! this is the interface for the BLAS ASUM routines, it will call SASUM, DASUM, SCASUM, DZASUM !! Usage: result = blas_asum(x, incx) !! where x is the input vector, incx is the increment. !! !! This is not a public interface, it is used internally by pic_asum pure function sasum ( n , x , incx ) result ( res_sasum ) import :: sp , default_int implicit none real ( sp ) :: res_sasum real ( sp ), intent ( in ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end function sasum pure function dasum ( n , x , incx ) result ( res_dasum ) import :: dp , default_int implicit none real ( dp ) :: res_dasum real ( dp ), intent ( in ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end function dasum pure function scasum ( n , x , incx ) result ( res_scasum ) import :: sp , default_int implicit none real ( sp ) :: res_scasum complex ( sp ), intent ( in ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end function scasum pure function dzasum ( n , x , incx ) result ( res_dzasum ) import :: dp , default_int implicit none real ( dp ) :: res_dzasum complex ( dp ), intent ( in ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end function dzasum end interface blas_asum interface blas_axpy !! explicit interface for BLAS AXPY routines !! !! Usage: call blas_axpy(n, alpha, x, incx, y, incy) !! !! This is not a public interface, it is used internally by pic_axpy pure subroutine saxpy ( n , alpha , x , incx , y , incy ) import :: sp , default_int implicit none real ( sp ), intent ( in ) :: alpha real ( sp ), intent ( in ) :: x ( * ) real ( sp ), intent ( inout ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end subroutine saxpy pure subroutine daxpy ( n , alpha , x , incx , y , incy ) import :: dp , default_int implicit none real ( dp ), intent ( in ) :: alpha real ( dp ), intent ( in ) :: x ( * ) real ( dp ), intent ( inout ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end subroutine daxpy pure subroutine caxpy ( n , alpha , x , incx , y , incy ) import :: sp , default_int implicit none complex ( sp ), intent ( in ) :: alpha complex ( sp ), intent ( in ) :: x ( * ) complex ( sp ), intent ( inout ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end subroutine caxpy pure subroutine zaxpy ( n , alpha , x , incx , y , incy ) import :: dp , default_int implicit none complex ( dp ), intent ( in ) :: alpha complex ( dp ), intent ( in ) :: x ( * ) complex ( dp ), intent ( inout ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end subroutine zaxpy end interface blas_axpy interface blas_copy !! explicit interface for BLAS COPY routines !! !! Usage: call blas_copy(x, y) !! !! This is not a public interface, it is used internally by pic_copy pure subroutine scopy ( n , x , incx , y , incy ) import :: sp , default_int implicit none real ( sp ), intent ( in ) :: x ( * ) real ( sp ), intent ( inout ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end subroutine scopy pure subroutine dcopy ( n , x , incx , y , incy ) import :: dp , default_int implicit none real ( dp ), intent ( in ) :: x ( * ) real ( dp ), intent ( inout ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end subroutine dcopy end interface blas_copy interface blas_dot !! explicit interface for BLAS DOT routines !! !! Usage: result = blas_dot(x, y, incx, incy, n) !! This is not a public interface, it is used internally by pic_dot !! pure function sdot ( n , x , incx , y , incy ) result ( res ) import :: sp , default_int implicit none real ( sp ) :: res real ( sp ), intent ( in ) :: x ( * ) real ( sp ), intent ( in ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end function sdot pure function ddot ( n , x , incx , y , incy ) result ( res ) import :: dp , default_int implicit none real ( dp ) :: res real ( dp ), intent ( in ) :: x ( * ) real ( dp ), intent ( in ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end function ddot pure function cdotc ( n , x , incx , y , incy ) result ( res ) import :: sp , default_int implicit none complex ( sp ) :: res complex ( sp ), intent ( in ) :: x ( * ) complex ( sp ), intent ( in ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end function cdotc pure function zdotc ( n , x , incx , y , incy ) result ( res ) import :: dp , default_int implicit none complex ( dp ) :: res complex ( dp ), intent ( in ) :: x ( * ) complex ( dp ), intent ( in ) :: y ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy integer ( default_int ), intent ( in ) :: n end function zdotc end interface blas_dot interface blas_scal !! explicit interface for BLAS SCAL routines !! !! Usage: call blas_scal(n, alpha, x, incx) !! !! This is not a public interface, it is used internally by pic_scal pure subroutine sscal ( n , alpha , x , incx ) import :: sp , default_int implicit none real ( sp ), intent ( in ) :: alpha real ( sp ), intent ( inout ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end subroutine sscal pure subroutine dscal ( n , alpha , x , incx ) import :: dp , default_int implicit none real ( dp ), intent ( in ) :: alpha real ( dp ), intent ( inout ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end subroutine dscal end interface blas_scal interface blas_iamax !! explicit interface for BLAS IAMAX routines !! !! Usage: idx = blas_iamax(x, incx) !! !! This is not a public interface, it is used internally by pic_iamax pure function isamax ( n , x , incx ) result ( idx ) import :: sp , default_int implicit none integer ( default_int ) :: idx real ( sp ), intent ( in ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end function isamax pure function idamax ( n , x , incx ) result ( idx ) import :: dp , default_int implicit none integer ( default_int ) :: idx real ( dp ), intent ( in ) :: x ( * ) integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: n end function idamax end interface blas_iamax interface blas_gemv !! explicit interface for BLAS GEMV routines !! !! Usage: call blas_gemv(trans, m, n, alpha, a, lda, x, incx, beta, y, incy) !! !! This is not a public interface, it is used internally by pic_gemv pure subroutine sgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: sp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy real ( sp ), intent ( in ) :: a ( lda , * ) real ( sp ), intent ( in ) :: x ( * ) real ( sp ), intent ( inout ) :: y ( * ) character ( len = 1 ), intent ( in ) :: trans real ( sp ), intent ( in ) :: alpha real ( sp ), intent ( in ) :: beta end subroutine sgemv pure subroutine dgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: dp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy real ( dp ), intent ( in ) :: a ( lda , * ) real ( dp ), intent ( in ) :: x ( * ) real ( dp ), intent ( inout ) :: y ( * ) character ( len = 1 ), intent ( in ) :: trans real ( dp ), intent ( in ) :: alpha real ( dp ), intent ( in ) :: beta end subroutine dgemv pure subroutine cgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: sp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy complex ( sp ), intent ( in ) :: a ( lda , * ) complex ( sp ), intent ( in ) :: x ( * ) complex ( sp ), intent ( inout ) :: y ( * ) character ( len = 1 ), intent ( in ) :: trans complex ( sp ), intent ( in ) :: alpha complex ( sp ), intent ( in ) :: beta end subroutine cgemv pure subroutine zgemv ( trans , m , n , alpha , a , lda , x , incx , beta , y , incy ) import :: dp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: incx integer ( default_int ), intent ( in ) :: incy complex ( dp ), intent ( in ) :: a ( lda , * ) complex ( dp ), intent ( in ) :: x ( * ) complex ( dp ), intent ( inout ) :: y ( * ) character ( len = 1 ), intent ( in ) :: trans complex ( dp ), intent ( in ) :: alpha complex ( dp ), intent ( in ) :: beta end subroutine zgemv end interface blas_gemv interface blas_gemm !! explicit interface for BLAS GEMM routines !! !! Usage: call blas_gemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc) !! !! This is not a public interface, it is used internally by pic_gemm pure subroutine sgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , & & beta , c , ldc ) import :: sp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: k integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: ldb integer ( default_int ), intent ( in ) :: ldc real ( sp ), intent ( in ) :: a ( lda , * ) real ( sp ), intent ( in ) :: b ( ldb , * ) real ( sp ), intent ( inout ) :: c ( ldc , * ) character ( len = 1 ), intent ( in ) :: transa character ( len = 1 ), intent ( in ) :: transb real ( sp ), intent ( in ) :: alpha real ( sp ), intent ( in ) :: beta end subroutine sgemm pure subroutine dgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , & & beta , c , ldc ) import :: dp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: k integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: ldb integer ( default_int ), intent ( in ) :: ldc real ( dp ), intent ( in ) :: a ( lda , * ) real ( dp ), intent ( in ) :: b ( ldb , * ) real ( dp ), intent ( inout ) :: c ( ldc , * ) character ( len = 1 ), intent ( in ) :: transa character ( len = 1 ), intent ( in ) :: transb real ( dp ), intent ( in ) :: alpha real ( dp ), intent ( in ) :: beta end subroutine dgemm pure subroutine cgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , & & beta , c , ldc ) import :: sp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: k integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: ldb integer ( default_int ), intent ( in ) :: ldc complex ( sp ), intent ( in ) :: a ( lda , * ) complex ( sp ), intent ( in ) :: b ( ldb , * ) complex ( sp ), intent ( inout ) :: c ( ldc , * ) character ( len = 1 ), intent ( in ) :: transa character ( len = 1 ), intent ( in ) :: transb complex ( sp ), intent ( in ) :: alpha complex ( sp ), intent ( in ) :: beta end subroutine cgemm pure subroutine zgemm ( transa , transb , m , n , k , alpha , a , lda , b , ldb , & & beta , c , ldc ) import :: dp , default_int implicit none integer ( default_int ), intent ( in ) :: m integer ( default_int ), intent ( in ) :: n integer ( default_int ), intent ( in ) :: k integer ( default_int ), intent ( in ) :: lda integer ( default_int ), intent ( in ) :: ldb integer ( default_int ), intent ( in ) :: ldc complex ( dp ), intent ( in ) :: a ( lda , * ) complex ( dp ), intent ( in ) :: b ( ldb , * ) complex ( dp ), intent ( inout ) :: c ( ldc , * ) character ( len = 1 ), intent ( in ) :: transa character ( len = 1 ), intent ( in ) :: transb complex ( dp ), intent ( in ) :: alpha complex ( dp ), intent ( in ) :: beta end subroutine zgemm end interface blas_gemm contains pure subroutine pic_sgemm ( A , B , C , transa , transb , alpha , beta ) !! interface for single precision matrix multiplication real ( sp ), intent ( in ) :: A (:, :) real ( sp ), intent ( in ) :: B (:, :) real ( sp ), intent ( inout ) :: C (:, :) character ( len = 1 ), intent ( in ), optional :: transa character ( len = 1 ), intent ( in ), optional :: transb real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta character ( len = 1 ) :: OP_A , OP_B real ( sp ) :: l_alpha , l_beta integer ( default_int ) :: m , n , k , lda , ldb , ldc ! first check for the constants if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if ! check the OP options, maybe this should not be optional if ( present ( transa )) then OP_A = transa else OP_A = \"N\" end if if ( present ( transb )) then OP_B = transb else OP_B = \"N\" end if ! check for the dimensions now if (( OP_A == \"N\" . or . OP_A == \"n\" )) then k = size ( A , 2 ) else k = size ( A , 1 ) end if ! get LDA, LDB, and LDC lda = max ( 1 , size ( A , 1 )) ldb = max ( 1 , size ( B , 1 )) ldc = max ( 1 , size ( C , 1 )) m = size ( C , 1 ) n = size ( C , 2 ) call blas_gemm ( OP_A , OP_B , m , n , k , l_alpha , A , lda , B , ldb , l_beta , C , ldc ) end subroutine pic_sgemm pure subroutine pic_dgemm ( A , B , C , transa , transb , alpha , beta ) !! interface for single precision matrix multiplication real ( dp ), intent ( in ) :: A (:, :) real ( dp ), intent ( in ) :: B (:, :) real ( dp ), intent ( inout ) :: C (:, :) character ( len = 1 ), intent ( in ), optional :: transa character ( len = 1 ), intent ( in ), optional :: transb real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta character ( len = 1 ) :: OP_A , OP_B real ( dp ) :: l_alpha , l_beta integer ( default_int ) :: m , n , k , lda , ldb , ldc ! first check for the constants if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if ! check the OP options, maybe this should not be optional if ( present ( transa )) then OP_A = transa else OP_A = \"N\" end if if ( present ( transb )) then OP_B = transb else OP_B = \"N\" end if ! check for the dimensions now if (( OP_A == \"N\" . or . OP_A == \"n\" )) then k = size ( A , 2 ) else k = size ( A , 1 ) end if ! get LDA, LDB, and LDC lda = max ( 1 , size ( A , 1 )) ldb = max ( 1 , size ( B , 1 )) ldc = max ( 1 , size ( C , 1 )) m = size ( C , 1 ) n = size ( C , 2 ) call blas_gemm ( OP_A , OP_B , m , n , k , l_alpha , A , lda , B , ldb , l_beta , C , ldc ) end subroutine pic_dgemm pure subroutine pic_sgemv ( A , x , y , trans_a , alpha , beta ) !! interface for single precision matrix-vector multiplication real ( sp ), intent ( in ) :: A (:, :) real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( inout ) :: y (:) character ( len = 1 ), intent ( in ), optional :: trans_a real ( sp ), intent ( in ), optional :: alpha real ( sp ), intent ( in ), optional :: beta real ( sp ) :: l_alpha , l_beta character ( len = 1 ) :: l_trans_a integer ( default_int ) :: incx , incy , m , n , lda if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if if ( present ( trans_a )) then l_trans_a = trans_a else l_trans_a = \"n\" end if incx = 1 incy = 1 lda = max ( 1 , size ( A , 1 )) m = size ( A , 1 ) n = size ( A , 2 ) call blas_gemv ( l_trans_a , m , n , l_alpha , A , lda , x , incx , l_beta , y , incy ) end subroutine pic_sgemv pure subroutine pic_dgemv ( A , x , y , trans_a , alpha , beta ) !! interface for double precision matrix-vector multiplication real ( dp ), intent ( in ) :: A (:, :) real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( inout ) :: y (:) character ( len = 1 ), intent ( in ), optional :: trans_a real ( dp ), intent ( in ), optional :: alpha real ( dp ), intent ( in ), optional :: beta real ( dp ) :: l_alpha , l_beta character ( len = 1 ) :: l_trans_a integer ( default_int ) :: incx , incy , m , n , lda if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if if ( present ( beta )) then l_beta = beta else l_beta = 0.0_sp end if if ( present ( trans_a )) then l_trans_a = trans_a else l_trans_a = \"n\" end if incx = 1 incy = 1 lda = max ( 1 , size ( A , 1 )) m = size ( A , 1 ) n = size ( A , 2 ) call blas_gemv ( l_trans_a , m , n , l_alpha , A , lda , x , incx , l_beta , y , incy ) end subroutine pic_dgemv function pic_sasum ( x ) result ( res ) !! interface for single precision absolute sum real ( sp ), intent ( in ) :: x (:) real ( sp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_sasum function pic_dasum ( x ) result ( res ) !! interface for double precision absolute sum real ( dp ), intent ( in ) :: x (:) real ( dp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_dasum function pic_scasum ( x ) result ( res ) !! interface for single precision complex absolute sum complex ( sp ), intent ( in ) :: x (:) real ( sp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_scasum function pic_dzasum ( x ) result ( res ) !! interface for double precision complex absolute sum complex ( dp ), intent ( in ) :: x (:) real ( dp ) :: res integer ( default_int ) :: n , incx n = size ( x ) incx = 1 res = blas_asum ( n , x , incx ) end function pic_dzasum subroutine pic_saxpy ( x , y , alpha ) !! interface for single precision AXPY real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( inout ) :: y (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ) :: l_alpha integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if call blas_axpy ( n , l_alpha , x , incx , y , incy ) end subroutine pic_saxpy subroutine pic_daxpy ( x , y , alpha ) !! interface for double precision AXPY real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( inout ) :: y (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ) :: l_alpha integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_dp end if call blas_axpy ( n , l_alpha , x , incx , y , incy ) end subroutine pic_daxpy subroutine pic_scopy ( x , y ) !! interface for single precision copy real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( inout ) :: y (:) integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 call blas_copy ( n , x , incx , y , incy ) end subroutine pic_scopy subroutine pic_dcopy ( x , y ) !! interface for double precision copy real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( inout ) :: y (:) integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 call blas_copy ( n , x , incx , y , incy ) end subroutine pic_dcopy function pic_sdot ( x , y ) result ( res ) !! interface for single precision dot product real ( sp ), intent ( in ) :: x (:) real ( sp ), intent ( in ) :: y (:) real ( sp ) :: res integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 res = blas_dot ( n , x , incx , y , incy ) end function pic_sdot function pic_ddot ( x , y ) result ( res ) !! interface for double precision dot product real ( dp ), intent ( in ) :: x (:) real ( dp ), intent ( in ) :: y (:) real ( dp ) :: res integer ( default_int ) :: n , incx , incy n = size ( x ) incx = 1 incy = 1 res = blas_dot ( n , x , incx , y , incy ) end function pic_ddot subroutine pic_sscal ( x , alpha ) !! interface for single precision scaling real ( sp ), intent ( inout ) :: x (:) real ( sp ), intent ( in ), optional :: alpha real ( sp ) :: l_alpha integer ( default_int ) :: n , incx n = size ( x ) incx = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_sp end if call blas_scal ( n , l_alpha , x , incx ) end subroutine pic_sscal subroutine pic_dscal ( x , alpha ) !! interface for double precision scaling real ( dp ), intent ( inout ) :: x (:) real ( dp ), intent ( in ), optional :: alpha real ( dp ) :: l_alpha integer ( default_int ) :: n , incx n = size ( x ) incx = 1 if ( present ( alpha )) then l_alpha = alpha else l_alpha = 1.0_dp end if call blas_scal ( n , l_alpha , x , incx ) end subroutine pic_dscal function pic_isamax ( x ) result ( idx ) !! interface for single precision index of maximum absolute value real ( sp ), intent ( in ) :: x (:) integer ( default_int ) :: idx integer ( default_int ) :: n , incx n = size ( x ) incx = 1 idx = blas_iamax ( n , x , incx ) end function pic_isamax function pic_idamax ( x ) result ( idx ) !! interface for double precision index of maximum absolute value real ( dp ), intent ( in ) :: x (:) integer ( default_int ) :: idx integer ( default_int ) :: n , incx n = size ( x ) incx = 1 idx = blas_iamax ( n , x , incx ) end function pic_idamax end module pic_blas_interfaces","tags":"","url":"sourcefile/pic_blas_interfaces.f90.html"},{"title":"pic_optional.f90 – PIC","text":"Optional value handling module This file depends on sourcefile~~pic_optional.f90~~EfferentGraph sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_optional.f90~~AfferentGraph sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_array.f90 pic_array.f90 sourcefile~pic_array.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_sorting.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_ord_sort.f90 pic_sorting_ord_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_ord_sort.f90 sourcefile~pic_sorting_radix_sort.f90 pic_sorting_radix_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_radix_sort.f90 sourcefile~pic_sorting_sort.f90 pic_sorting_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort.f90 sourcefile~pic_sorting_sort_index.f90 pic_sorting_sort_index.F90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort_index.f90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_optional.f90 sourcefile~pic_string_type.f90 pic_string_type.f90 sourcefile~pic_string_type.f90->sourcefile~pic_optional.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! Optional value handling module module pic_optional_value !! This module provides functions to handle optional arguments use pic_types , only : sp , dp , int32 , int64 implicit none private public :: pic_optional interface pic_optional !! Overloaded interface for optional value retrieval, supported types are: !! - integer(int32), integer(int64), real(sp), real(dp), character(len=*), logical module procedure :: optional_int32 module procedure :: optional_int64 module procedure :: optional_sp module procedure :: optional_dp module procedure :: optional_char module procedure :: optional_logical end interface contains pure function optional_int32 ( input_value , default_value ) result ( output ) !! Handle optional integer(int32) value integer ( int32 ), intent ( in ), optional :: input_value integer ( int32 ), intent ( in ) :: default_value integer ( int32 ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_int32 pure function optional_int64 ( input_value , default_value ) result ( output ) !! Handle optional integer(int64) value integer ( int64 ), intent ( in ), optional :: input_value integer ( int64 ), intent ( in ) :: default_value integer ( int64 ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_int64 pure function optional_sp ( input_value , default_value ) result ( output ) !! Handle optional real(sp) value real ( sp ), intent ( in ), optional :: input_value real ( sp ), intent ( in ) :: default_value real ( sp ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_sp pure function optional_dp ( input_value , default_value ) result ( output ) !! Handle optional real(dp) value real ( dp ), intent ( in ), optional :: input_value real ( dp ), intent ( in ) :: default_value real ( dp ) :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_dp pure function optional_char ( input_value , default_value ) result ( output ) !! Handle optional character(len=*) value character ( len =* ), intent ( in ), optional :: input_value character ( len =* ), intent ( in ) :: default_value character ( len = :), allocatable :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_char pure function optional_logical ( input_value , default_value ) result ( output ) !! Handle optional logical value logical , intent ( in ), optional :: input_value logical , intent ( in ) :: default_value logical :: output if ( present ( input_value )) then output = input_value else output = default_value end if end function optional_logical end module pic_optional_value","tags":"","url":"sourcefile/pic_optional.f90.html"},{"title":"pic_sorting_radix_sort.f90 – PIC","text":"This file depends on sourcefile~~pic_sorting_radix_sort.f90~~EfferentGraph sourcefile~pic_sorting_radix_sort.f90 pic_sorting_radix_sort.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_sorting_radix_sort.f90~~AfferentGraph sourcefile~pic_sorting_radix_sort.f90 pic_sorting_radix_sort.f90 sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_radix_sort.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !submodule(pic_sorting) pic_sorting_radix_sort module pic_sorting_radix_sort use pic_types , only : int32 , int64 , sp , dp , int_index use pic_optional_value , only : pic_optional implicit none public :: radix_sort !! The generic subroutine implementing the LSD radix sort algorithm to return !! an input array with its elements sorted in order of (non-)decreasing !! value. Its use has the syntax: !! !!     call radix_sort( array[, work, reverse] ) !! !! with the arguments: !! !! * array: the rank 1 array to be sorted. It is an `intent(inout)` !!   argument of any of the types `integer(int8)`, `integer(int16)`, !!   `integer(int32)`, `integer(int64)`, `real(real32)`, `real(real64)`. !!   If both the type of `array` is real and at least one of the !!   elements is a `NaN`, then the ordering of the result is undefined. !!   Otherwise it is defined to be the original elements in !!   non-decreasing order. Especially, -0.0 is lesser than 0.0. !! !! * work (optional): shall be a rank 1 array of the same type as !!   `array`, and shall have at least `size(array)` elements. It is an !!   `intent(inout)` argument to be used as buffer. Its value on return is !!   undefined. If it is not present, `radix_sort` will allocate a !!   buffer for use, and deallocate it before return. If you do several !!   similar `radix_sort`s, reusing the `work` array is a good parctice. !!   This argument is not present for `int8_radix_sort` because it use !!   counting sort, so no buffer is needed. !! !! * `reverse` (optional): shall be a scalar of type default logical. It !!   is an `intent(in)` argument. If present with a value of `.true.` then !!   `array` will be sorted in order of non-increasing values in stable !!   order. Otherwise index will sort `array` in order of non-decreasing !!   values in stable order. !! !!#### Example !! !!```fortran !!    ... !!    ! Read random data from a file !!    call read_file( 'dummy_file', array ) !!    ! Sort the random data !!    call radix_sort( array ) !!    ... !!``` private integer , parameter :: radix_bits = 8 integer , parameter :: radix_mask = 255 integer ( kind = int32 ), parameter :: radix_bits_i32 = 8_int32 integer ( kind = int32 ), parameter :: radix_mask_i32 = 255_int32 integer ( kind = int64 ), parameter :: radix_bits_i64 = 8_int64 integer ( kind = int64 ), parameter :: radix_mask_i64 = 255_int64 interface radix_sort !! The generic subroutine interface implementing the LSD radix sort algorithm, !! see https://en.wikipedia.org/wiki/Radix_sort for more details. !! It is always O(N) in sorting random data, but need a O(N) buffer. !! ([Specification](../page/specs/stdlib_sorting.html#radix_sort-sorts-an-input-array)) !! pure module subroutine int32_radix_sort ( array , work , reverse ) implicit none integer ( kind = int32 ), dimension (:), intent ( inout ) :: array integer ( kind = int32 ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine int32_radix_sort pure module subroutine int64_radix_sort ( array , work , reverse ) implicit none integer ( kind = int64 ), dimension (:), intent ( inout ) :: array integer ( kind = int64 ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine int64_radix_sort module subroutine sp_radix_sort ( array , work , reverse ) implicit none real ( kind = sp ), dimension (:), intent ( inout ), target :: array real ( kind = sp ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine sp_radix_sort module subroutine dp_radix_sort ( array , work , reverse ) implicit none real ( kind = dp ), dimension (:), intent ( inout ), target :: array real ( kind = dp ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse end subroutine dp_radix_sort end interface radix_sort contains pure subroutine radix_sort_u32_helper ( N , arr , buf ) integer ( kind = int_index ), intent ( in ) :: N integer ( kind = int32 ), dimension ( N ), intent ( inout ) :: arr integer ( kind = int32 ), dimension ( N ), intent ( inout ) :: buf integer ( kind = int_index ) :: i integer :: b , b0 , b1 , b2 , b3 integer ( kind = int_index ), dimension ( 0 : radix_mask ) :: c0 , c1 , c2 , c3 c0 (:) = 0 c1 (:) = 0 c2 (:) = 0 c3 (:) = 0 do i = 1 , N b0 = iand ( arr ( i ), radix_mask_i32 ) b1 = iand ( ishft ( arr ( i ), - radix_bits_i32 ), radix_mask_i32 ) b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i32 ), radix_mask_i32 ) b3 = ishft ( arr ( i ), - 3 * radix_bits_i32 ) c0 ( b0 ) = c0 ( b0 ) + 1 c1 ( b1 ) = c1 ( b1 ) + 1 c2 ( b2 ) = c2 ( b2 ) + 1 c3 ( b3 ) = c3 ( b3 ) + 1 end do do b = 1 , radix_mask c0 ( b ) = c0 ( b ) + c0 ( b - 1 ) c1 ( b ) = c1 ( b ) + c1 ( b - 1 ) c2 ( b ) = c2 ( b ) + c2 ( b - 1 ) c3 ( b ) = c3 ( b ) + c3 ( b - 1 ) end do do i = N , 1 , - 1 b0 = iand ( arr ( i ), radix_mask_i32 ) buf ( c0 ( b0 )) = arr ( i ) c0 ( b0 ) = c0 ( b0 ) - 1 end do do i = N , 1 , - 1 b1 = iand ( ishft ( buf ( i ), - radix_bits_i32 ), radix_mask_i32 ) arr ( c1 ( b1 )) = buf ( i ) c1 ( b1 ) = c1 ( b1 ) - 1 end do do i = N , 1 , - 1 b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i32 ), radix_mask_i32 ) buf ( c2 ( b2 )) = arr ( i ) c2 ( b2 ) = c2 ( b2 ) - 1 end do do i = N , 1 , - 1 b3 = ishft ( buf ( i ), - 3 * radix_bits_i32 ) arr ( c3 ( b3 )) = buf ( i ) c3 ( b3 ) = c3 ( b3 ) - 1 end do end subroutine radix_sort_u32_helper pure subroutine radix_sort_u64_helper ( N , arr , buffer ) integer ( kind = int_index ), intent ( in ) :: N integer ( kind = int64 ), dimension ( N ), intent ( inout ) :: arr integer ( kind = int64 ), dimension ( N ), intent ( inout ) :: buffer integer ( kind = int_index ) :: i integer ( kind = int64 ) :: b , b0 , b1 , b2 , b3 , b4 , b5 , b6 , b7 integer ( kind = int_index ), dimension ( 0 : radix_mask ) :: c0 , c1 , c2 , c3 , c4 , c5 , c6 , c7 c0 (:) = 0 c1 (:) = 0 c2 (:) = 0 c3 (:) = 0 c4 (:) = 0 c5 (:) = 0 c6 (:) = 0 c7 (:) = 0 do i = 1 , N b0 = iand ( arr ( i ), radix_mask_i64 ) b1 = iand ( ishft ( arr ( i ), - radix_bits_i64 ), radix_mask_i64 ) b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i64 ), radix_mask_i64 ) b3 = iand ( ishft ( arr ( i ), - 3 * radix_bits_i64 ), radix_mask_i64 ) b4 = iand ( ishft ( arr ( i ), - 4 * radix_bits_i64 ), radix_mask_i64 ) b5 = iand ( ishft ( arr ( i ), - 5 * radix_bits_i64 ), radix_mask_i64 ) b6 = iand ( ishft ( arr ( i ), - 6 * radix_bits_i64 ), radix_mask_i64 ) b7 = ishft ( arr ( i ), - 7 * radix_bits_i64 ) c0 ( b0 ) = c0 ( b0 ) + 1 c1 ( b1 ) = c1 ( b1 ) + 1 c2 ( b2 ) = c2 ( b2 ) + 1 c3 ( b3 ) = c3 ( b3 ) + 1 c4 ( b4 ) = c4 ( b4 ) + 1 c5 ( b5 ) = c5 ( b5 ) + 1 c6 ( b6 ) = c6 ( b6 ) + 1 c7 ( b7 ) = c7 ( b7 ) + 1 end do do b = 1 , radix_mask c0 ( b ) = c0 ( b ) + c0 ( b - 1 ) c1 ( b ) = c1 ( b ) + c1 ( b - 1 ) c2 ( b ) = c2 ( b ) + c2 ( b - 1 ) c3 ( b ) = c3 ( b ) + c3 ( b - 1 ) c4 ( b ) = c4 ( b ) + c4 ( b - 1 ) c5 ( b ) = c5 ( b ) + c5 ( b - 1 ) c6 ( b ) = c6 ( b ) + c6 ( b - 1 ) c7 ( b ) = c7 ( b ) + c7 ( b - 1 ) end do do i = N , 1 , - 1 b0 = iand ( arr ( i ), radix_mask_i64 ) buffer ( c0 ( b0 )) = arr ( i ) c0 ( b0 ) = c0 ( b0 ) - 1 end do do i = N , 1 , - 1 b1 = iand ( ishft ( buffer ( i ), - radix_bits_i64 ), radix_mask_i64 ) arr ( c1 ( b1 )) = buffer ( i ) c1 ( b1 ) = c1 ( b1 ) - 1 end do do i = N , 1 , - 1 b2 = iand ( ishft ( arr ( i ), - 2 * radix_bits_i64 ), radix_mask_i64 ) buffer ( c2 ( b2 )) = arr ( i ) c2 ( b2 ) = c2 ( b2 ) - 1 end do do i = N , 1 , - 1 b3 = iand ( ishft ( buffer ( i ), - 3 * radix_bits_i64 ), radix_mask_i64 ) arr ( c3 ( b3 )) = buffer ( i ) c3 ( b3 ) = c3 ( b3 ) - 1 end do do i = N , 1 , - 1 b4 = iand ( ishft ( arr ( i ), - 4 * radix_bits_i64 ), radix_mask_i64 ) buffer ( c4 ( b4 )) = arr ( i ) c4 ( b4 ) = c4 ( b4 ) - 1 end do do i = N , 1 , - 1 b5 = iand ( ishft ( buffer ( i ), - 5 * radix_bits_i64 ), radix_mask_i64 ) arr ( c5 ( b5 )) = buffer ( i ) c5 ( b5 ) = c5 ( b5 ) - 1 end do do i = N , 1 , - 1 b6 = iand ( ishft ( arr ( i ), - 6 * radix_bits_i64 ), radix_mask_i64 ) buffer ( c6 ( b6 )) = arr ( i ) c6 ( b6 ) = c6 ( b6 ) - 1 end do do i = N , 1 , - 1 b7 = ishft ( buffer ( i ), - 7 * radix_bits_i64 ) arr ( c7 ( b7 )) = buffer ( i ) c7 ( b7 ) = c7 ( b7 ) - 1 end do end subroutine radix_sort_u64_helper pure module subroutine int32_radix_sort ( array , work , reverse ) integer ( kind = int32 ), dimension (:), intent ( inout ) :: array integer ( kind = int32 ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse integer ( kind = int_index ) :: i , N , start , middle , end integer ( kind = int32 ), dimension (:), pointer :: buffer integer ( kind = int32 ) :: item logical :: use_internal_buffer N = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < N ) then error stop \"int32_radix_sort: work array is too small.\" end if use_internal_buffer = . false . buffer => work else use_internal_buffer = . true . allocate ( buffer ( N )) end if call radix_sort_u32_helper ( N , array , buffer ) if ( array ( 1 ) >= 0 . and . array ( N ) < 0 ) then start = 1 end = N middle = ( 1 + N ) / 2 do while (. true .) if ( array ( middle ) >= 0 ) then start = middle + 1 else end = middle end if middle = ( start + end ) / 2 if ( start == end ) exit end do buffer ( 1 :( N - middle + 1 )) = array ( middle : N ) buffer ( N - middle + 2 : N ) = array ( 1 : middle - 1 ) array (:) = buffer (:) end if if ( pic_optional ( reverse , . false .)) then do i = 1 , N / 2 item = array ( i ) array ( i ) = array ( N - i + 1 ) array ( N - i + 1 ) = item end do end if if ( use_internal_buffer ) then deallocate ( buffer ) end if end subroutine int32_radix_sort module subroutine sp_radix_sort ( array , work , reverse ) use iso_c_binding , only : c_loc , c_f_pointer real ( kind = sp ), dimension (:), intent ( inout ), target :: array real ( kind = sp ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse integer ( kind = int_index ) :: i , N , pos , rev_pos integer ( kind = int32 ), dimension (:), pointer :: arri32 integer ( kind = int32 ), dimension (:), pointer :: buffer real ( kind = sp ) :: item logical :: use_internal_buffer N = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < N ) then error stop \"sp_radix_sort: work array is too small.\" end if use_internal_buffer = . false . call c_f_pointer ( c_loc ( work ), buffer , [ N ]) else use_internal_buffer = . true . allocate ( buffer ( N )) end if call c_f_pointer ( c_loc ( array ), arri32 , [ N ]) call radix_sort_u32_helper ( N , arri32 , buffer ) ! After calling `radix_sort_u<width>_helper. The array is sorted as unsigned integers. ! The positive real number is sorted, guaranteed by IEEE-754 standard. ! But the negative real number is sorted in a reversed order, and also in the tail of array. ! Remark that -0.0 is the minimum nagative integer, so using radix sort, -0.0 is naturally lesser than 0.0. ! In IEEE-754 standard, the bit representation of `Inf` is greater than all positive real numbers, ! and the `-Inf` is lesser than all negative real numbers. So the order of `Inf, -Inf` is ok. ! The bit representation of `NaN` may be positive or negative integers in different machine, ! thus if the array contains `NaN`, the result is undefined. if ( arri32 ( 1 ) >= 0 . and . arri32 ( N ) < 0 ) then pos = 1 rev_pos = N do while ( arri32 ( rev_pos ) < 0 ) buffer ( pos ) = arri32 ( rev_pos ) pos = pos + 1 rev_pos = rev_pos - 1 end do buffer ( pos : N ) = arri32 ( 1 : rev_pos ) arri32 (:) = buffer (:) end if if ( pic_optional ( reverse , . false .)) then do i = 1 , N / 2 item = array ( i ) array ( i ) = array ( N - i + 1 ) array ( N - i + 1 ) = item end do end if if ( use_internal_buffer ) then deallocate ( buffer ) end if end subroutine sp_radix_sort pure module subroutine int64_radix_sort ( array , work , reverse ) integer ( kind = int64 ), dimension (:), intent ( inout ) :: array integer ( kind = int64 ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse integer ( kind = int_index ) :: i , N , start , middle , end integer ( kind = int64 ), dimension (:), pointer :: buffer integer ( kind = int64 ) :: item logical :: use_internal_buffer N = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < N ) then error stop \"int64_radix_sort: work array is too small.\" end if use_internal_buffer = . false . buffer => work else use_internal_buffer = . true . allocate ( buffer ( N )) end if call radix_sort_u64_helper ( N , array , buffer ) if ( array ( 1 ) >= 0 . and . array ( N ) < 0 ) then start = 1 end = N middle = ( 1 + N ) / 2 do while (. true .) if ( array ( middle ) >= 0 ) then start = middle + 1 else end = middle end if middle = ( start + end ) / 2 if ( start == end ) exit end do buffer ( 1 :( N - middle + 1 )) = array ( middle : N ) buffer ( N - middle + 2 : N ) = array ( 1 : middle - 1 ) array (:) = buffer (:) end if if ( pic_optional ( reverse , . false .)) then do i = 1 , N / 2 item = array ( i ) array ( i ) = array ( N - i + 1 ) array ( N - i + 1 ) = item end do end if if ( use_internal_buffer ) then deallocate ( buffer ) end if end subroutine int64_radix_sort module subroutine dp_radix_sort ( array , work , reverse ) use iso_c_binding , only : c_loc , c_f_pointer real ( kind = dp ), dimension (:), intent ( inout ), target :: array real ( kind = dp ), dimension (:), intent ( inout ), target , optional :: work logical , intent ( in ), optional :: reverse integer ( kind = int_index ) :: i , N , pos , rev_pos integer ( kind = int64 ), dimension (:), pointer :: arri64 integer ( kind = int64 ), dimension (:), pointer :: buffer real ( kind = dp ) :: item logical :: use_internal_buffer N = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < N ) then error stop \"sp_radix_sort: work array is too small.\" end if use_internal_buffer = . false . call c_f_pointer ( c_loc ( work ), buffer , [ N ]) else use_internal_buffer = . true . allocate ( buffer ( N )) end if call c_f_pointer ( c_loc ( array ), arri64 , [ N ]) call radix_sort_u64_helper ( N , arri64 , buffer ) if ( arri64 ( 1 ) >= 0 . and . arri64 ( N ) < 0 ) then pos = 1 rev_pos = N do while ( arri64 ( rev_pos ) < 0 ) buffer ( pos ) = arri64 ( rev_pos ) pos = pos + 1 rev_pos = rev_pos - 1 end do buffer ( pos : N ) = arri64 ( 1 : rev_pos ) arri64 (:) = buffer (:) end if if ( pic_optional ( reverse , . false .)) then do i = 1 , N / 2 item = array ( i ) array ( i ) = array ( N - i + 1 ) array ( N - i + 1 ) = item end do end if if ( use_internal_buffer ) then deallocate ( buffer ) end if end subroutine dp_radix_sort !end submodule pic_sorting_radix_sort end module pic_sorting_radix_sort","tags":"","url":"sourcefile/pic_sorting_radix_sort.f90.html"},{"title":"pic_knowledge.f90 – PIC","text":"the gathered knowledge of the species This file depends on sourcefile~~pic_knowledge.f90~~EfferentGraph sourcefile~pic_knowledge.f90 pic_knowledge.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_knowledge.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! the gathered knowledge of the species module pic_knowledge !! a simple module that collects phrases and prints them out randomly, like fortune use pic_types , only : int32 , dp implicit none private public :: get_knowledge contains subroutine get_knowledge () !! I print random knowledge character ( len = 64 ), allocatable :: knowledge (:) integer ( int32 ) :: n , idx real ( dp ) :: r allocate ( knowledge ( 3 )) knowledge = [ & \"The long line! (CS,2023)                                        \" , & \"Maybe I have the Fortran brain-rot in Dijkstra's words (IP,2025)\" , & \"Mojo, yes, do I approve it, no. (IP, 2025)                      \" & ] n = size ( knowledge ) call random_number ( r ) idx = int ( r * n ) + 1 if ( idx > n ) idx = n print * , 'Random knowledge: ' , trim ( knowledge ( idx )) end subroutine get_knowledge end module pic_knowledge","tags":"","url":"sourcefile/pic_knowledge.f90.html"},{"title":"pic_mpi.F90 – PIC","text":"The pic_mpi.F90 file is the main interface to the MPI implementation, it should\nbe done in such a way that we can compile the library with and without MPI\nit will be a pain in general, but meh, let’s see what we can do This file depends on sourcefile~~pic_mpi.f90~~EfferentGraph sourcefile~pic_mpi.f90 pic_mpi.F90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_mpi.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! The pic_mpi.F90 file is the main interface to the MPI implementation, it should !! be done in such a way that we can compile the library with and without MPI !! it will be a pain in general, but meh, let's see what we can do module pic_mpi !! General MPI interface module use pic_types , only : int32 use mpi_f08 , only : MPI_COMM , MPI_COMM_WORLD , MPI_Init , MPI_Finalize , & MPI_Comm_size , MPI_Comm_rank implicit none private public :: pic_comm_type type :: pic_comm_type !! custom data type that holds the MPI communicators private type ( MPI_COMM ), public :: comm !! use the MPI_COMM from the mpi_f08 module interface integer ( int32 ), public :: m_rank !! MPI rank integer ( int32 ), public :: m_size !! MPI size integer ( int32 ), public :: m_ierr contains procedure :: init => pic_comm_init procedure :: finalize => pic_comm_finalize end type pic_comm_type type ( pic_comm_type ), public :: world_comm !! our world comm contains subroutine pic_comm_init ( self ) !! initilalize the MPI library and get the size and rank variables class ( pic_comm_type ), intent ( inout ) :: self integer ( int32 ) :: ierr , rank , size call MPI_Init ( ierr ) self % m_ierr = ierr self % comm = MPI_COMM_WORLD call MPI_Comm_size ( self % comm , size , ierr ) call MPI_Comm_rank ( self % comm , rank , ierr ) self % m_size = size self % m_rank = rank end subroutine pic_comm_init subroutine pic_comm_finalize ( self ) !! finalize the MPI library class ( pic_comm_type ), intent ( inout ) :: self integer ( int32 ) :: ierr call MPI_Finalize ( ierr ) self % m_ierr = ierr end subroutine pic_comm_finalize end module pic_mpi","tags":"","url":"sourcefile/pic_mpi.f90.html"},{"title":"pic_sorting.f90 – PIC","text":"This file is subject both to the Fortran Standard Library license, and\nto additional licensing requirements as it contains translations of\nother software. The Fortran Standard Library, including this file, is distributed under\nthe MIT license that should be included with the library’s distribution. Copyright (c) 2021 Fortran stdlib developers Permission is hereby granted, free of charge, to any person obtaining a\n  copy of this software and associated documentation files (the\n  “Software”),  to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sellcopies of the Software, and to permit\n  persons to whom the Software is furnished to do so, subject to the\n  following conditions: The above copyright notice and this permission notice shall be included\n  in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Two of the generic subroutines, ORD_SORT and SORT_INDEX , are\nsubstantially translations to Fortran 2008 of the \"Rust\" sort sorting\nroutines in slice.rs The rust sort implementation is distributed with the header: Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n  file at the top-level directory of this distribution and at\n  http://rust-lang.org/COPYRIGHT. Licensed under the Apache License, Version 2.0 or the MIT license , at your\n  option. This file may not be copied, modified, or distributed\n  except according to those terms. so the license for the original slice.rs code is compatible with the use\nof modified versions of the code in the Fortran Standard Library under\nthe MIT license. One of the generic subroutines, SORT , is substantially a\ntranslation to Fortran 2008, of the introsort of David Musser.\nDavid Musser has given permission to include a variant of introsort in the Fortran Standard Library under the MIT license provided\nwe cite: Musser, D.R., “Introspective Sorting and Selection Algorithms,”\n  Software—Practice and Experience, Vol. 27(8), 983–993 (August 1997). as the official source of the algorithm. This file depends on sourcefile~~pic_sorting.f90~~EfferentGraph sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_sorting.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_ord_sort.f90 pic_sorting_ord_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_ord_sort.f90 sourcefile~pic_sorting_radix_sort.f90 pic_sorting_radix_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_radix_sort.f90 sourcefile~pic_sorting_sort.f90 pic_sorting_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort.f90 sourcefile~pic_sorting_sort_index.f90 pic_sorting_sort_index.F90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort_index.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_sorting.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! Licensing: !! !! This file is subject both to the Fortran Standard Library license, and !! to additional licensing requirements as it contains translations of !! other software. !! !! The Fortran Standard Library, including this file, is distributed under !! the MIT license that should be included with the library's distribution. !! !!   Copyright (c) 2021 Fortran stdlib developers !! !!   Permission is hereby granted, free of charge, to any person obtaining a !!   copy of this software and associated documentation files (the !!   \"Software\"),  to deal in the Software without restriction, including !!   without limitation the rights to use, copy, modify, merge, publish, !!   distribute, sublicense, and/or sellcopies of the Software, and to permit !!   persons to whom the Software is furnished to do so, subject to the !!   following conditions: !! !!   The above copyright notice and this permission notice shall be included !!   in all copies or substantial portions of the Software. !! !!   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS !!   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF !!   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. !!   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY !!   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, !!   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE !!   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. !! !! Two of the generic subroutines, `ORD_SORT` and `SORT_INDEX`, are !! substantially translations to Fortran 2008 of the `\"Rust\" sort` sorting !! routines in !! [`slice.rs`](https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs) !! The `rust sort` implementation is distributed with the header: !! !!   Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT !!   file at the top-level directory of this distribution and at !!   http://rust-lang.org/COPYRIGHT. !! !!   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or !!   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license !!   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your !!   option. This file may not be copied, modified, or distributed !!   except according to those terms. !! !! so the license for the original`slice.rs` code is compatible with the use !! of modified versions of the code in the Fortran Standard Library under !! the MIT license. !! !! One of the generic subroutines, `SORT`, is substantially a !! translation to Fortran 2008, of the `introsort` of David Musser. !! David Musser has given permission to include a variant of `introsort` !! in the Fortran Standard Library under the MIT license provided !! we cite: !! !!   Musser, D.R., “Introspective Sorting and Selection Algorithms,” !!   Software—Practice and Experience, Vol. 27(8), 983–993 (August 1997). !! !! as the official source of the algorithm. ! taken from the Fortran stdlib project since the stdlib does not build with the nvidia compilers ! and I need portability module pic_sorting !! This module implements overloaded sorting subroutines named `ORD_SORT`, !! `SORT_INDEX`, and `SORT`, that each can be used to sort two kinds !! of `INTEGER` arrays, two kinds of `REAL` arrays, `character(len=*)` arrays !! !! By default sorting is in order of !! increasing value, but there is an option to sort in decreasing order. !! All the subroutines have worst case run time performance of `O(N Ln(N))`, !! but on largely sorted data `ORD_SORT` and `SORT_INDEX` can have a run time !! performance of `O(N)`. !! !! `ORD_SORT` is a translation of the `\"Rust\" sort` sorting algorithm in !! `slice.rs`: !! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs !! which in turn is inspired by the `timsort` algorithm of Tim Peters, !! http://svn.python.org/projects/python/trunk/Objects/listsort.txt. !! `ORD_SORT` is a hybrid stable comparison algorithm combining `merge sort`, !! and `insertion sort`. It is always at worst O(N Ln(N)) in sorting random !! data, having a performance about 25% slower than `SORT` on such !! data, but has much better performance than `SORT` on partially !! sorted data, having O(N) performance on uniformly non-increasing or !! non-decreasing data. !! !! `SORT_INDEX` is a modification of `ORD_SORT` so that in addition to !! sorting the input array, it returns the indices that map to a !! stable sort of the original array. These indices are !! intended to be used to sort data that is correlated with the input !! array, e.g., different arrays in a database, different columns of a !! rank 2 array, different elements of a derived type. It is less !! efficient than `ORD_SORT` at sorting a simple array. !! !! `SORT` uses the `INTROSORT` sorting algorithm of David Musser, !! http://www.cs.rpi.edu/~musser/gp/introsort.ps. `introsort` is a hybrid !! unstable comparison algorithm combining `quicksort`, `insertion sort`, and !! `heap sort`. While this algorithm is always O(N Ln(N)) it is relatively !! fast on randomly ordered data, but inconsistent in performance on partly !! sorted data, sometimes having `merge sort` performance, sometimes having !! better than `quicksort` performance. `UNORD_SOORT` is about 25% !! more efficient than `ORD_SORT` at sorting purely random data, but af an !! order of `Ln(N)` less efficient at sorting partially sorted data. use pic_types , only : & int32 , & int64 , & sp , & dp use pic_optional_value , only : pic_optional use pic_sorting_ord_sort , only : ord_sort use pic_sorting_radix_sort , only : radix_sort use pic_sorting_sort , only : sort use pic_sorting_sort_index , only : sort_index implicit none private public :: ord_sort , sort_index , sort , radix_sort end module pic_sorting","tags":"","url":"sourcefile/pic_sorting.f90.html"},{"title":"stdlib_pic_hash_32bit_fnv.f90 – PIC","text":"FNV_1_HASH and FNV_1A_Hash are translations to Fortran 2008 of the FNV-1 and FNV-1a hash functions of Glenn Fowler, Landon Curt Noll,\n and Phong Vo, that has been released into the public domain. Permission\n has been granted, by Landon Curt Noll, for the use of these algorithms\n in the Fortran Standard Library. A description of these functions is\n available at https://en.wikipedia.org/wiki/Fowler–Noll–Vo_hash_function. This file depends on sourcefile~~stdlib_pic_hash_32bit_fnv.f90~~EfferentGraph sourcefile~stdlib_pic_hash_32bit_fnv.f90 stdlib_pic_hash_32bit_fnv.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~stdlib_pic_hash_32bit_fnv.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~stdlib_pic_hash_32bit_fnv.f90~~AfferentGraph sourcefile~stdlib_pic_hash_32bit_fnv.f90 stdlib_pic_hash_32bit_fnv.f90 sourcefile~stdlib_pic_hash_32bit.f90 stdlib_pic_hash_32bit.f90 sourcefile~stdlib_pic_hash_32bit.f90->sourcefile~stdlib_pic_hash_32bit_fnv.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !!------------------------------------------------------------------------------ !! `FNV_1_HASH` and  `FNV_1A_Hash` are translations to Fortran 2008 of the !! `FNV-1` and `FNV-1a` hash functions of Glenn Fowler, Landon Curt Noll, !! and Phong Vo, that has been released into the public domain. Permission !! has been granted, by Landon Curt Noll, for the use of these algorithms !! in the Fortran Standard Library. A description of these functions is !! available at https://en.wikipedia.org/wiki/Fowler–Noll–Vo_hash_function. !!------------------------------------------------------------------------------ !#! Integer kinds to be considered during templating module stdlib_pic_hash_32bit_fnv !! An implementation of the FNV hashes 1 and 1a of Glenn Fowler, Landon Curt !! Noll, and Kiem-Phong-Vo, !! https://en.wikipedia.org/wiki/Fowler–Noll–Vo_hash_function use , intrinsic :: iso_fortran_env , only : & character_storage_size use pic_types , only : int8 , int16 , int32 , int64 , dp implicit none private public :: fnv_1_hash , fnv_1a_hash integer , parameter , public :: & int_hash = int32 integer ( int_hash ), parameter :: & offset_basis = int ( z '811C9DC5' , int_hash ), & prime = int ( z '01000193' , int_hash ) !! The number of bits in the output hash ! The number of bits used by each integer type integer , parameter :: & ! Should be 8 bits_int8 = bit_size ( 0_int8 ), & ! Should be 16 bits_int16 = bit_size ( 0_int16 ), & ! Should be 32 bits_int32 = bit_size ( 0_int32 ), & ! Should be 64 bits_int64 = bit_size ( 0_int64 ) integer , parameter :: & ! Should be 1 bytes_int8 = bits_int8 / bits_int8 , & ! Should be 2 bytes_int16 = bits_int16 / bits_int8 , & ! Should be 4 bytes_int32 = bits_int32 / bits_int8 , & ! Should be 8 bytes_int64 = bits_int64 / bits_int8 integer , parameter :: & bits_char = character_storage_size , & bytes_char = bits_char / bits_int8 ! Dealing with different endians logical , parameter , public :: & little_endian = ( 1 == transfer ([ 1_int8 , 0_int8 ], 0_int16 )) interface fnv_1_hash !! Version: experimental !! !! FNV_1 interfaces !! ([Specification](../page/specs/stdlib_hash_procedures.html#fnv_1_hash-calculates-a-hash-code-from-a-key)) pure module function int8_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int8 implicit none integer ( int8 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int8_fnv_1 pure module function int16_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int16 implicit none integer ( int16 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int16_fnv_1 pure module function int32_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int32 implicit none integer ( int32 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int32_fnv_1 pure module function int64_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for rank 1 array keys of kind int64 implicit none integer ( int64 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code end function int64_fnv_1 elemental module function character_fnv_1 ( key ) result ( hash_code ) !! FNV_1 hash function for default character string keys implicit none character ( * ), intent ( in ) :: key integer ( int_hash ) :: hash_code end function character_fnv_1 end interface fnv_1_hash interface fnv_1a_hash !! Version: experimental !! !! FNV_1A interfaces !! ([Specification](../page/specs/stdlib_hash_procedures.html#fnv_1a_hash-calculates-a-hash-code-from-a-key)) pure module function int8_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int8 implicit none integer ( int8 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int8_fnv_1a pure module function int16_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int16 implicit none integer ( int16 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int16_fnv_1a pure module function int32_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int32 implicit none integer ( int32 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int32_fnv_1a pure module function int64_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for rank 1 array keys of kind int64 implicit none integer ( int64 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_value end function int64_fnv_1a elemental module function character_fnv_1a ( key ) result ( hash_value ) !! FNV_1A hash function for default character string keys implicit none character ( * ), intent ( in ) :: key integer ( int_hash ) :: hash_value end function character_fnv_1a end interface fnv_1a_hash contains pure module function int8_fnv_1 ( key ) result ( hash_code ) !! The original FNV-1 8-bit key algorithm. integer ( int8 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code integer ( int64 ) :: i hash_code = offset_basis do i = 1_int64 , size ( key , kind = int64 ) hash_code = hash_code * prime if ( little_endian ) then hash_code = ieor ( hash_code , & transfer ([ key ( i ), 0_int8 , 0_int8 , 0_int8 ], & 0_int_hash )) else hash_code = ieor ( hash_code , & transfer ([ 0_int8 , 0_int8 , 0_int8 , key ( i )], & 0_int_hash )) end if end do end function int8_fnv_1 pure module function int16_fnv_1 ( key ) result ( hash_code ) ! A int16 array key wrapper for the FNV-1 algorithm. integer ( int16 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code hash_code = int8_fnv_1 ( transfer ( key , 0_int8 , & bytes_int16 * & size ( key , kind = int64 ))) end function int16_fnv_1 pure module function int32_fnv_1 ( key ) result ( hash_code ) ! A int32 array key wrapper for the FNV-1 algorithm. integer ( int32 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code hash_code = int8_fnv_1 ( transfer ( key , 0_int8 , & bytes_int32 * & size ( key , kind = int64 ))) end function int32_fnv_1 pure module function int64_fnv_1 ( key ) result ( hash_code ) ! A int64 array key wrapper for the FNV-1 algorithm. integer ( int64 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code hash_code = int8_fnv_1 ( transfer ( key , 0_int8 , & bytes_int64 * & size ( key , kind = int64 ))) end function int64_fnv_1 elemental module function character_fnv_1 ( key ) result ( hash_code ) ! A default character key wrapper for the FNV-1 algorithm. character ( * ), intent ( in ) :: key integer ( int_hash ) :: hash_code hash_code = int8_fnv_1 ( transfer ( key , & 0_int8 , & bytes_char * & len ( key , kind = int64 ))) end function character_fnv_1 pure module function int8_fnv_1a ( key ) result ( hash_code ) !! The original FNV-1a 8-bit key algorithm. integer ( int8 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code integer ( int64 ) :: i hash_code = offset_basis do i = 1_int64 , size ( key , kind = int64 ) if ( little_endian ) then hash_code = ieor ( hash_code , & transfer ([ key ( i ), 0_int8 , 0_int8 , 0_int8 ], & 0_int_hash )) else hash_code = ieor ( hash_code , & transfer ([ 0_int8 , 0_int8 , 0_int8 , key ( i )], & 0_int_hash )) end if hash_code = hash_code * prime end do end function int8_fnv_1a pure module function int16_fnv_1a ( key ) result ( hash_code ) ! A int16 array key wrapper for the FNV-1a algorithm. integer ( int16 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code hash_code = int8_fnv_1a ( transfer ( key , 0_int8 , & bytes_int16 * & size ( key , kind = int64 ))) end function int16_fnv_1a pure module function int32_fnv_1a ( key ) result ( hash_code ) ! A int32 array key wrapper for the FNV-1a algorithm. integer ( int32 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code hash_code = int8_fnv_1a ( transfer ( key , 0_int8 , & bytes_int32 * & size ( key , kind = int64 ))) end function int32_fnv_1a pure module function int64_fnv_1a ( key ) result ( hash_code ) ! A int64 array key wrapper for the FNV-1a algorithm. integer ( int64 ), intent ( in ) :: key (:) integer ( int_hash ) :: hash_code hash_code = int8_fnv_1a ( transfer ( key , 0_int8 , & bytes_int64 * & size ( key , kind = int64 ))) end function int64_fnv_1a elemental module function character_fnv_1a ( key ) result ( hash_code ) ! A default character key wrapper for the FNV-1 algorithm. character ( * ), intent ( in ) :: key integer ( int_hash ) :: hash_code hash_code = int8_fnv_1a ( transfer ( key , 0_int8 , & ( bits_char / bits_int8 ) * & len ( key , kind = int64 ))) end function character_fnv_1a end module stdlib_pic_hash_32bit_fnv","tags":"","url":"sourcefile/stdlib_pic_hash_32bit_fnv.f90.html"},{"title":"pic_string_type.f90 – PIC","text":"experimental pic string type, it is still in alpha This file depends on sourcefile~~pic_string_type.f90~~EfferentGraph sourcefile~pic_string_type.f90 pic_string_type.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_string_type.f90->sourcefile~pic_optional.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_string_type.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! experimental pic string type, it is still in alpha module pic_string_mod !! a simple string type with basic functionalities use pic_types , only : int64 use pic_optional_value , only : pic_optional implicit none private public :: pic_string_type public :: operator ( == ), operator ( /= ) type :: pic_string_type !! pic_string_type holds a dynamic string, intends to be similar to std::string in C++ character ( len = :), allocatable :: buf integer ( int64 ) :: len = 0_int64 integer ( int64 ) :: cap = 0_int64 contains ! queries procedure :: size => pic_string_size procedure :: capacity => pic_string_capacity procedure :: empty => pic_string_empty procedure :: starts_with => pic_string_starts_with procedure :: ends_with => pic_string_ends_with ! modifiers procedure :: clear => pic_string_clear procedure :: reserve => pic_string_reserve procedure :: assign => pic_string_assign procedure :: append => pic_string_append procedure :: push_back => pic_string_push_back procedure :: to_char => pic_string_to_char ! in type bindings: procedure :: get => pic_string_get procedure :: set => pic_string_set ! trimming procedure :: ltrim => pic_string_ltrim procedure :: rtrim => pic_string_rtrim procedure :: trim => pic_string_trim ! search & slicing procedure :: find => pic_string_find procedure :: substr => pic_string_substr procedure :: shrink_to_fit => pic_string_shrink_to_fit procedure :: release => pic_string_release ! finalizer final :: pic_string_finalize end type pic_string_type interface operator ( == ) module procedure pic_string_eq_string module procedure pic_string_eq_char module procedure char_eq_pic_string end interface interface operator ( /= ) module procedure pic_string_ne_string module procedure pic_string_ne_char module procedure char_ne_pic_string end interface contains subroutine ensure_capacity ( self , need ) !! helper routine to ensure that the string container has enough !! capacity to hold a new size 'need' class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: need integer ( int64 ) :: target character ( len = :), allocatable :: tmp if ( need <= self % cap ) return if ( self % cap <= 0_int64 ) then target = max ( need , 64_int64 ) else target = self % cap do while ( target < need ) target = 2_int64 * target end do end if allocate ( character ( len = target ) :: tmp ) if ( self % len > 0 . and . allocated ( self % buf )) tmp ( 1 : self % len ) = self % buf ( 1 : self % len ) call move_alloc ( tmp , self % buf ) self % cap = target end subroutine ensure_capacity pure function pic_string_size ( self ) result ( res ) !! return the current size of the string class ( pic_string_type ), intent ( in ) :: self integer ( int64 ) :: res res = self % len end function pic_string_size pure function pic_string_capacity ( self ) result ( res ) !! return the current capacity of the string class ( pic_string_type ), intent ( in ) :: self integer ( int64 ) :: res res = self % cap end function pic_string_capacity pure function pic_string_empty ( self ) result ( res ) !! return true if the string is empty class ( pic_string_type ), intent ( in ) :: self logical :: res res = ( self % len == 0_int64 ) end function pic_string_empty subroutine pic_string_clear ( self ) !! clear the string content class ( pic_string_type ), intent ( inout ) :: self self % len = 0_int64 end subroutine pic_string_clear subroutine pic_string_reserve ( self , n ) !! ensure the string has capacity for at least n characters class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: n call ensure_capacity ( self , n ) end subroutine pic_string_reserve subroutine pic_string_assign ( self , s ) !! assign a new value to the string class ( pic_string_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: s integer ( int64 ) :: n n = int ( len ( s ), int64 ) call ensure_capacity ( self , n ) if ( n > 0 ) self % buf ( 1 : n ) = s self % len = n end subroutine pic_string_assign subroutine pic_string_append ( self , s ) !! append a string to the current string class ( pic_string_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: s integer ( int64 ) :: n , i0 , i1 n = int ( len ( s ), int64 ) i0 = self % len + 1_int64 i1 = self % len + n call ensure_capacity ( self , i1 ) if ( n > 0 ) self % buf ( i0 : i1 ) = s self % len = i1 end subroutine pic_string_append subroutine pic_string_push_back ( self , ch ) !! append a single character to the current string class ( pic_string_type ), intent ( inout ) :: self character ( 1 ), intent ( in ) :: ch call ensure_capacity ( self , self % len + 1_int64 ) self % len = self % len + 1_int64 self % buf ( self % len : self % len ) = ch end subroutine pic_string_push_back function pic_string_to_char ( self ) result ( out ) !! convert the pic_string_type to a standard Fortran character string class ( pic_string_type ), intent ( in ) :: self character ( len = self % len ) :: out if ( self % len > 0 ) out = self % buf ( 1 : self % len ) end function pic_string_to_char !----------------- trimming ----------------- subroutine pic_string_ltrim ( self ) !! trim leading whitespace characters class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ) :: i , n , k if (. not . allocated ( self % buf )) return if ( self % len == 0_int64 ) return i = 1_int64 do if ( i > self % len ) exit if ( self % buf ( i : i ) <= ' ' ) then i = i + 1_int64 else exit end if end do if ( i > 1_int64 ) then n = self % len - ( i - 1_int64 ) if ( n > 0_int64 ) then do k = 1_int64 , n self % buf ( k : k ) = self % buf ( i + k - 1_int64 : i + k - 1_int64 ) end do end if self % len = max ( 0_int64 , n ) end if end subroutine pic_string_ltrim subroutine pic_string_rtrim ( self ) !! trim trailing whitespace characters class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ) :: j if (. not . allocated ( self % buf ) . or . self % len == 0_int64 ) return j = self % len do if ( j < 1_int64 ) exit if ( self % buf ( j : j ) <= ' ' ) then j = j - 1_int64 else exit end if end do self % len = max ( 0_int64 , j ) end subroutine pic_string_rtrim subroutine pic_string_trim ( self ) !! trim leading and trailing whitespace characters class ( pic_string_type ), intent ( inout ) :: self call self % rtrim () call self % ltrim () end subroutine pic_string_trim !----------------- queries ----------------- pure logical function pic_string_starts_with ( self , pat ) result ( ok ) !! return true if the string starts with the given pattern class ( pic_string_type ), intent ( in ) :: self character ( * ), intent ( in ) :: pat integer :: m m = len ( pat ) ok = ( self % len >= m . and . ( m == 0 . or . self % buf ( 1 : m ) == pat )) end function pic_string_starts_with pure logical function pic_string_ends_with ( self , pat ) result ( ok ) !! return true if the string ends with the given pattern class ( pic_string_type ), intent ( in ) :: self character ( * ), intent ( in ) :: pat integer :: m m = len ( pat ) ok = ( self % len >= m . and . ( m == 0 . or . self % buf ( self % len - m + 1 : self % len ) == pat )) end function pic_string_ends_with !----------------- search & slicing ----------------- pure integer ( int64 ) function pic_string_find ( self , pat , from ) result ( pos ) !! find the first occurrence of pattern 'pat' in the string use pic_optional_value , only : pic_optional class ( pic_string_type ), intent ( in ) :: self character ( * ), intent ( in ) :: pat integer ( int64 ), optional , intent ( in ) :: from integer ( int64 ) :: nlen , i0 , j , j_end , m character ( len = :), allocatable :: s pos = 0_int64 nlen = self % len if ( nlen == 0_int64 ) return m = int ( len ( pat ), int64 ) if ( m == 0_int64 ) return i0 = pic_optional ( from , 1_int64 ) if ( i0 < 1_int64 . or . i0 > nlen ) return if ( m > nlen - i0 + 1_int64 ) return allocate ( character ( len = nlen ) :: s ) s = self % buf ( 1 : nlen ) j_end = nlen - m + 1_int64 do j = i0 , j_end if ( s ( j : j + m - 1_int64 ) == pat ) then pos = j return end if end do end function pic_string_find function pic_string_substr ( self , i , n ) result ( out ) !! return a substring starting at index i (1-based) with length n class ( pic_string_type ), intent ( in ) :: self integer ( int64 ), intent ( in ) :: i , n type ( pic_string_type ) :: out integer ( int64 ) :: i2 , n2 integer :: is , ie , nn ! default INTEGER for substring bounds character ( len = :), allocatable :: tmp out % len = 0_int64 ; out % cap = 0_int64 if (. not . allocated ( self % buf )) return if ( self % len == 0_int64 . or . n <= 0_int64 . or . i > self % len ) return i2 = max ( 1_int64 , i ) n2 = min ( self % len - i2 + 1_int64 , n ) if ( n2 <= 0_int64 ) return ! cast bounds to default INTEGER before slicing is = int ( i2 ) ie = int ( i2 + n2 - 1_int64 ) nn = int ( n2 ) allocate ( character ( len = nn ) :: tmp ) tmp = self % buf ( is : ie ) ! <- exact-size RHS, default-int bounds call out % reserve ( n2 ) out % buf ( 1 : nn ) = tmp out % len = n2 end function pic_string_substr !----------------- equality operators ----------------- pure logical function pic_string_eq_string ( a , b ) result ( ok ) !! return true if the two strings are equal class ( pic_string_type ), intent ( in ) :: a class ( pic_string_type ), intent ( in ) :: b ok = ( a % len == b % len ) if ( ok . and . a % len > 0_int64 ) ok = ( a % buf ( 1 : a % len ) == b % buf ( 1 : b % len )) end function pic_string_eq_string pure logical function pic_string_eq_char ( a , c ) result ( ok ) !! return true if the pic_string_type is equal to the character string class ( pic_string_type ), intent ( in ) :: a character ( * ), intent ( in ) :: c ok = ( a % len == len ( c )) if ( ok . and . a % len > 0_int64 ) ok = ( a % buf ( 1 : a % len ) == c ) end function pic_string_eq_char pure logical function char_eq_pic_string ( c , a ) result ( ok ) !! return true if the character string is equal to the pic_string_type character ( * ), intent ( in ) :: c class ( pic_string_type ), intent ( in ) :: a ok = ( a == c ) end function char_eq_pic_string pure logical function pic_string_ne_string ( a , b ) result ( ok ) !! return true if the two strings are not equal class ( pic_string_type ), intent ( in ) :: a class ( pic_string_type ), intent ( in ) :: b ok = . not . ( a == b ) end function pic_string_ne_string pure logical function pic_string_ne_char ( a , c ) result ( ok ) !! return true if the pic_string_type is not equal to the character string class ( pic_string_type ), intent ( in ) :: a character ( * ), intent ( in ) :: c ok = . not . ( a == c ) end function pic_string_ne_char pure logical function char_ne_pic_string ( c , a ) result ( ok ) !! return true if the character string is not equal to the pic_string_type character ( * ), intent ( in ) :: c class ( pic_string_type ), intent ( in ) :: a ok = . not . ( a == c ) end function char_ne_pic_string subroutine pic_string_finalize ( self ) !! finalizer to deallocate the string buffer type type ( pic_string_type ), intent ( inout ) :: self if ( allocated ( self % buf )) deallocate ( self % buf ) self % len = 0_int64 ; self % cap = 0_int64 end subroutine pic_string_finalize subroutine pic_string_shrink_to_fit ( self ) !! shrink the capacity to fit the current size class ( pic_string_type ), intent ( inout ) :: self character ( len = :), allocatable :: tmp if (. not . allocated ( self % buf )) return if ( self % len == 0_int64 ) then deallocate ( self % buf ); self % cap = 0_int64 else allocate ( character ( len = self % len ) :: tmp ) tmp ( 1 : self % len ) = self % buf ( 1 : self % len ) call move_alloc ( tmp , self % buf ) self % cap = self % len end if end subroutine pic_string_shrink_to_fit subroutine pic_string_release ( self ) !! release the internal buffer and reset the string class ( pic_string_type ), intent ( inout ) :: self if ( allocated ( self % buf )) deallocate ( self % buf ) self % len = 0_int64 ; self % cap = 0_int64 end subroutine pic_string_release pure character ( 1 ) function pic_string_get ( self , i ) result ( ch ) !! get the character at position i (1-based) class ( pic_string_type ), intent ( in ) :: self integer ( int64 ), intent ( in ) :: i if ( i < 1_int64 . or . i > self % len ) then ch = achar ( 0 ) ! or stop/error; choose your policy ! erorr stop \"Index out of bounds in pic_string_get\" else ch = self % buf ( i : i ) end if end function pic_string_get subroutine pic_string_set ( self , i , ch ) !! set the character at position i (1-based) class ( pic_string_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: i character ( 1 ), intent ( in ) :: ch if ( i < 1_int64 . or . i > self % len ) then !error stop \"Index out of bounds in pic_string_set\" return end if self % buf ( i : i ) = ch end subroutine pic_string_set end module pic_string_mod","tags":"","url":"sourcefile/pic_string_type.f90.html"},{"title":"pic_types.F90 – PIC","text":"pic_types.F90 controls the standarized sizes for the datatypes across\npic, this is key for interfacing with other codes specially those that\nuse default sizes Files dependent on this one sourcefile~~pic_types.f90~~AfferentGraph sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_array.f90 pic_array.f90 sourcefile~pic_array.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_array.f90->sourcefile~pic_optional.f90 sourcefile~pic_string_utils.f90 pic_string_utils.f90 sourcefile~pic_array.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_blas_interfaces.f90 pic_blas_interfaces.F90 sourcefile~pic_blas_interfaces.f90->sourcefile~pic_types.f90 sourcefile~pic_command_line.f90 pic_command_line.f90 sourcefile~pic_command_line.f90->sourcefile~pic_types.f90 sourcefile~pic_constants.f90 pic_constants.f90 sourcefile~pic_constants.f90->sourcefile~pic_types.f90 sourcefile~pic_device.f90 pic_device.f90 sourcefile~pic_device.f90->sourcefile~pic_types.f90 sourcefile~pic_flop_rate.f90 pic_flop_rate.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_types.f90 sourcefile~pic_flop_recorder.f90 pic_flop_recorder.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_flop_recorder.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_timer.f90 pic_timer.F90 sourcefile~pic_flop_rate.f90->sourcefile~pic_timer.f90 sourcefile~pic_flop_recorder.f90->sourcefile~pic_types.f90 sourcefile~pic_global_definitions.f90 pic_global_definitions.f90 sourcefile~pic_global_definitions.f90->sourcefile~pic_types.f90 sourcefile~pic_helpers.f90 pic_helpers.f90 sourcefile~pic_helpers.f90->sourcefile~pic_types.f90 sourcefile~pic_helpers.f90->sourcefile~pic_global_definitions.f90 sourcefile~pic_knowledge.f90 pic_knowledge.f90 sourcefile~pic_knowledge.f90->sourcefile~pic_types.f90 sourcefile~pic_logger.f90 pic_logger.f90 sourcefile~pic_logger.f90->sourcefile~pic_types.f90 sourcefile~pic_logger.f90->sourcefile~pic_global_definitions.f90 sourcefile~pic_mpi.f90 pic_mpi.F90 sourcefile~pic_mpi.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 sourcefile~pic_output_helpers.f90 pic_output_helpers.f90 sourcefile~pic_output_helpers.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_sorting.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_ord_sort.f90 pic_sorting_ord_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_ord_sort.f90 sourcefile~pic_sorting_radix_sort.f90 pic_sorting_radix_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_radix_sort.f90 sourcefile~pic_sorting_sort.f90 pic_sorting_sort.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort.f90 sourcefile~pic_sorting_sort_index.f90 pic_sorting_sort_index.F90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort_index.f90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_radix_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_types.f90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_optional.f90 sourcefile~pic_string_type.f90 pic_string_type.f90 sourcefile~pic_string_type.f90->sourcefile~pic_types.f90 sourcefile~pic_string_type.f90->sourcefile~pic_optional.f90 sourcefile~pic_string_utils.f90->sourcefile~pic_types.f90 sourcefile~pic_timer.f90->sourcefile~pic_types.f90 sourcefile~pic_timer.f90->sourcefile~pic_string_utils.f90 sourcefile~stdlib_pic_hash_32bit.f90 stdlib_pic_hash_32bit.f90 sourcefile~stdlib_pic_hash_32bit.f90->sourcefile~pic_types.f90 sourcefile~stdlib_pic_hash_32bit_fnv.f90 stdlib_pic_hash_32bit_fnv.f90 sourcefile~stdlib_pic_hash_32bit.f90->sourcefile~stdlib_pic_hash_32bit_fnv.f90 sourcefile~stdlib_pic_hash_32bit_fnv.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! pic_types.F90 controls the standarized sizes for the datatypes across !! pic, this is key for interfacing with other codes specially those that !! use default sizes module pic_types !! main module for defining types for integer and double precision use , intrinsic :: iso_fortran_env , only : int8 , int16 , int32 , int64 implicit none private public :: int8 , int16 , int32 , int64 ! Define kinds for different data types ! int32 and int64 are defined in the iso_fortran_env, if you need to change things please do so here integer , parameter , public :: sp = SELECTED_REAL_KIND ( 6 , 37 ) !! single precision size integer , parameter , public :: dp = SELECTED_REAL_KIND ( 15 , 307 ) !! double precision size integer , parameter , public :: qp = SELECTED_REAL_KIND ( 33 , 4931 ) !! quadruple precision size, varies by compiler ! Define default types #ifdef USE_INT8 integer , parameter , public :: default_int = int64 !! if you compile PIC requesting USE_INT8 the default_int will be set to int64 this is kinda equivalent !! to compiling with -i8. If linking to a legacy codebase that relies on this, compile PIC with USE_INT8 #else integer , parameter , public :: default_int = int32 !! the default integer kind in PIC is int32 which faciliates the interfaces to MPI !! pay special attention if linking PIC to a code that use default int size of 8 #endif integer , parameter , public :: default_real = dp !! naturally, our default real is double precision integer , parameter , public :: default_complex = dp !! default complex is double precision integer , parameter , public :: int_index = int64 !! Integer kind for indexing integer , parameter , public :: int_index_low = int32 !! Integer kind for indexing using less than `huge(1_int32)` values end module pic_types","tags":"","url":"sourcefile/pic_types.f90.html"},{"title":"pic_sorting_sort.f90 – PIC","text":"This file is subjec† both to the Fortran Standard Library license, and\nto additional licensing requirements as it contains translations of\nother software. The Fortran Standard Library, including this file, is distributed under\nthe MIT license that should be included with the library’s distribution. Copyright (c) 2021 Fortran stdlib developers Permission is hereby granted, free of charge, to any person obtaining a\n  copy of this software and associated documentation files (the\n  “Software”),  to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sellcopies of the Software, and to permit\n  persons to whom the Software is furnished to do so, subject to the\n  following conditions: The above copyright notice and this permission notice shall be included\n  in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The generic subroutine, SORT , is substantially a\ntranslation to Fortran 2008, of the introsort of David Musser.\nDavid Musser has given permission to include a variant of introsort in the Fortran Standard Library under the MIT license provided\nwe cite: Musser, D.R., “Introspective Sorting and Selection Algorithms,”\n  Software—Practice and Experience, Vol. 27(8), 983–993 (August 1997). as the official source of the algorithm. This file depends on sourcefile~~pic_sorting_sort.f90~~EfferentGraph sourcefile~pic_sorting_sort.f90 pic_sorting_sort.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_sorting_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_sorting_sort.f90~~AfferentGraph sourcefile~pic_sorting_sort.f90 pic_sorting_sort.f90 sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! Licensing: !! !! This file is subjec† both to the Fortran Standard Library license, and !! to additional licensing requirements as it contains translations of !! other software. !! !! The Fortran Standard Library, including this file, is distributed under !! the MIT license that should be included with the library's distribution. !! !!   Copyright (c) 2021 Fortran stdlib developers !! !!   Permission is hereby granted, free of charge, to any person obtaining a !!   copy of this software and associated documentation files (the !!   \"Software\"),  to deal in the Software without restriction, including !!   without limitation the rights to use, copy, modify, merge, publish, !!   distribute, sublicense, and/or sellcopies of the Software, and to permit !!   persons to whom the Software is furnished to do so, subject to the !!   following conditions: !! !!   The above copyright notice and this permission notice shall be included !!   in all copies or substantial portions of the Software. !! !!   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS !!   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF !!   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. !!   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY !!   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, !!   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE !!   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. !! !! The generic subroutine, `SORT`, is substantially a !! translation to Fortran 2008, of the `introsort` of David Musser. !! David Musser has given permission to include a variant of `introsort` !! in the Fortran Standard Library under the MIT license provided !! we cite: !! !!   Musser, D.R., “Introspective Sorting and Selection Algorithms,” !!   Software—Practice and Experience, Vol. 27(8), 983–993 (August 1997). !! !! as the official source of the algorithm. !submodule(pic_sorting) pic_sorting_sort module pic_sorting_sort use pic_types , only : int32 , int64 , sp , dp , int_index use pic_optional_value , only : pic_optional !! This submodule implements the overloaded sorting subroutine `SORT` !! that can be used to sort four kinds of `INTEGER` arrays and three kinds !! of `REAL` arrays. Sorting is in order of increasing value, with the worst !! case run time performance of `O(N Ln(N))`. !! !! `SORT` uses the `INTROSORT` sorting algorithm of David Musser, !! http://www.cs.rpi.edu/~musser/gp/introsort.ps. `introsort` is a hybrid !! unstable comparison algorithm combining `quicksort`, `insertion sort`, and !! `heap sort`. While this algorithm is always O(N Ln(N)) it is relatively !! fast on randomly ordered data, but inconsistent in performance on partly !! sorted data, sometimes having `merge sort` performance, sometimes having !! better than `quicksort` performance. implicit none public :: sort !! The generic subroutine implementing the `SORT` algorithm to return !! an input array with its elements sorted in order of (non-)decreasing !! value. Its use has the syntax: !! !!     call sort( array[, reverse] ) !! !! with the arguments: !! !! * array: the rank 1 array to be sorted. It is an `intent(inout)` !!   argument of any of the types `integer(int8)`, `integer(int16)`, !!   `integer(int32)`, `integer(int64)`, `real(real32)`, `real(real64)`, !!   `real(real128)`, `character(*)`, `type(string_type)`, !!   `type(bitset_64)`, `type(bitset_large)`. If both the type !!   of `array` is real and at least one of the elements is a `NaN`, then !!   the ordering of the result is undefined. Otherwise it is defined to be the !!   original elements in non-decreasing order. !! * `reverse` (optional): shall be a scalar of type default logical. It !!   is an `intent(in)` argument. If present with a value of `.true.` then !!   `array` will be sorted in order of non-increasing values in unstable !!   order. Otherwise index will sort `array` in order of non-decreasing !!   values in unstable order. !! !!#### Example !! !!```fortran !!    ... !!    ! Read random data from a file !!    call read_file( 'dummy_file', array ) !!    ! Sort the random data !!    call sort( array ) !!    ! Process the sorted data !!    call array_search( array, values ) !!    ... !!``` private interface sort !! The generic subroutine interface implementing the `SORT` algorithm, based !! on the `introsort` of David Musser. !! ([Specification](../page/specs/stdlib_sorting.html#sort-sorts-an-input-array)) pure module subroutine int32_sort ( array , reverse ) !! `int32_sort( array[, reverse] )` sorts the input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none integer ( int32 ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_sort pure module subroutine int64_sort ( array , reverse ) !! `int64_sort( array[, reverse] )` sorts the input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none integer ( int64 ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_sort pure module subroutine sp_sort ( array , reverse ) !! `sp_sort( array[, reverse] )` sorts the input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none real ( sp ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_sort pure module subroutine dp_sort ( array , reverse ) !! `dp_sort( array[, reverse] )` sorts the input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none real ( dp ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_sort pure module subroutine char_sort ( array , reverse ) !! `char_sort( array[, reverse] )` sorts the input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `introsort` of David Musser. !! The algorithm is of order O(N Ln(N)) for all inputs. !! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) !! behavior is small for random data compared to other sorting algorithms. implicit none character ( len =* ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_sort end interface sort contains pure module subroutine int32_sort ( array , reverse ) integer ( int32 ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call int32_decrease_sort ( array ) else call int32_increase_sort ( array ) end if end subroutine int32_sort pure module subroutine int64_sort ( array , reverse ) integer ( int64 ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call int64_decrease_sort ( array ) else call int64_increase_sort ( array ) end if end subroutine int64_sort pure module subroutine sp_sort ( array , reverse ) real ( sp ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call sp_decrease_sort ( array ) else call sp_increase_sort ( array ) end if end subroutine sp_sort pure module subroutine dp_sort ( array , reverse ) real ( dp ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call dp_decrease_sort ( array ) else call dp_increase_sort ( array ) end if end subroutine dp_sort pure module subroutine char_sort ( array , reverse ) character ( len =* ), intent ( inout ) :: array ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call char_decrease_sort ( array ) else call char_increase_sort ( array ) end if end subroutine char_sort pure subroutine int32_increase_sort ( array ) ! `int32_increase_sort( array )` sorts the input `ARRAY` of type `integer(int32)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int32_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int32 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int32 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int32 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int32_increase_sort pure subroutine int64_increase_sort ( array ) ! `int64_increase_sort( array )` sorts the input `ARRAY` of type `integer(int64)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int64_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int64 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int64 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int64 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int64_increase_sort pure subroutine sp_increase_sort ( array ) ! `sp_increase_sort( array )` sorts the input `ARRAY` of type `real(sp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `sp_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( sp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( sp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( sp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine sp_increase_sort pure subroutine dp_increase_sort ( array ) ! `dp_increase_sort( array )` sorts the input `ARRAY` of type `real(dp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `dp_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( dp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( dp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( dp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine dp_increase_sort pure subroutine char_increase_sort ( array ) ! `char_increase_sort( array )` sorts the input `ARRAY` of type `character(len=*)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `char_increase_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index character ( len = len ( array )) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u > v ) . neqv . ( u > w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v < u ) . neqv . ( v < w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) <= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size character ( len = len ( array )) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest character ( len = len ( array )) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) > array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) > array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine char_increase_sort pure subroutine int32_decrease_sort ( array ) ! `int32_decrease_sort( array )` sorts the input `ARRAY` of type `integer(int32)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int32_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int32 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int32 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int32 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int32_decrease_sort pure subroutine int64_decrease_sort ( array ) ! `int64_decrease_sort( array )` sorts the input `ARRAY` of type `integer(int64)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `int64_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index integer ( int64 ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size integer ( int64 ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest integer ( int64 ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine int64_decrease_sort pure subroutine sp_decrease_sort ( array ) ! `sp_decrease_sort( array )` sorts the input `ARRAY` of type `real(sp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `sp_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( sp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( sp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( sp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine sp_decrease_sort pure subroutine dp_decrease_sort ( array ) ! `dp_decrease_sort( array )` sorts the input `ARRAY` of type `real(dp)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `dp_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index real ( dp ) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size real ( dp ) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest real ( dp ) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine dp_decrease_sort pure subroutine char_decrease_sort ( array ) ! `char_decrease_sort( array )` sorts the input `ARRAY` of type `character(len=*)` ! using a hybrid sort based on the `introsort` of David Musser. As with ! `introsort`, `char_decrease_sort( array )` is an unstable hybrid comparison ! algorithm using `quicksort` for the main body of the sort tree, ! supplemented by `insertion sort` for the outer branches, but if ! `quicksort` is converging too slowly the algorithm resorts ! to `heapsort`. The algorithm is of order O(N Ln(N)) for all inputs. ! Because it relies on `quicksort`, the coefficient of the O(N Ln(N)) ! behavior is typically small compared to other sorting algorithms. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: depth_limit depth_limit = 2 * int ( floor ( log ( real ( size ( array , kind = int_index ), & kind = dp )) / log ( 2.0_dp )), & kind = int32 ) call introsort ( array , depth_limit ) contains pure recursive subroutine introsort ( array , depth_limit ) ! It devolves to `insertionsort` if the remaining number of elements ! is fewer than or equal to `INSERT_SIZE`, `heapsort` if the completion ! of the `quicksort` is too slow as estimated from `DEPTH_LIMIT`, ! otherwise sorting is done by a `quicksort`. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( in ) :: depth_limit integer ( int_index ), parameter :: insert_size = 16_int_index integer ( int_index ) :: index if ( size ( array , kind = int_index ) <= insert_size ) then ! May be best at the end of SORT processing the whole array ! See Musser, D.R., “Introspective Sorting and Selection ! Algorithms,” Software—Practice and Experience, Vol. 27(8), ! 983–993 (August 1997). call insertion_sort ( array ) else if ( depth_limit == 0 ) then call heap_sort ( array ) else call partition ( array , index ) call introsort ( array ( 0 : index - 1 ), depth_limit - 1 ) call introsort ( array ( index + 1 :), depth_limit - 1 ) end if end subroutine introsort pure subroutine partition ( array , index ) ! quicksort partition using median of three. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index character ( len = len ( array )) :: u , v , w , x , y integer ( int_index ) :: i , j ! Determine median of three and exchange it with the end. u = array ( 0 ) v = array ( size ( array , kind = int_index ) / 2 - 1 ) w = array ( size ( array , kind = int_index ) - 1 ) if (( u < v ) . neqv . ( u < w )) then x = u y = array ( 0 ) array ( 0 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else if (( v > u ) . neqv . ( v > w )) then x = v y = array ( size ( array , kind = int_index ) / 2 - 1 ) array ( size ( array , kind = int_index ) / 2 - 1 ) = & array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y else x = w end if ! Partition the array. i = - 1_int_index do j = 0_int_index , size ( array , kind = int_index ) - 2 if ( array ( j ) >= x ) then i = i + 1 y = array ( i ) array ( i ) = array ( j ) array ( j ) = y end if end do y = array ( i + 1 ) array ( i + 1 ) = array ( size ( array , kind = int_index ) - 1 ) array ( size ( array , kind = int_index ) - 1 ) = y index = i + 1 end subroutine partition pure subroutine insertion_sort ( array ) ! Bog standard insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1_int_index , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure subroutine heap_sort ( array ) ! A bog standard heap sort character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , heap_size character ( len = len ( array )) :: y heap_size = size ( array , kind = int_index ) ! Build the max heap do i = ( heap_size - 2 ) / 2_int_index , 0_int_index , - 1_int_index call max_heapify ( array , i , heap_size ) end do do i = heap_size - 1 , 1_int_index , - 1_int_index ! Swap the first element with the current final element y = array ( 0 ) array ( 0 ) = array ( i ) array ( i ) = y ! Sift down using max_heapify call max_heapify ( array , 0_int_index , i ) end do end subroutine heap_sort pure recursive subroutine max_heapify ( array , i , heap_size ) ! Transform the array into a max heap character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: i , heap_size integer ( int_index ) :: l , r , largest character ( len = len ( array )) :: y largest = i l = 2_int_index * i + 1_int_index r = l + 1_int_index if ( l < heap_size ) then if ( array ( l ) < array ( largest )) largest = l end if if ( r < heap_size ) then if ( array ( r ) < array ( largest )) largest = r end if if ( largest /= i ) then y = array ( i ) array ( i ) = array ( largest ) array ( largest ) = y call max_heapify ( array , largest , heap_size ) end if end subroutine max_heapify end subroutine char_decrease_sort end module pic_sorting_sort !end submodule pic_sorting_sort","tags":"","url":"sourcefile/pic_sorting_sort.f90.html"},{"title":"pic_array.f90 – PIC","text":"pic array contains L0.5 BLAS level routines, as in things that could be use in\nlieu of blas if you don’t have it but if you do, please don’t use these routines This file depends on sourcefile~~pic_array.f90~~EfferentGraph sourcefile~pic_array.f90 pic_array.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_array.f90->sourcefile~pic_optional.f90 sourcefile~pic_string_utils.f90 pic_string_utils.f90 sourcefile~pic_array.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_array.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 sourcefile~pic_string_utils.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! pic array contains L0.5 BLAS level routines, as in things that could be use in !! lieu of blas if you don't have it but if you do, please don't use these routines module pic_array !! Please do not modify this file to implement new methods, please go look at tools/autogen/pic_array_cpu.fypp !! and edit the generator. use pic_types , only : sp , dp , int32 , int64 , default_int use pic_string , only : to_string , to_upper use pic_optional_value , only : pic_optional implicit none private public :: fill , copy public :: pic_transpose , pic_sum public :: pic_scramble_array , pic_print_array public :: is_sorted public :: set_threading_mode , get_threading_mode logical :: use_threaded_default = . false . public :: ASCENDING , DESCENDING integer ( default_int ), parameter :: ASCENDING = 1 integer ( default_int ), parameter :: DESCENDING = 2 character ( len = 5 ), parameter :: default_format = \"NUMPY\" !! supported formats: NUMPY, MATHEMATICA, and PLAIN which resembles numpy character ( len =* ), parameter :: fmt_edge = \"(A)\" character ( len =* ), parameter :: fmt_in = '(A, \", \")' interface set_threading_mode !! set_threading sets the threading mode for the array routines !! this will set the use_threaded variable to true or false depending on the input !! Usage: call set_threading_mode(.true.) or call set_threading_mode(.false.) module procedure set_threading_mode end interface interface get_threading_mode !! get_threading_mode returns the current threading mode for the array routines !! Usage: mode = get_threading_mode() module procedure get_threading_mode end interface get_threading_mode interface fill !! fill provides a generic interface to assing a value !! alpha of types (int32, int64, sp, dp) as defined in pic_types.F90 !! The inteface supports filling 1d and 2d arrays of the specified !! variables !! !! Usage: call fill(array, value, [optional] threaded) !! !! This subroutine is threaded for performance purposes if threaded is set to .true. !! !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism module procedure fill_vector_int32 module procedure fill_vector_int64 module procedure fill_vector_sp module procedure fill_vector_dp module procedure fill_matrix_int32 module procedure fill_matrix_int64 module procedure fill_matrix_sp module procedure fill_matrix_dp end interface interface copy !! copy provides a blas-less implementation of xcopy where x is (i,s,d) icopy, scopy, dcopy !! if you built pic with BLAS use the copy interface provided there, I will not beat BLAS !! copy is implemented for (int32, int64, sp, dp) for 1 and 2d arrays of the same types !! !! Usage: call copy(destination, source, [optional] threaded) !! !! This subroutine is threaded for performance purposes if threaded is set to .true. !! !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism module procedure copy_vector_int32 module procedure copy_vector_int64 module procedure copy_vector_sp module procedure copy_vector_dp module procedure copy_matrix_int32 module procedure copy_matrix_int64 module procedure copy_matrix_sp module procedure copy_matrix_dp end interface interface pic_transpose !! pic_transpose provides a blas-less, threaded alternative to the Fortran transpose intrinsic !! which will be slow for large matrix sizes. pic_transpose does not assume symmetric matrices !! !! pic_transpose is implemented for (int32, int64, sp, dp) 2d arrays !! !! Usage: call pic_transpose(matrix_to_transpose, result, [optional] threaded) !! !! This subroutine is threaded for performance purposes if threaded is set to true !! !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism !! module procedure transpose_matrix_int32 module procedure transpose_matrix_int64 module procedure transpose_matrix_sp module procedure transpose_matrix_dp end interface interface pic_sum !! pic_sum provides a threaded alternative to the sum(array) Fortran intrinsic which will !! be too slow for large sizes of vectors and matrices. Note that this provides the total !! sum. As opposed to the blas alternative XASUM which does the absolute sum !! !! pic_sum is implemented for (int32, int64, sp, dp) 1 and 2d arrays !! !! Usage: result = pic_sum(array, [optional] threaded) !! !! This subroutine is threaded for performance purposes if threaded is set to true !! !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism !! module procedure sum_vector_int32 module procedure sum_vector_int64 module procedure sum_vector_sp module procedure sum_vector_dp module procedure sum_matrix_int32 module procedure sum_matrix_int64 module procedure sum_matrix_sp module procedure sum_matrix_dp end interface interface is_sorted !! is_sorted provides a simple way to checking if a 1d array is sorted !! it is implemented for int32, int64, sp, and dp datatypes. The default !! is to check if an array is sorted in ascending fashion. !! !! Usage: result = is_sorted(array, [optional] ASCENDING/DESCENDING) module procedure is_sorted_int32 module procedure is_sorted_int64 module procedure is_sorted_sp module procedure is_sorted_dp module procedure is_sorted_char end interface interface pic_print_array !! Generic interface for printing arrays of different types !! !! Usage: call print_array_v2(array, [optional] format) !! Where format can be: NUMPY, PLAIN, MATHEMATICA (can use lower caps) !! !! Implemented types are: !! !! array(:)   -> int32, int64, sp, dp !! !! array(:,:) -> int32, int64, sp, dp !! !! array(:) (packed matrix) -> sp, dp !! !! array(:,:,:) -> sp, dp !! module procedure print_vector_int32 module procedure print_vector_int64 module procedure print_vector_sp module procedure print_vector_dp module procedure print_matrix_int32 module procedure print_matrix_int64 module procedure print_matrix_sp module procedure print_matrix_dp module procedure print_packed_matrix_int32 module procedure print_packed_matrix_int64 module procedure print_packed_matrix_sp module procedure print_packed_matrix_dp module procedure print_3d_tensor_int32 module procedure print_3d_tensor_int64 module procedure print_3d_tensor_sp module procedure print_3d_tensor_dp end interface interface pic_scramble_array module procedure scramble_array_int32 module procedure scramble_array_int64 module procedure scramble_array_sp module procedure scramble_array_dp module procedure scramble_array_character end interface pic_scramble_array ! potentially implement a shallow copy? nah? integer ( default_int ), parameter :: block_size = 32 !! This is the size to block over for matrices for performance purposes contains subroutine set_threading_mode ( threaded ) !! set the threading mode for the array routines, this will set the use_threaded variable !! to true or false depending on the input !! !! Usage: call set_threading(.true.) or call set_threading(.false.) logical , intent ( in ) :: threaded use_threaded_default = threaded end subroutine set_threading_mode function get_threading_mode () result ( mode ) !! get the current threading mode for the array routines !! Usage: mode = get_threading_mode() logical :: mode mode = use_threaded_default end function get_threading_mode subroutine set_brackets ( format_type , open_bracket , close_bracket ) !! Set brackets based on output format type character ( len =* ), intent ( in ) :: format_type character ( len = 1 ), intent ( out ) :: open_bracket , close_bracket select case ( trim ( to_upper ( adjustl ( format_type )))) case ( \"NUMPY\" ) open_bracket = \"[\" close_bracket = \"]\" case ( \"MATHEMATICA\" ) open_bracket = \"{\" close_bracket = \"}\" case ( \"PLAIN\" ) open_bracket = \"[\" close_bracket = \"]\" case default print * , \"Warning: Unsupported format type '\" // trim ( format_type ) // \"'. Defaulting to NumPy style.\" open_bracket = \"[\" close_bracket = \"]\" end select end subroutine set_brackets subroutine fill_vector_int32 ( vector , alpha , threaded ) integer ( int32 ), intent ( inout ) :: vector (:) integer ( int32 ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_int32 subroutine fill_vector_int64 ( vector , alpha , threaded ) integer ( int64 ), intent ( inout ) :: vector (:) integer ( int64 ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_int64 subroutine fill_vector_sp ( vector , alpha , threaded ) real ( sp ), intent ( inout ) :: vector (:) real ( sp ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_sp subroutine fill_vector_dp ( vector , alpha , threaded ) real ( dp ), intent ( inout ) :: vector (:) real ( dp ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_dp subroutine fill_matrix_int32 ( matrix , alpha , threaded ) integer ( int32 ), intent ( inout ) :: matrix (:, :) integer ( int32 ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_int32 subroutine fill_matrix_int64 ( matrix , alpha , threaded ) integer ( int64 ), intent ( inout ) :: matrix (:, :) integer ( int64 ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_int64 subroutine fill_matrix_sp ( matrix , alpha , threaded ) real ( sp ), intent ( inout ) :: matrix (:, :) real ( sp ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_sp subroutine fill_matrix_dp ( matrix , alpha , threaded ) real ( dp ), intent ( inout ) :: matrix (:, :) real ( dp ), intent ( in ) :: alpha integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj logical , intent ( in ), optional :: threaded logical :: use_threads rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) matrix ( i , j ) = alpha end do end do end do end do !$omp end parallel do else matrix = alpha end if end subroutine fill_matrix_dp subroutine copy_vector_int32 ( dest , source , threaded ) integer ( int32 ), intent ( inout ) :: dest (:) integer ( int32 ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_int32 subroutine copy_vector_int64 ( dest , source , threaded ) integer ( int64 ), intent ( inout ) :: dest (:) integer ( int64 ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_int64 subroutine copy_vector_sp ( dest , source , threaded ) real ( sp ), intent ( inout ) :: dest (:) real ( sp ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_sp subroutine copy_vector_dp ( dest , source , threaded ) real ( dp ), intent ( inout ) :: dest (:) real ( dp ), intent ( in ) :: source (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( size ( dest , 1 ) /= size ( source , 1 )) then error stop \"Vector size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( dest , 1 ) dest ( i ) = source ( i ) end do !$omp end parallel do else dest = source end if end subroutine copy_vector_dp subroutine copy_matrix_int32 ( dest , source , threaded ) integer ( int32 ), intent ( inout ) :: dest (:, :) integer ( int32 ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_int32 subroutine copy_matrix_int64 ( dest , source , threaded ) integer ( int64 ), intent ( inout ) :: dest (:, :) integer ( int64 ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_int64 subroutine copy_matrix_sp ( dest , source , threaded ) real ( sp ), intent ( inout ) :: dest (:, :) real ( sp ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_sp subroutine copy_matrix_dp ( dest , source , threaded ) real ( dp ), intent ( inout ) :: dest (:, :) real ( dp ), intent ( in ) :: source (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , rows , cols integer ( default_int ) :: ii , jj if ( size ( dest , 1 ) /= size ( source , 1 ) . or . size ( dest , 2 ) /= size ( source , 2 )) then error stop \"Matrix size mismatch\" end if rows = size ( source , 1 ) cols = size ( source , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) dest ( i , j ) = source ( i , j ) end do end do end do end do !$omp end parallel do else dest = source end if end subroutine copy_matrix_dp subroutine transpose_matrix_int32 ( A , B , threaded ) integer ( int32 ), intent ( in ) :: A (:, :) integer ( int32 ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_int32 subroutine transpose_matrix_int64 ( A , B , threaded ) integer ( int64 ), intent ( in ) :: A (:, :) integer ( int64 ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_int64 subroutine transpose_matrix_sp ( A , B , threaded ) real ( sp ), intent ( in ) :: A (:, :) real ( sp ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_sp subroutine transpose_matrix_dp ( A , B , threaded ) real ( dp ), intent ( in ) :: A (:, :) real ( dp ), intent ( out ) :: B (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i , j , ii , jj , rows , cols rows = size ( A , 1 ) cols = size ( A , 2 ) if ( size ( B , 1 ) /= cols . or . size ( B , 2 ) /= rows ) then error stop \"transpose: size mismatch\" end if use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) B ( j , i ) = A ( i , j ) end do end do end do end do !$omp end parallel do else B = transpose ( A ) end if end subroutine transpose_matrix_dp function sum_vector_int32 ( vector , threaded ) result ( res ) integer ( int32 ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int32 ) :: res integer ( default_int ) :: i res = 0_int32 use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_int32 function sum_vector_int64 ( vector , threaded ) result ( res ) integer ( int64 ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int64 ) :: res integer ( default_int ) :: i res = 0_int64 use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_int64 function sum_vector_sp ( vector , threaded ) result ( res ) real ( sp ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads real ( sp ) :: res integer ( default_int ) :: i res = 0_sp use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_sp function sum_vector_dp ( vector , threaded ) result ( res ) real ( dp ), intent ( in ) :: vector (:) logical , intent ( in ), optional :: threaded logical :: use_threads real ( dp ) :: res integer ( default_int ) :: i res = 0_dp use_threads = pic_optional ( threaded , use_threaded_default ) if ( use_threads ) then !$omp parallel do private(i) collapse(1) reduction(+:res) do i = 1 , size ( vector , 1 ) res = res + vector ( i ) end do !$omp end parallel do else res = sum ( vector ) end if end function sum_vector_dp function sum_matrix_int32 ( matrix , threaded ) result ( res ) integer ( int32 ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int32 ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_int32 if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_int32 function sum_matrix_int64 ( matrix , threaded ) result ( res ) integer ( int64 ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads integer ( int64 ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_int64 if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_int64 function sum_matrix_sp ( matrix , threaded ) result ( res ) real ( sp ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads real ( sp ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_sp if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_sp function sum_matrix_dp ( matrix , threaded ) result ( res ) real ( dp ), intent ( in ) :: matrix (:, :) logical , intent ( in ), optional :: threaded logical :: use_threads real ( dp ) :: res integer ( default_int ) :: cols , rows , i , j , ii , jj rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) use_threads = pic_optional ( threaded , use_threaded_default ) res = 0_dp if ( use_threads ) then !$omp parallel do collapse(2) private(i,j,ii,jj) reduction(+: res) do jj = 1 , cols , block_size do ii = 1 , rows , block_size do j = jj , min ( jj + block_size - 1 , cols ) do i = ii , min ( ii + block_size - 1 , rows ) res = res + matrix ( i , j ) end do end do end do end do !$omp end parallel do else res = sum ( matrix ) end if end function sum_matrix_dp pure function is_sorted_int32 ( array , order ) result ( sorted ) integer ( int32 ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_int32 pure function is_sorted_int64 ( array , order ) result ( sorted ) integer ( int64 ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_int64 pure function is_sorted_sp ( array , order ) result ( sorted ) real ( sp ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_sp pure function is_sorted_dp ( array , order ) result ( sorted ) real ( dp ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_dp pure function is_sorted_char ( array , order ) result ( sorted ) character ( len =* ), intent ( in ) :: array (:) integer ( default_int ), intent ( in ), optional :: order integer ( default_int ) :: sort_order integer ( default_int ) :: i logical :: sorted sorted = . true . sort_order = pic_optional ( order , ASCENDING ) select case ( sort_order ) case ( DESCENDING ) do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) > array ( i )) then sorted = . false . return end if end do case default ! ASCENDING or any other value do i = 1 , size ( array ) - 1 if ( array ( i + 1 ) < array ( i )) then sorted = . false . return end if end do end select end function is_sorted_char subroutine print_vector_int32 ( vector , format_type ) !! print a vector of ${T} values integer ( int32 ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_int32 subroutine print_vector_int64 ( vector , format_type ) !! print a vector of ${T} values integer ( int64 ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_int64 subroutine print_vector_sp ( vector , format_type ) !! print a vector of ${T} values real ( sp ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_sp subroutine print_vector_dp ( vector , format_type ) !! print a vector of ${T} values real ( dp ), intent ( in ) :: vector (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , loop_bound_i loop_bound_i = size ( vector ) call set_brackets ( print_format , open_bracket , close_bracket ) write ( * , \"(A)\" , advance = \"no\" ) open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) to_string ( vector ( i )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( vector ( i )) end if end do print * , close_bracket end block print end subroutine print_vector_dp subroutine print_matrix_int32 ( matrix , format_type ) !! print a matrix of ${T} values integer ( int32 ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_int32 subroutine print_matrix_int64 ( matrix , format_type ) !! print a matrix of ${T} values integer ( int64 ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_int64 subroutine print_matrix_sp ( matrix , format_type ) !! print a matrix of ${T} values real ( sp ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_sp subroutine print_matrix_dp ( matrix , format_type ) !! print a matrix of ${T} values real ( dp ), intent ( in ) :: matrix (:, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , rows , cols rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do i = 1 , rows write ( * , \"(A)\" , advance = \"no\" ) open_bracket do j = 1 , cols if ( j == cols ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) to_string ( matrix ( i , j )) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) to_string ( matrix ( i , j )) end if end do if ( i == rows ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end block print end subroutine print_matrix_dp subroutine print_packed_matrix_int32 ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values integer ( int32 ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_int32 subroutine print_packed_matrix_int64 ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values integer ( int64 ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_int64 subroutine print_packed_matrix_sp ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values real ( sp ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_sp subroutine print_packed_matrix_dp ( packed , n_elements , format_type ) !! Print a packed lower triangular matrix of ${T} values real ( dp ), intent ( in ) :: packed (:) integer ( default_int ), intent ( in ) :: n_elements character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format character ( len = 1 ) :: open_bracket , close_bracket integer ( default_int ) :: i , j , idx , n real ( dp ) :: n_real ! Determine format print_format = pic_optional ( format_type , default_format ) call set_brackets ( print_format , open_bracket , close_bracket ) ! Compute n from packed size using proper real arithmetic n_real = ( - 1.0_dp + sqrt ( 1.0_dp + 8.0_dp * real ( n_elements , dp ))) / 2.0_dp n = int ( n_real + 0.5_dp , default_int ) if ( n * ( n + 1 ) / 2 /= n_elements ) then print * , \"Error: n_elements does not form a valid packed triangle\" return end if ! Print lower triangle directly from packed array print * , open_bracket idx = 0 do i = 1 , n write ( * , '(A)' , advance = \"no\" ) open_bracket do j = 1 , i idx = idx + 1 if ( j == i ) then write ( * , '(A)' , advance = \"no\" ) to_string ( packed ( idx )) else write ( * , '(A)' , advance = \"no\" ) trim ( to_string ( packed ( idx )) // \", \" ) end if end do if ( i == n ) then print * , close_bracket else print * , close_bracket , \",\" end if end do print * , close_bracket end subroutine print_packed_matrix_dp subroutine print_3d_tensor_int32 ( matrix , format_type ) !! Print a 3D tensor of ${T} values integer ( int32 ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_int32 subroutine print_3d_tensor_int64 ( matrix , format_type ) !! Print a 3D tensor of ${T} values integer ( int64 ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_int64 subroutine print_3d_tensor_sp ( matrix , format_type ) !! Print a 3D tensor of ${T} values real ( sp ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_sp subroutine print_3d_tensor_dp ( matrix , format_type ) !! Print a 3D tensor of ${T} values real ( dp ), intent ( in ) :: matrix (:, :, :) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: print_format print_format = pic_optional ( format_type , default_format ) print : block character ( len = 1 ) :: open_bracket , close_bracket integer ( int32 ) :: k , rows , cols , depth rows = size ( matrix , 1 ) cols = size ( matrix , 2 ) depth = size ( matrix , 3 ) call set_brackets ( print_format , open_bracket , close_bracket ) print * , open_bracket do k = 1 , depth if ( k > 1 ) print * , \",\" print * , open_bracket call pic_print_array ( matrix (:, :, k ), print_format ) print * , close_bracket end do print * , close_bracket end block print end subroutine print_3d_tensor_dp subroutine scramble_array_int32 ( array ) integer ( int32 ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n integer ( int32 ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_int32 subroutine scramble_array_int64 ( array ) integer ( int64 ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n integer ( int64 ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_int64 subroutine scramble_array_sp ( array ) real ( sp ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n real ( sp ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_sp subroutine scramble_array_dp ( array ) real ( dp ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n real ( dp ) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_dp subroutine scramble_array_character ( array ) character ( len =* ), intent ( inout ) :: array (:) integer ( int32 ) :: i , j , n character ( len = len ( array )) :: temp real ( sp ) :: rand_val n = size ( array ) do i = n , 2 , - 1 call random_number ( rand_val ) j = int ( rand_val * i ) + 1 temp = array ( i ) array ( i ) = array ( j ) array ( j ) = temp end do end subroutine scramble_array_character end module pic_array","tags":"","url":"sourcefile/pic_array.f90.html"},{"title":"pic_sorting_sort_index.F90 – PIC","text":"This file is subjec† both to the Fortran Standard Library license, and\nto additional licensing requirements as it contains translations of\nother software. The Fortran Standard Library, including this file, is distributed under\nthe MIT license that should be included with the library’s distribution. Copyright (c) 2021 Fortran stdlib developers Permission is hereby granted, free of charge, to any person obtaining a\n  copy of this software and associated documentation files (the\n  “Software”),  to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sellcopies of the Software, and to permit\n  persons to whom the Software is furnished to do so, subject to the\n  following conditions: The above copyright notice and this permission notice shall be included\n  in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The generic subroutine, SORT_INDEX , is substantially a translation to\nFortran 2008 of the \"Rust\" sort sorting routines in slice.rs The rust sort implementation is distributed with the header: Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n  file at the top-level directory of this distribution and at\n  http://rust-lang.org/COPYRIGHT. Licensed under the Apache License, Version 2.0 or the MIT license , at your\n  option. This file may not be copied, modified, or distributed\n  except according to those terms. so the license for the original slice.rs code is compatible with the use\nof modified versions of the code in the Fortran Standard Library under\nthe MIT license. This file depends on sourcefile~~pic_sorting_sort_index.f90~~EfferentGraph sourcefile~pic_sorting_sort_index.f90 pic_sorting_sort_index.F90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_optional.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_sorting_sort_index.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_sorting_sort_index.f90~~AfferentGraph sourcefile~pic_sorting_sort_index.f90 pic_sorting_sort_index.F90 sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_sort_index.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! !! This file is subjec† both to the Fortran Standard Library license, and !! to additional licensing requirements as it contains translations of !! other software. !! !! The Fortran Standard Library, including this file, is distributed under !! the MIT license that should be included with the library's distribution. !! !!   Copyright (c) 2021 Fortran stdlib developers !! !!   Permission is hereby granted, free of charge, to any person obtaining a !!   copy of this software and associated documentation files (the !!   \"Software\"),  to deal in the Software without restriction, including !!   without limitation the rights to use, copy, modify, merge, publish, !!   distribute, sublicense, and/or sellcopies of the Software, and to permit !!   persons to whom the Software is furnished to do so, subject to the !!   following conditions: !! !!   The above copyright notice and this permission notice shall be included !!   in all copies or substantial portions of the Software. !! !!   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS !!   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF !!   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. !!   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY !!   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, !!   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE !!   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. !! !! The generic subroutine, `SORT_INDEX`, is substantially a translation to !! Fortran 2008 of the `\"Rust\" sort` sorting routines in !! [`slice.rs`](https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs) !! The `rust sort` implementation is distributed with the header: !! !!   Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT !!   file at the top-level directory of this distribution and at !!   http://rust-lang.org/COPYRIGHT. !! !!   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or !!   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license !!   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your !!   option. This file may not be copied, modified, or distributed !!   except according to those terms. !! !! so the license for the original`slice.rs` code is compatible with the use !! of modified versions of the code in the Fortran Standard Library under !! the MIT license. !submodule(pic_sorting) pic_sorting_sort_index module pic_sorting_sort_index use pic_types , only : int32 , int64 , int_index , sp , dp , int_index_low use pic_optional_value , only : pic_optional implicit none public :: sort_index !! The generic subroutine implementing the `SORT_INDEX` algorithm to !! return an index array whose elements would sort the input array in the !! desired direction. It is primarily intended to be used to sort a !! derived type array based on the values of a component of the array. !! Its use has the syntax: !! !!     call sort_index( array, index[, work, iwork, reverse ] ) !! !! with the arguments: !! !! * array: the rank 1 array to be sorted. It is an `intent(inout)` !!   argument of any of the types `integer(int8)`, `integer(int16)`, !!   `integer(int32)`, `integer(int64)`, `real(real32)`, `real(real64)`, !!   `real(real128)`, `character(*)`, `type(string_type)`, !!   `type(bitset_64)`, `type(bitset_large)`. If both the !!   type of `array` is real and at least one of the elements is a `NaN`, !!   then the ordering of the `array` and `index` results is undefined. !!   Otherwise it is defined to be as specified by reverse. !! !! * index: a rank 1 array of sorting indices. It is an `intent(out)` !!   argument of the type `integer(int_index)`. Its size shall be the !!   same as `array`. On return, if defined, its elements would !!   sort the input `array` in the direction specified by `reverse`. !! !! * work (optional): shall be a rank 1 array of the same type as !!   `array`, and shall have at least `size(array)/2` elements. It is an !!   `intent(out)` argument to be used as \"scratch\" memory !!   for internal record keeping. If associated with an array in static !!   storage, its use can significantly reduce the stack memory requirements !!   for the code. Its value on return is undefined. !! !! * iwork (optional): shall be a rank 1 integer array of kind `int_index`, !!   and shall have at least `size(array)/2` elements. It is an !!   `intent(out)` argument to be used as \"scratch\" memory !!   for internal record keeping. If associated with an array in static !!   storage, its use can significantly reduce the stack memory requirements !!   for the code. Its value on return is undefined. !! !! * `reverse` (optional): shall be a scalar of type default logical. It !!   is an `intent(in)` argument. If present with a value of `.true.` then !!   `index` will sort `array` in order of non-increasing values in stable !!   order. Otherwise index will sort `array` in order of non-decreasing !!   values in stable order. !! !!#### Examples !! !! Sorting a related rank one array: !! !!```Fortran !!    subroutine sort_related_data( a, b, work, index, iwork ) !!        ! Sort `b` in terms or its related array `a` !!        integer, intent(inout)         :: a(:) !!        integer(int32), intent(inout)  :: b(:) ! The same size as a !!        integer(int32), intent(out)    :: work(:) !!        integer(int_index), intent(out) :: index(:) !!        integer(int_index), intent(out) :: iwork(:) !!    ! Find the indices to sort a !!        call sort_index(a, index(1:size(a)),& !!            work(1:size(a)/2), iwork(1:size(a)/2)) !!    ! Sort b based on the sorting of a !!        b(:) = b( index(1:size(a)) ) !!    end subroutine sort_related_data !!``` !! !! Sorting a rank 2 array based on the data in a column !! !!```Fortran !!    subroutine sort_related_data( array, column, work, index, iwork ) !!    ! Sort `a_data` in terms or its component `a` !!        integer, intent(inout)         :: a(:,:) !!        integer(int32), intent(in)     :: column !!        integer(int32), intent(out)    :: work(:) !!        integer(int_index), intent(out) :: index(:) !!        integer(int_index), intent(out) :: iwork(:) !!        integer, allocatable           :: dummy(:) !!        integer :: i !!        allocate(dummy(size(a, dim=1))) !!    ! Extract a component of `a_data` !!        dummy(:) = a(:, column) !!    ! Find the indices to sort the column !!        call sort_index(dummy, index(1:size(dummy)),& !!                        work(1:size(dummy)/2), iwork(1:size(dummy)/2)) !!    ! Sort a based on the sorting of its column !!        do i=1, size(a, dim=2) !!            a(:, i) = a(index(1:size(a, dim=1)), i) !!        end do !!    end subroutine sort_related_data !!``` !! !! Sorting an array of a derived type based on the dsta in one component !!```fortran !!    subroutine sort_a_data( a_data, a, work, index, iwork ) !!    ! Sort `a_data` in terms or its component `a` !!        type(a_type), intent(inout)    :: a_data(:) !!        integer(int32), intent(inout)  :: a(:) !!        integer(int32), intent(out)    :: work(:) !!        integer(int_index), intent(out) :: index(:) !!        integer(int_index), intent(out) :: iwork(:) !!    ! Extract a component of `a_data` !!        a(1:size(a_data)) = a_data(:) % a !!    ! Find the indices to sort the component !!        call sort_index(a(1:size(a_data)), index(1:size(a_data)),& !!                        work(1:size(a_data)/2), iwork(1:size(a_data)/2)) !!    ! Sort a_data based on the sorting of that component !!        a_data(:) = a_data( index(1:size(a_data)) ) !!    end subroutine sort_a_data !!``` private integer , parameter :: & ! The maximum number of entries in a run stack, good for an array of ! 2**64 elements see ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt max_merge_stack = int ( ceiling ( log ( 2._dp ** 64 ) / & log ( 1.6180339887_dp ))) type run_type !! Used to pass state around in a stack among helper functions for the !! `ORD_SORT` and `SORT_INDEX` algorithms integer ( int_index ) :: base = 0 integer ( int_index ) :: len = 0 end type run_type interface sort_index !! The generic subroutine interface implementing the `SORT_INDEX` algorithm, !! based on the `\"Rust\" sort` algorithm found in `slice.rs` !! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 !! but modified to return an array of indices that would provide a stable !! sort of the rank one `ARRAY` input. !! !! The indices by default correspond to a !! non-decreasing sort, but if the optional argument `REVERSE` is present !! with a value of `.TRUE.` the indices correspond to a non-increasing sort. module subroutine int32_sort_index_default ( array , index , work , iwork , & reverse ) !! `int32_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_sort_index_default module subroutine int64_sort_index_default ( array , index , work , iwork , & reverse ) !! `int64_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_sort_index_default module subroutine sp_sort_index_default ( array , index , work , iwork , & reverse ) !! `sp_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_sort_index_default module subroutine dp_sort_index_default ( array , index , work , iwork , & reverse ) !! `dp_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_sort_index_default module subroutine char_sort_index_default ( array , index , work , iwork , & reverse ) !! `char_sort_index_default( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_sort_index_default module subroutine int32_sort_index_low ( array , index , work , iwork , & reverse ) !! `int32_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_sort_index_low module subroutine int64_sort_index_low ( array , index , work , iwork , & reverse ) !! `int64_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_sort_index_low module subroutine sp_sort_index_low ( array , index , work , iwork , & reverse ) !! `sp_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_sort_index_low module subroutine dp_sort_index_low ( array , index , work , iwork , & reverse ) !! `dp_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_sort_index_low module subroutine char_sort_index_low ( array , index , work , iwork , & reverse ) !! `char_sort_index_low( array, index[, work, iwork, reverse] )` sorts !! an input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` !! and returns the sorted `ARRAY` and an array `INDEX` of indices in the !! order that would sort the input `ARRAY` in the desired direction. implicit none character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_sort_index_low end interface sort_index contains module subroutine int32_sort_index_default ( array , index , work , iwork , reverse ) ! A modification of `int32_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse integer ( int32 ), allocatable :: buf (:) integer ( int_index ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat stat = 0 array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index ) :: key_index integer ( int32 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int32 ) :: tmp integer ( int_index ) :: i integer ( int_index ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: itemp integer ( int_index ) :: lo , hi integer ( int32 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int32_sort_index_default module subroutine int64_sort_index_default ( array , index , work , iwork , reverse ) ! A modification of `int64_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse integer ( int64 ), allocatable :: buf (:) integer ( int_index ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index ) :: key_index integer ( int64 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int64 ) :: tmp integer ( int_index ) :: i integer ( int_index ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: itemp integer ( int_index ) :: lo , hi integer ( int64 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int64_sort_index_default module subroutine sp_sort_index_default ( array , index , work , iwork , reverse ) ! A modification of `sp_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse real ( sp ), allocatable :: buf (:) integer ( int_index ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index ) :: key_index real ( sp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) real ( sp ) :: tmp integer ( int_index ) :: i integer ( int_index ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: itemp integer ( int_index ) :: lo , hi real ( sp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine sp_sort_index_default module subroutine dp_sort_index_default ( array , index , work , iwork , reverse ) ! A modification of `dp_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse real ( dp ), allocatable :: buf (:) integer ( int_index ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index ) :: key_index real ( dp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) real ( dp ) :: tmp integer ( int_index ) :: i integer ( int_index ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: itemp integer ( int_index ) :: lo , hi real ( dp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine dp_sort_index_default module subroutine char_sort_index_default ( array , index , work , iwork , reverse ) ! A modification of `char_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( out ) :: index ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse integer ( int_index ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat stat = 0_int_index array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else block character ( len = :), allocatable :: buf (:) allocate ( character ( len = len ( array )) :: buf ( 0 : array_size / 2 - 1 ), & stat = stat ) #ifdef __NVCOMPILER_LLVM__ #else if ( stat /= 0 ) then error stop \"Allocation of array failed\" end if #endif if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end block end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index ) :: key_index character ( len = len ( array )) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) character ( len = len ( array )) :: tmp integer ( int_index ) :: i integer ( int_index ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: itemp integer ( int_index ) :: lo , hi character ( len = len ( array )) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine char_sort_index_default module subroutine int32_sort_index_low ( array , index , work , iwork , reverse ) ! A modification of `int32_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse integer ( int32 ), allocatable :: buf (:) integer ( int_index_low ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index_low ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index_low ) :: key_index integer ( int32 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int32 ) :: tmp integer ( int_index ) :: i integer ( int_index_low ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ) :: itemp integer ( int_index ) :: lo , hi integer ( int32 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int32_sort_index_low module subroutine int64_sort_index_low ( array , index , work , iwork , reverse ) ! A modification of `int64_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse integer ( int64 ), allocatable :: buf (:) integer ( int_index_low ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index_low ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index_low ) :: key_index integer ( int64 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int64 ) :: tmp integer ( int_index ) :: i integer ( int_index_low ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ) :: itemp integer ( int_index ) :: lo , hi integer ( int64 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int64_sort_index_low module subroutine sp_sort_index_low ( array , index , work , iwork , reverse ) ! A modification of `sp_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse real ( sp ), allocatable :: buf (:) integer ( int_index_low ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index_low ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index_low ) :: key_index real ( sp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) real ( sp ) :: tmp integer ( int_index ) :: i integer ( int_index_low ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ) :: itemp integer ( int_index ) :: lo , hi real ( sp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine sp_sort_index_low module subroutine dp_sort_index_low ( array , index , work , iwork , reverse ) ! A modification of `dp_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse real ( dp ), allocatable :: buf (:) integer ( int_index_low ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index_low ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of array buffer failed.\" if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index_low ) :: key_index real ( dp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) real ( dp ) :: tmp integer ( int_index ) :: i integer ( int_index_low ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ) :: itemp integer ( int_index ) :: lo , hi real ( dp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine dp_sort_index_low module subroutine char_sort_index_low ( array , index , work , iwork , reverse ) ! A modification of `char_ord_sort` to return an array of indices that ! would perform a stable sort of the `ARRAY` as input, and also sort `ARRAY` ! as desired. The indices by default ! correspond to a non-decreasing sort, but if the optional argument ! `REVERSE` is present with a value of `.TRUE.` the indices correspond to ! a non-increasing sort. The logic of the determination of indexing largely ! follows the `\"Rust\" sort` found in `slice.rs`: ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and the optional `work` and `iwork` arrays to be ! used as scratch memory. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( out ) :: index ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index_low ), intent ( out ), optional :: iwork ( 0 :) logical , intent ( in ), optional :: reverse integer ( int_index_low ), allocatable :: ibuf (:) integer ( int_index ) :: array_size , i , stat stat = 0_int_index array_size = size ( array , kind = int_index ) if ( array_size > huge ( index )) then error stop \"Too many entries for the kind of index.\" end if if ( array_size > size ( index , kind = int_index )) then error stop \"Too many entries for the size of index.\" end if do i = 0 , array_size - 1 index ( i ) = int ( i + 1 , kind = int_index_low ) end do if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if ! If necessary allocate buffers to serve as scratch memory. if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"work array is too small.\" end if if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , work , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , work , ibuf ) end if else block character ( len = :), allocatable :: buf (:) allocate ( character ( len = len ( array )) :: buf ( 0 : array_size / 2 - 1 ), & stat = stat ) #ifdef __NVCOMPILER_LLVM__ #else if ( stat /= 0 ) then error stop \"Allocation of array failed\" end if #endif if ( present ( iwork )) then if ( size ( iwork , kind = int_index ) < array_size / 2 ) then error stop \"iwork array is too small.\" end if call merge_sort ( array , index , buf , iwork ) else allocate ( ibuf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"Allocation of index buffer failed.\" call merge_sort ( array , index , buf , ibuf ) end if end block end if if ( pic_optional ( reverse , . false .)) then call reverse_segment ( array , index ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array , index ) ! Sorts `ARRAY` using an insertion sort, while maintaining consistency in ! location of the indices in `INDEX` to the elements of `ARRAY`. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index ) :: i , j integer ( int_index_low ) :: key_index character ( len = len ( array )) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) key_index = index ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) index ( i + 1 ) = index ( i ) i = i - 1 end do array ( i + 1 ) = key index ( i + 1 ) = key_index end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array , index ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. ! Consistency of the indices in `index` with the elements of `array` ! are maintained. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) character ( len = len ( array )) :: tmp integer ( int_index ) :: i integer ( int_index_low ) :: tmp_index tmp = array ( 0 ) tmp_index = index ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) index ( i - 1 ) = index ( i ) end do find_hole array ( i - 1 ) = tmp index ( i - 1 ) = tmp_index end subroutine insert_head subroutine merge_sort ( array , index , buf , ibuf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. Consistency of the indices in `index` with the elements of ! `array` are maintained. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least this ! many elements. Slices of up to this length are sorted using insertion sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array , index ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish ), & index ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish ), index ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf , & index ( left % base : & right % base + right % len - 1 ), ibuf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf , index , ibuf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ), intent ( inout ) :: ibuf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) ibuf ( 0 : mid - 1 ) = index ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) index ( k ) = ibuf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) index ( k ) = index ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) index ( k + 1 :) = ibuf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) ibuf ( 0 : array_len - mid - 1 ) = index ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) index ( k ) = ibuf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) index ( k ) = index ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) index ( 0 : k - 1 ) = ibuf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array , index ) ! Reverse a segment of an array in place character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index_low ), intent ( inout ) :: index ( 0 :) integer ( int_index_low ) :: itemp integer ( int_index ) :: lo , hi character ( len = len ( array )) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp itemp = index ( lo ) index ( lo ) = index ( hi ) index ( hi ) = itemp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine char_sort_index_low !end submodule pic_sorting_sort_index end module pic_sorting_sort_index","tags":"","url":"sourcefile/pic_sorting_sort_index.f90.html"},{"title":"pic_timer.F90 – PIC","text":"timing routines in general This file depends on sourcefile~~pic_timer.f90~~EfferentGraph sourcefile~pic_timer.f90 pic_timer.F90 sourcefile~pic_string_utils.f90 pic_string_utils.f90 sourcefile~pic_timer.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_timer.f90->sourcefile~pic_types.f90 sourcefile~pic_string_utils.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_timer.f90~~AfferentGraph sourcefile~pic_timer.f90 pic_timer.F90 sourcefile~pic_flop_rate.f90 pic_flop_rate.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_timer.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! timing routines in general module pic_timer !! contains a simple timer module to measure and record time use pic_types , only : dp , default_int use pic_string , only : to_string #ifdef _OPENMP use omp_lib , only : omp_get_wtime #endif implicit none private public :: pic_timer_type type :: pic_timer_type !! derived type for a timer, contains the start, stop, and count variables !! can work with or without omp. If PIC is compiled with OpenMP the default !! timer will be the omp time. This is mostly to minimize problems with threading !! and system clock private real ( dp ) :: start_time = 0.0_dp real ( dp ) :: stop_time = 0.0_dp real ( dp ) :: walltime logical :: is_running = . false . integer ( default_int ) :: start_count = 0_default_int integer ( default_int ) :: stop_count = 0_default_int integer ( default_int ) :: count_rate = 1_default_int contains procedure , non_overridable :: start => timer_start procedure , non_overridable :: stop => timer_stop procedure , non_overridable :: print_time => timer_print_time procedure , non_overridable :: get_elapsed_time => timer_get_elapsed_time end type pic_timer_type contains subroutine timer_start ( self ) !! starts the timer. If OMP is enabled, it will use omp_get_wtime() !! if not, it will use Fortran's system_clock !! !! Usage: call my_timer%start() !! !! Usage assumes a declaration of type(pic_timer_type) :: my_timer class ( pic_timer_type ), intent ( inout ) :: self self % is_running = . true . #ifdef _OPENMP self % start_time = omp_get_wtime () #else call system_clock ( self % start_count , self % count_rate ) #endif end subroutine timer_start subroutine timer_stop ( self ) !! stop the timer. If OMP is enabled, it will use omp_get_wtime() !! if not, it will use Fortran's system_clock !! !! Usage: call my_timer%stop() !! !! Usage assumes a declaration of type(pic_timer_type) :: my_timer !! will fail if a timer has not been started! class ( pic_timer_type ), intent ( inout ) :: self if (. not . self % is_running ) then error stop \"Cannot stop a timer that has not been started!\" end if #ifdef _OPENMP self % stop_time = omp_get_wtime () #else call system_clock ( self % stop_count ) #endif ! if someone stops the timer, we stop ! self % is_running = . false . end subroutine timer_stop subroutine timer_print_time ( self ) !! Prints the elapsed time at the time of calling !! !! Usage: call my_timer%print_time() !! !! Needs my_timer to be declared previously as type(pic_timer_type) :: my_timer !! !! This function does not stop the timer, it will get the current time elapsed stopped or not class ( pic_timer_type ), intent ( in ) :: self real ( dp ) :: elapsed elapsed = self % get_elapsed_time () if ( self % is_running ) then print * , \"Currently elapsed time: \" // to_string ( elapsed ) // \" seconds\" else print * , \"Elapsed time: \" // to_string ( elapsed ) // \" seconds\" end if end subroutine timer_print_time function timer_get_elapsed_time ( self ) result ( elapsed ) !! Returns the elapsed time as a real(dp) variable !! !! Usage: var = my_timer%get_elapsed_time() !! !! Needs my_timer to be declared previously as type(pic_timer_type) :: my_timer !! class ( pic_timer_type ), intent ( in ) :: self real ( dp ) :: elapsed integer ( default_int ) :: current_count elapsed = 0.0_dp #ifdef _OPENMP if ( self % is_running ) then elapsed = omp_get_wtime () - self % start_time else elapsed = self % stop_time - self % start_time end if #else if ( self % is_running ) then call system_clock ( count = current_count ) elapsed = real ( current_count - self % start_count , dp ) / real ( self % count_rate , dp ) else elapsed = real ( self % stop_count - self % start_count , dp ) / real ( self % count_rate , dp ) end if #endif end function timer_get_elapsed_time end module pic_timer","tags":"","url":"sourcefile/pic_timer.f90.html"},{"title":"pic_sorting_ord_sort.f90 – PIC","text":"This file is subjec† both to the Fortran Standard Library license, and\nto additional licensing requirements as it contains translations of\nother software. The Fortran Standard Library, including this file, is distributed under\nthe MIT license that should be included with the library’s distribution. Copyright (c) 2021 Fortran stdlib developers Permission is hereby granted, free of charge, to any person obtaining a\n  copy of this software and associated documentation files (the\n  “Software”),  to deal in the Software without restriction, including\n  without limitation the rights to use, copy, modify, merge, publish,\n  distribute, sublicense, and/or sellcopies of the Software, and to permit\n  persons to whom the Software is furnished to do so, subject to the\n  following conditions: The above copyright notice and this permission notice shall be included\n  in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The generic subroutine, ORD_SORT , is substantially a translation to\nFortran 2008 of the \"Rust\" sort sorting routines in slice.rs The rust sort implementation is distributed with the header: Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n  file at the top-level directory of this distribution and at\n  http://rust-lang.org/COPYRIGHT. Licensed under the Apache License, Version 2.0 or the MIT license , at your\n  option. This file may not be copied, modified, or distributed\n  except according to those terms. so the license for the original slice.rs code is compatible with the use\nof modified versions of the code in the Fortran Standard Library under\nthe MIT license. This file depends on sourcefile~~pic_sorting_ord_sort.f90~~EfferentGraph sourcefile~pic_sorting_ord_sort.f90 pic_sorting_ord_sort.f90 sourcefile~pic_optional.f90 pic_optional.f90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_optional.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_sorting_ord_sort.f90->sourcefile~pic_types.f90 sourcefile~pic_optional.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_sorting_ord_sort.f90~~AfferentGraph sourcefile~pic_sorting_ord_sort.f90 pic_sorting_ord_sort.f90 sourcefile~pic_sorting.f90 pic_sorting.f90 sourcefile~pic_sorting.f90->sourcefile~pic_sorting_ord_sort.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! Licensing: !! !! This file is subjec† both to the Fortran Standard Library license, and !! to additional licensing requirements as it contains translations of !! other software. !! !! The Fortran Standard Library, including this file, is distributed under !! the MIT license that should be included with the library's distribution. !! !!   Copyright (c) 2021 Fortran stdlib developers !! !!   Permission is hereby granted, free of charge, to any person obtaining a !!   copy of this software and associated documentation files (the !!   \"Software\"),  to deal in the Software without restriction, including !!   without limitation the rights to use, copy, modify, merge, publish, !!   distribute, sublicense, and/or sellcopies of the Software, and to permit !!   persons to whom the Software is furnished to do so, subject to the !!   following conditions: !! !!   The above copyright notice and this permission notice shall be included !!   in all copies or substantial portions of the Software. !! !!   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS !!   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF !!   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. !!   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY !!   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, !!   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE !!   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. !! !! The generic subroutine, `ORD_SORT`, is substantially a translation to !! Fortran 2008 of the `\"Rust\" sort` sorting routines in !! [`slice.rs`](https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs) !! The `rust sort` implementation is distributed with the header: !! !!   Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT !!   file at the top-level directory of this distribution and at !!   http://rust-lang.org/COPYRIGHT. !! !!   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or !!   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license !!   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your !!   option. This file may not be copied, modified, or distributed !!   except according to those terms. !! !! so the license for the original`slice.rs` code is compatible with the use !! of modified versions of the code in the Fortran Standard Library under !! the MIT license. !submodule(pic_sorting) pic_sorting_ord_sort module pic_sorting_ord_sort use pic_types , only : int32 , int64 , sp , dp , int_index use pic_optional_value , only : pic_optional implicit none public :: ord_sort !! The generic subroutine implementing the `ORD_SORT` algorithm to return !! an input array with its elements sorted in order of (non-)decreasing !! value. Its use has the syntax: !! !!     call ord_sort( array[, work, reverse] ) !! !! with the arguments: !! !! * array: the rank 1 array to be sorted. It is an `intent(inout)` !!   argument of any of the types `integer(int8)`, `integer(int16)`, !!   `integer(int32)`, `integer(int64)`, `real(real32)`, `real(real64)`, !!   `real(real128)`, `character(*)`, `type(string_type)`, !!   `type(bitset_64)`, `type(bitset_large)`. If both the !!   type of `array` is real and at least one of the elements is a !!   `NaN`, then the ordering of the result is undefined. Otherwise it !!   is defined to be the original elements in non-decreasing order. !! !! * work (optional): shall be a rank 1 array of the same type as !!   `array`, and shall have at least `size(array)/2` elements. It is an !!   `intent(out)` argument to be used as \"scratch\" memory !!   for internal record keeping. If associated with an array in static !!   storage, its use can significantly reduce the stack memory requirements !!   for the code. Its value on return is undefined. !! !! * `reverse` (optional): shall be a scalar of type default logical. It !!   is an `intent(in)` argument. If present with a value of `.true.` then !!   `array` will be sorted in order of non-increasing values in stable !!   order. Otherwise index will sort `array` in order of non-decreasing !!   values in stable order. !! !!#### Example !! !!```fortran !!    ... !!    ! Read arrays from sorted files !!    call read_sorted_file( 'dummy_file1', array1 ) !!    call read_sorted_file( 'dummy_file2', array2 ) !!    ! Concatenate the arrays !!    allocate( array( size(array1) + size(array2) ) ) !!    array( 1:size(array1) ) = array1(:) !!    array( size(array1)+1:size(array1)+size(array2) ) = array2(:) !!    ! Sort the resulting array !!    call ord_sort( array, work ) !!    ! Process the sorted array !!    call array_search( array, values ) !!    ... !!``` private integer , parameter :: & ! The maximum number of entries in a run stack, good for an array of ! 2**64 elements see ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt max_merge_stack = int ( ceiling ( log ( 2._dp ** 64 ) / & log ( 1.6180339887_dp ))) type run_type !! Used to pass state around in a stack among helper functions for the !! `ORD_SORT` and `SORT_INDEX` algorithms integer ( int_index ) :: base = 0 integer ( int_index ) :: len = 0 end type run_type interface ord_sort !! The generic subroutine interface implementing the `ORD_SORT` algorithm, !! a translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in !! `slice.rs` !! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 !! `ORD_SORT` is a hybrid stable comparison algorithm combining `merge sort`, !! and `insertion sort`. !! !! It is always at worst O(N Ln(N)) in sorting random !! data, having a performance about 25% slower than `SORT` on such !! data, but has much better performance than `SORT` on partially !! sorted data, having O(N) performance on uniformly non-increasing or !! non-decreasing data. module subroutine int32_ord_sort ( array , work , reverse ) implicit none !! `int32_ord_sort( array )` sorts the input `ARRAY` of type `integer(int32)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int32_ord_sort module subroutine int64_ord_sort ( array , work , reverse ) implicit none !! `int64_ord_sort( array )` sorts the input `ARRAY` of type `integer(int64)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine int64_ord_sort module subroutine sp_ord_sort ( array , work , reverse ) implicit none !! `sp_ord_sort( array )` sorts the input `ARRAY` of type `real(sp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine sp_ord_sort module subroutine dp_ord_sort ( array , work , reverse ) implicit none !! `dp_ord_sort( array )` sorts the input `ARRAY` of type `real(dp)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine dp_ord_sort module subroutine char_ord_sort ( array , work , reverse ) implicit none !! `char_ord_sort( array )` sorts the input `ARRAY` of type `character(len=*)` !! using a hybrid sort based on the `\"Rust\" sort` algorithm found in `slice.rs` character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse end subroutine char_ord_sort end interface ord_sort contains module subroutine int32_ord_sort ( array , work , reverse ) integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call int32_decrease_ord_sort ( array , work ) else call int32_increase_ord_sort ( array , work ) end if end subroutine int32_ord_sort module subroutine int64_ord_sort ( array , work , reverse ) integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call int64_decrease_ord_sort ( array , work ) else call int64_increase_ord_sort ( array , work ) end if end subroutine int64_ord_sort module subroutine sp_ord_sort ( array , work , reverse ) real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call sp_decrease_ord_sort ( array , work ) else call sp_increase_ord_sort ( array , work ) end if end subroutine sp_ord_sort module subroutine dp_ord_sort ( array , work , reverse ) real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call dp_decrease_ord_sort ( array , work ) else call dp_increase_ord_sort ( array , work ) end if end subroutine dp_ord_sort module subroutine char_ord_sort ( array , work , reverse ) character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) logical , intent ( in ), optional :: reverse if ( pic_optional ( reverse , . false .)) then call char_decrease_ord_sort ( array , work ) else call char_increase_ord_sort ( array , work ) end if end subroutine char_ord_sort subroutine int32_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int32 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int32_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int32_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int32 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int32_increase_ord_sort subroutine int64_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int64 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int64_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int64_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int64 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int64_increase_ord_sort subroutine sp_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) real ( sp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"sp_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"sp_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( sp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine sp_increase_ord_sort subroutine dp_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) real ( dp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"dp_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"dp_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( dp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine dp_increase_ord_sort subroutine char_increase_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"char_increase_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else block character ( len = :), allocatable :: buf (:) ! Allocate a buffer to use as scratch memory. allocate ( character ( len = len ( array )) :: buf ( 0 : array_size / 2 - 1 ), & stat = stat ) if ( stat /= 0 ) error stop \"char_increase_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end block end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) <= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) >= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) < array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) >= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) < array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) <= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) >= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi character ( len = len ( array )) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine char_increase_ord_sort subroutine int32_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( out ), optional :: work ( 0 :) integer ( int32 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int32_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int32_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int32 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int32 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int32 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int32 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int32_decrease_ord_sort subroutine int64_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( out ), optional :: work ( 0 :) integer ( int64 ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"int64_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"int64_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j integer ( int64 ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid integer ( int64 ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place integer ( int64 ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi integer ( int64 ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine int64_decrease_ord_sort subroutine sp_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( out ), optional :: work ( 0 :) real ( sp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"sp_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"sp_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( sp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( sp ), intent ( inout ) :: array ( 0 :) real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( sp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( sp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( sp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine sp_decrease_ord_sort subroutine dp_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( out ), optional :: work ( 0 :) real ( dp ), allocatable :: buf (:) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"dp_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else ! Allocate a buffer to use as scratch memory. allocate ( buf ( 0 : array_size / 2 - 1 ), stat = stat ) if ( stat /= 0 ) error stop \"dp_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j real ( dp ) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. real ( dp ), intent ( inout ) :: array ( 0 :) real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid real ( dp ), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place real ( dp ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi real ( dp ) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine dp_decrease_ord_sort subroutine char_decrease_ord_sort ( array , work ) ! A translation to Fortran 2008, of the `\"Rust\" sort` algorithm found in ! `slice.rs` ! https://github.com/rust-lang/rust/blob/90eb44a5897c39e3dff9c7e48e3973671dcd9496/src/liballoc/slice.rs#L2159 ! The Rust version in turn is a simplification of the Timsort algorithm ! described in ! https://svn.python.org/projects/python/trunk/Objects/listsort.txt, as ! it drops both the use of 'galloping' to identify bounds of regions to be ! sorted and the estimation of the optimal `run size`. However it remains ! a hybrid sorting algorithm combining an iterative Merge sort controlled ! by a stack of `RUNS` identified by regions of uniformly decreasing or ! non-decreasing sequences that may be expanded to a minimum run size and ! initially processed by an insertion sort. ! ! Note the Fortran implementation simplifies the logic as it only has to ! deal with Fortran arrays of intrinsic types and not the full generality ! of Rust's arrays and lists for arbitrary types. It also adds the ! estimation of the optimal `run size` as suggested in Tim Peters' ! original `listsort.txt`, and an optional `work` array to be used as ! scratch memory. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( out ), optional :: work ( 0 :) integer ( int_index ) :: array_size integer :: stat array_size = size ( array , kind = int_index ) if ( present ( work )) then if ( size ( work , kind = int_index ) < array_size / 2 ) then error stop \"char_decrease_ord_sort: work array is too small.\" end if ! Use the work array as scratch memory call merge_sort ( array , work ) else block character ( len = :), allocatable :: buf (:) ! Allocate a buffer to use as scratch memory. allocate ( character ( len = len ( array )) :: buf ( 0 : array_size / 2 - 1 ), & stat = stat ) if ( stat /= 0 ) error stop \"char_decrease_ord_sort: Allocation of buffer failed.\" call merge_sort ( array , buf ) end block end if contains pure function calc_min_run ( n ) result ( min_run ) !! Returns the minimum length of a run from 32-63 so that N/MIN_RUN is !! less than or equal to a power of two. See !! https://svn.python.org/projects/python/trunk/Objects/listsort.txt integer ( int_index ) :: min_run integer ( int_index ), intent ( in ) :: n integer ( int_index ) :: num , r num = n r = 0_int_index do while ( num >= 64 ) r = ior ( r , iand ( num , 1_int_index )) num = ishft ( num , - 1_int_index ) end do min_run = num + r end function calc_min_run pure subroutine insertion_sort ( array ) ! Sorts `ARRAY` using an insertion sort. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: i , j character ( len = len ( array )) :: key do j = 1 , size ( array , kind = int_index ) - 1 key = array ( j ) i = j - 1 do while ( i >= 0 ) if ( array ( i ) >= key ) exit array ( i + 1 ) = array ( i ) i = i - 1 end do array ( i + 1 ) = key end do end subroutine insertion_sort pure function collapse ( runs ) result ( r ) ! Examine the stack of runs waiting to be merged, identifying adjacent runs ! to be merged until the stack invariants are restablished: ! ! 1. len(-3) > len(-2) + len(-1) ! 2. len(-2) > len(-1) integer ( int_index ) :: r type ( run_type ), intent ( in ), target :: runs ( 0 :) integer ( int_index ) :: n logical :: test n = size ( runs , kind = int_index ) test = . false . if ( n >= 2 ) then if ( runs ( n - 1 )% base == 0 . or . & runs ( n - 2 )% len <= runs ( n - 1 )% len ) then test = . true . else if ( n >= 3 ) then ! X exists if ( runs ( n - 3 )% len <= & runs ( n - 2 )% len + runs ( n - 1 )% len ) then test = . true . !               |X| <= |Y| + |Z| => will need to merge due to rho1 or rho2 else if ( n >= 4 ) then if ( runs ( n - 4 )% len <= & runs ( n - 3 )% len + runs ( n - 2 )% len ) then test = . true . !               |W| <= |X| + |Y| => will need to merge due to rho1 or rho3 end if end if end if end if if ( test ) then ! By default merge Y & Z, rho2 or rho3 if ( n >= 3 ) then if ( runs ( n - 3 )% len < runs ( n - 1 )% len ) then r = n - 3 ! |X| < |Z| => merge X & Y, rho1 return end if end if r = n - 2 ! |Y| <= |Z| => merge Y & Z, rho4 return else r = - 1 end if end function collapse pure subroutine insert_head ( array ) ! Inserts `array(0)` into the pre-sorted sequence `array(1:)` so that the ! whole `array(0:)` becomes sorted, copying the first element into ! a temporary variable, iterating until the right place for it is found. ! copying every traversed element into the slot preceding it, and finally, ! copying data from the temporary variable into the resulting hole. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )) :: tmp integer ( int_index ) :: i tmp = array ( 0 ) find_hole : do i = 1 , size ( array , kind = int_index ) - 1 if ( array ( i ) <= tmp ) exit find_hole array ( i - 1 ) = array ( i ) end do find_hole array ( i - 1 ) = tmp end subroutine insert_head subroutine merge_sort ( array , buf ) ! The Rust merge sort borrows some (but not all) of the ideas from TimSort, ! which is described in detail at ! (http://svn.python.org/projects/python/trunk/Objects/listsort.txt). ! ! The algorithm identifies strictly descending and non-descending ! subsequences, which are called natural runs. Where these runs are less ! than a minimum run size they are padded by adding additional samples ! using an insertion sort. The merge process is driven by a stack of ! pending unmerged runs. Each newly found run is pushed onto the stack, ! and then pairs of adjacentd runs are merged until these two invariants ! are satisfied: ! ! 1. for every `i` in `1..size(runs)-1`: `runs(i - 1)%len > runs(i)%len` ! 2. for every `i` in `2..size(runs)-1`: `runs(i - 2)%len > !    runs(i - 1)%len + runs(i)%len` ! ! The invariants ensure that the total running time is `O(n log n)` ! worst-case. character ( len =* ), intent ( inout ) :: array ( 0 :) character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_size , finish , min_run , r , r_count , & start type ( run_type ) :: runs ( 0 : max_merge_stack - 1 ), left , right array_size = size ( array , kind = int_index ) ! Very short runs are extended using insertion sort to span at least ! min_run elements. Slices of up to this length are sorted using insertion ! sort. min_run = calc_min_run ( array_size ) if ( array_size <= min_run ) then if ( array_size >= 2 ) call insertion_sort ( array ) return end if ! Following Rust sort, natural runs in `array` are identified by traversing ! it backwards. By traversing it backward, merges more often go in the ! opposite direction (forwards). According to developers of Rust sort, ! merging forwards is slightly faster than merging backwards. Therefore ! identifying runs by traversing backwards should improve performance. r_count = 0 finish = array_size - 1 do while ( finish >= 0 ) ! Find the next natural run, and reverse it if it's strictly descending. start = finish if ( start > 0 ) then start = start - 1 if ( array ( start + 1 ) > array ( start )) then Descending : do while ( start > 0 ) if ( array ( start ) <= array ( start - 1 )) & exit Descending start = start - 1 end do Descending call reverse_segment ( array ( start : finish )) else Ascending : do while ( start > 0 ) if ( array ( start ) > array ( start - 1 )) exit Ascending start = start - 1 end do Ascending end if end if ! If the run is too short insert some more elements using an insertion sort. Insert : do while ( start > 0 ) if ( finish - start >= min_run - 1 ) exit Insert start = start - 1 call insert_head ( array ( start : finish )) end do Insert if ( start == 0 . and . finish == array_size - 1 ) return runs ( r_count ) = run_type ( base = start , & len = finish - start + 1 ) finish = start - 1 r_count = r_count + 1 ! Determine whether pairs of adjacent runs need to be merged to satisfy ! the invariants, and, if so, merge them. Merge_loop : do r = collapse ( runs ( 0 : r_count - 1 )) if ( r < 0 . or . r_count <= 1 ) exit Merge_loop left = runs ( r + 1 ) right = runs ( r ) call merge ( array ( left % base : & right % base + right % len - 1 ), & left % len , buf ) runs ( r ) = run_type ( base = left % base , & len = left % len + right % len ) if ( r == r_count - 3 ) runs ( r + 1 ) = runs ( r + 2 ) r_count = r_count - 1 end do Merge_loop end do if ( r_count /= 1 ) & error stop \"MERGE_SORT completed without RUN COUNT == 1.\" end subroutine merge_sort pure subroutine merge ( array , mid , buf ) ! Merges the two non-decreasing runs `ARRAY(0:MID-1)` and `ARRAY(MID:)` ! using `BUF` as temporary storage, and stores the merged runs into ! `ARRAY(0:)`. `MID` must be > 0, and < `SIZE(ARRAY)-1`. Buffer `BUF` ! must be long enough to hold the shorter of the two runs. character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ), intent ( in ) :: mid character ( len = len ( array )), intent ( inout ) :: buf ( 0 :) integer ( int_index ) :: array_len , i , j , k array_len = size ( array , kind = int_index ) ! Merge first copies the shorter run into `buf`. Then, depending on which ! run was shorter, it traces the copied run and the longer run forwards ! (or backwards), comparing their next unprocessed elements and then ! copying the lesser (or greater) one into `array`. if ( mid <= array_len - mid ) then ! The left run is shorter. buf ( 0 : mid - 1 ) = array ( 0 : mid - 1 ) i = 0 j = mid merge_lower : do k = 0 , array_len - 1 if ( buf ( i ) >= array ( j )) then array ( k ) = buf ( i ) i = i + 1 if ( i >= mid ) exit merge_lower else array ( k ) = array ( j ) j = j + 1 if ( j >= array_len ) then array ( k + 1 :) = buf ( i : mid - 1 ) exit merge_lower end if end if end do merge_lower else ! The right run is shorter ! check that it is stable buf ( 0 : array_len - mid - 1 ) = array ( mid : array_len - 1 ) i = mid - 1 j = array_len - mid - 1 merge_upper : do k = array_len - 1 , 0 , - 1 if ( buf ( j ) <= array ( i )) then array ( k ) = buf ( j ) j = j - 1 if ( j < 0 ) exit merge_upper else array ( k ) = array ( i ) i = i - 1 if ( i < 0 ) then array ( 0 : k - 1 ) = buf ( 0 : j ) exit merge_upper end if end if end do merge_upper end if end subroutine merge pure subroutine reverse_segment ( array ) ! Reverse a segment of an array in place character ( len =* ), intent ( inout ) :: array ( 0 :) integer ( int_index ) :: lo , hi character ( len = len ( array )) :: temp lo = 0 hi = size ( array , kind = int_index ) - 1 do while ( lo < hi ) temp = array ( lo ) array ( lo ) = array ( hi ) array ( hi ) = temp lo = lo + 1 hi = hi - 1 end do end subroutine reverse_segment end subroutine char_decrease_ord_sort !end submodule pic_sorting_ord_sort end module pic_sorting_ord_sort","tags":"","url":"sourcefile/pic_sorting_ord_sort.f90.html"},{"title":"pic_string_utils.f90 – PIC","text":"Life is easier when we have strings. This file\ncontains the necessary routines to transform key data\ntypes into strings This file depends on sourcefile~~pic_string_utils.f90~~EfferentGraph sourcefile~pic_string_utils.f90 pic_string_utils.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_string_utils.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_string_utils.f90~~AfferentGraph sourcefile~pic_string_utils.f90 pic_string_utils.f90 sourcefile~pic_array.f90 pic_array.f90 sourcefile~pic_array.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_flop_rate.f90 pic_flop_rate.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_string_utils.f90 sourcefile~pic_timer.f90 pic_timer.F90 sourcefile~pic_flop_rate.f90->sourcefile~pic_timer.f90 sourcefile~pic_timer.f90->sourcefile~pic_string_utils.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! Life is easier when we have strings. This file !! contains the necessary routines to transform key data !! types into strings module pic_string !! General string utilities use pic_types , only : sp , dp , int32 , int64 , default_int implicit none ! Generic interface for to_string to handle different types private integer ( default_int ), parameter :: default_dp_precision = 12 integer ( default_int ) :: dp_precision = default_dp_precision integer ( default_int ), parameter :: default_sp_precision = 6 integer ( default_int ) :: sp_precision = default_sp_precision public :: to_string , pad , to_upper public :: set_precision , get_precision interface to_string !! converts a variable of type (int32, int64, sp, dp, char, logical) !! to a \"string\" which is just a collecting of chars. !! !! Usage result = to_string(variable) !! !! @note the functions here are not elemental so they won't work for !! arrays. Please use pic_print_array_v2 module for this !! module procedure to_string_int32 module procedure to_string_int64 module procedure to_string_sp module procedure to_string_dp module procedure to_string_char module procedure to_string_logical module procedure to_string_vector_int32 module procedure to_string_vector_int64 module procedure to_string_vector_sp module procedure to_string_vector_dp module procedure to_string_matrix_int32 module procedure to_string_matrix_int64 module procedure to_string_matrix_sp module procedure to_string_matrix_dp end interface interface to_upper !! takes a character variable and transforms it to uppercase !! !! usage var = to_upper(\"hello\") !! module procedure to_upper end interface interface pad !! adds a number X of spaces to the left of a \"string\" whcih is just a !! collection of characters. Mostly used for nice printing !! !! Usage: var = pad(\"hello\", n_spaces) !! module procedure pad end interface interface set_precision !! This routine overrides the default dp precision used for !! printing strings in the to_string function, the default !! is : integer(default_int), parameter :: default_dp_precision = 12 !! !! Usage: call set_precision(variable) where variable is default_int !! module procedure set_precision end interface interface get_precision !! Obtain the current precision being used to print variables to strings !! !! Usage: precision = get_precision() !! !! returns a default_int result module procedure get_precision end interface contains function to_upper ( str ) result ( upper_str ) character ( len =* ), intent ( in ) :: str character ( len = len ( str )) :: upper_str integer ( default_int ) :: i character :: ch do i = 1 , len ( str ) ch = str ( i : i ) if ( ch >= 'a' . and . ch <= 'z' ) then upper_str ( i : i ) = char ( iachar ( ch ) - 32 ) else upper_str ( i : i ) = ch end if end do end function to_upper function pad ( s , width ) result ( padded ) !! function to pad a string with a certain number of characters for nice printing character ( len =* ), intent ( in ) :: s integer ( default_int ), intent ( in ) :: width character ( len = :), allocatable :: padded integer ( default_int ) :: len_s len_s = len_trim ( s ) if ( len_s >= width ) then padded = s ( 1 : width ) else padded = repeat ( \" \" , width - len_s ) // s end if end function pad subroutine set_precision ( precision ) !! Set the precision for real numbers integer ( default_int ), intent ( in ) :: precision if ( precision > 0 ) then dp_precision = precision else print * , \"Warning: Precision must be positive. Using default.\" dp_precision = default_dp_precision end if end subroutine set_precision function get_precision () result ( precision ) !! Get the current precision for real numbers integer ( default_int ) :: precision precision = dp_precision end function get_precision function to_string_int32 ( i ) result ( trimmed_str ) !! transform an int32 to a string integer ( kind = int32 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , \"(I0)\" ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int32 function to_string_int64 ( i ) result ( trimmed_str ) !! transform an int64 to a string integer ( kind = int64 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , \"(I0)\" ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int64 function to_string_sp ( r ) result ( trimmed_str ) !! transform a real(sp) to a string real ( kind = sp ), intent ( in ) :: r character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str character ( len = 32 ) :: style !call write_with_precision(r, str) write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' write ( str , style ) r trimmed_str = trim ( str ) end function to_string_sp function to_string_dp ( r ) result ( trimmed_str ) !! transform a real(dp) to a string real ( kind = dp ), intent ( in ) :: r character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str character ( len = 32 ) :: style !call write_with_precision(r, str) write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' write ( str , style ) r trimmed_str = trim ( str ) end function to_string_dp function to_string_char ( c ) result ( trimmed_str ) !! transform a character to a string character ( len =* ), intent ( in ) :: c character ( len = 500 ) :: str character ( len = :), allocatable :: trimmed_str str = c trimmed_str = trim ( str ) end function to_string_char function to_string_logical ( l ) result ( trimmed_str ) !! tranform a logical to a string either true or false logical , intent ( in ) :: l character ( len = 5 ) :: str character ( len = :), allocatable :: trimmed_str if ( l ) then str = \"TRUE\" else str = \"FALSE\" end if trimmed_str = trim ( str ) end function to_string_logical function to_string_vector_dp ( array ) result ( trimmed_str ) real ( kind = dp ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , total_len ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_dp ! Vector to_string functions function to_string_vector_int32 ( array ) result ( trimmed_str ) integer ( int32 ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , total_len ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_int32 function to_string_vector_int64 ( array ) result ( trimmed_str ) integer ( int64 ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , total_len ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , '(I0)' ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_int64 function to_string_vector_sp ( array ) result ( trimmed_str ) real ( kind = sp ), intent ( in ) :: array (:) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , total_len ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , sp_precision , ')' ! Estimate total length needed total_len = 2 ! for brackets do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , size ( array ) write ( temp_str , style ) array ( i ) if ( i < size ( array )) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_vector_sp function to_string_matrix_dp ( array ) result ( trimmed_str ) real ( kind = dp ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , dp_precision , ')' ! Estimate total length needed (rough estimate) total_len = 10 + nrows ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , style ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string with newlines trimmed_str = \"[\" // new_line ( 'a' ) do i = 1 , nrows trimmed_str = trimmed_str // \" [\" do j = 1 , ncols write ( temp_str , style ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do if ( i < nrows ) then trimmed_str = trimmed_str // \"],\" // new_line ( 'a' ) else trimmed_str = trimmed_str // \"]\" // new_line ( 'a' ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_dp function to_string_matrix_int32 ( array ) result ( trimmed_str ) integer ( int32 ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Estimate total length needed total_len = 10 ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string trimmed_str = \"[\" do i = 1 , nrows if ( i > 1 ) trimmed_str = trimmed_str // \", \" trimmed_str = trimmed_str // \"[\" do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do trimmed_str = trimmed_str // \"]\" end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_int32 function to_string_matrix_int64 ( array ) result ( trimmed_str ) integer ( int64 ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Estimate total length needed total_len = 10 + nrows ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string with newlines trimmed_str = \"[\" // new_line ( 'a' ) do i = 1 , nrows trimmed_str = trimmed_str // \" [\" do j = 1 , ncols write ( temp_str , '(I0)' ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do if ( i < nrows ) then trimmed_str = trimmed_str // \"],\" // new_line ( 'a' ) else trimmed_str = trimmed_str // \"]\" // new_line ( 'a' ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_int64 function to_string_matrix_sp ( array ) result ( trimmed_str ) real ( kind = sp ), intent ( in ) :: array (:, :) character ( len = :), allocatable :: trimmed_str character ( len = 50 ) :: temp_str character ( len = 32 ) :: style integer :: i , j , total_len , nrows , ncols nrows = size ( array , 1 ) ncols = size ( array , 2 ) ! Set up format write ( style , '(A,I0,A)' ) '(F0.' , sp_precision , ')' ! Estimate total length needed total_len = 10 + nrows ! for outer brackets and newlines do i = 1 , nrows total_len = total_len + 3 ! for row brackets and comma do j = 1 , ncols write ( temp_str , style ) array ( i , j ) total_len = total_len + len_trim ( temp_str ) + 2 ! +2 for \", \" end do end do ! Allocate result string allocate ( character ( len = total_len ) :: trimmed_str ) ! Build the string with newlines trimmed_str = \"[\" // new_line ( 'a' ) do i = 1 , nrows trimmed_str = trimmed_str // \" [\" do j = 1 , ncols write ( temp_str , style ) array ( i , j ) if ( j < ncols ) then trimmed_str = trimmed_str // trim ( temp_str ) // \", \" else trimmed_str = trimmed_str // trim ( temp_str ) end if end do if ( i < nrows ) then trimmed_str = trimmed_str // \"],\" // new_line ( 'a' ) else trimmed_str = trimmed_str // \"]\" // new_line ( 'a' ) end if end do trimmed_str = trimmed_str // \"]\" end function to_string_matrix_sp end module pic_string","tags":"","url":"sourcefile/pic_string_utils.f90.html"},{"title":"pic_logger.f90 – PIC","text":"the pic_logger.f90 is the base file that defines the logger function\nthis is heavily inspired by the logger from the standard library\nbut with some key changes for my purposes.\nThe logger will be the way in which the code interacts\nwith the output to console and files This file depends on sourcefile~~pic_logger.f90~~EfferentGraph sourcefile~pic_logger.f90 pic_logger.f90 sourcefile~pic_global_definitions.f90 pic_global_definitions.f90 sourcefile~pic_logger.f90->sourcefile~pic_global_definitions.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_logger.f90->sourcefile~pic_types.f90 sourcefile~pic_global_definitions.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! the pic_logger.f90 is the base file that defines the logger function !! this is heavily inspired by the logger from the standard library !! but with some key changes for my purposes. !! The logger will be the way in which the code interacts !! with the output to console and files module pic_logger !! this is the logger module use pic_types , only : default_int use pic_global_definitions , only : stdout , logfile_unit implicit none private public :: global_logger , logger_type character ( * ), parameter :: name = \"pic_logger\" integer ( default_int ), parameter , public :: & debug_level = 10 , & verbose_level = 9 , & info_level = 8 , & performance_level = 7 , & warning_level = 6 , & error_level = 5 type :: logger_type !! custom logger data type private integer ( default_int ), public :: log_level = info_level !! set default log level to info integer ( default_int ), public :: log_file_level = verbose_level !! set default log file log level to verbose integer ( default_int ), private :: log_file_unit = - 1 logical , private :: log_file_open = . false . contains procedure , public , pass ( self ), non_overridable :: configuration !! Get the current logger verbosity configuration. !! Usage: call my_logger%configuration(level) procedure , public , pass ( self ), non_overridable :: configure !! Configure the logger to be a certain verbosity level. !! Usage: call my_logger%configure(level) procedure , public , pass ( self ), non_overridable :: configure_file_output !! Configure the logger to file to be a certain verbosity level. !! Usage: call my_logger%configure_file_output(filename, level) procedure , public , pass ( self ), non_overridable :: close_log_file !! Close the log file, needs to be called at the end of the program. !! Usage: call my_logger%close_log_file() procedure , public , pass ( self ), non_overridable :: debug !! Log a message that will only be printed at the debug level of verbosity. !! Usage: call my_logger%debug(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: verbose !! Log a message that will only be printed at the verbose level of verbosity. !! Usage: call my_logger%verbose(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: info !! Log a message that will only be printed at the info level of verbosity. !! Usage: call my_logger%info(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: performance !! Log a message that will only be printed at the performance level of verbosity. !! Usage: call my_logger%performance(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: warning !! Log a message that will only be printed at the warning level of verbosity. !! Usage: call my_logger%warning(\"MESSAGE\") procedure , public , pass ( self ), non_overridable :: error !! Log a message that will only be printed at the error level of verbosity. !! Usage: call my_logger%error(\"MESSAGE\") procedure , private , pass ( self ), non_overridable :: log !! Processes the message and filters it according to the verbosity level set by the user or the default end type logger_type type ( logger_type ) :: global_logger contains pure subroutine configuration ( self , level ) !! Get the current logger verbosity configuration !! !! Usage: call my_logger%configuration(level) !! !! TODO: this should be a function class ( logger_type ), intent ( in ) :: self integer ( default_int ), intent ( out ), optional :: level if ( present ( level )) level = self % log_level end subroutine configuration pure subroutine configure ( self , level ) !! Configure the logger to be a certain verbosity level !! !! Usage: call my_logger%configure(level) !! !! Where level can be a number according to the level struct !! or can be loaded from the level struct to be !! !! debug_level = 10, & !! !! verbose_level = 9, & !! !! info_level = 8, & !! !! performance_level = 7, & !! !! warning_level = 6, & !! !! error_level = 5 !! class ( logger_type ), intent ( inout ) :: self integer ( default_int ), intent ( in ), optional :: level if ( present ( level )) self % log_level = level end subroutine configure subroutine configure_file_output ( self , filename , level ) !! Configure the logger to file to be a certain verbosity level !! !! Usage: call my_logger%configure_file_output(level) !! !! Where level can be a number according to the level struct !! or can be loaded from the level struct to be !! !! debug_level = 10, & !! !! verbose_level = 9, & !! !! info_level = 8, & !! !! performance_level = 7, & !! !! warning_level = 6, & !! !! error_level = 5 !! class ( logger_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: filename integer ( default_int ), intent ( in ), optional :: level integer ( default_int ) :: ios if ( self % log_file_open ) call self % close_log_file () open ( unit = logfile_unit , file = trim ( filename ), status = \"replace\" , action = \"write\" , iostat = ios ) if ( ios /= 0 ) then write ( * , * ) \"ERROR: Failed to open log file: \" , trim ( filename ) return end if self % log_file_unit = logfile_unit self % log_file_open = . true . if ( present ( level )) self % log_file_level = level end subroutine configure_file_output subroutine close_log_file ( self ) !! Close the log file, needs to be called at the end of the program !! !! Usage: call my_logger%close_log_file() !! !! TODO: revisit class ( logger_type ), intent ( inout ) :: self if ( self % log_file_open ) then close ( self % log_file_unit ) self % log_file_open = . false . self % log_file_unit = - 1 end if end subroutine close_log_file subroutine debug ( self , message , module , procedure ) !! Log a message that will only be printed at the debug level of verbosity !! !! Usage: call my_logger%debug(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"DEBUG\" , message , module , procedure ) end subroutine debug subroutine verbose ( self , message , module , procedure ) !! Log a message that will only be printed at the verbose level of verbosity !! !! Usage: call my_logger%verbose(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"VERBOSE\" , message , module , procedure ) end subroutine verbose subroutine info ( self , message , module , procedure ) !! Log a message that will only be printed at the info level of verbosity !! !! Usage: call my_logger%info(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"INFO\" , message , module , procedure ) end subroutine info subroutine warning ( self , message , module , procedure ) !! Log a message that will only be printed at the warning level of verbosity !! !! Usage: call my_logger%warning(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"WARNING\" , message , module , procedure ) end subroutine warning subroutine performance ( self , message , module , procedure ) !! Log a message that will only be printed at the performance of verbosity !! !! Usage: call my_logger%performance(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"PERFORMANCE\" , message , module , procedure ) end subroutine performance subroutine error ( self , message , module , procedure ) !! Log a message that will only be printed at the error of verbosity !! !! Usage: call my_logger%error(\"MESSAGE\") !! class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"ERROR\" , message , module , procedure ) end subroutine error subroutine write_log_line ( unit , level , message , module , procedure ) !! Internal subroutine that will write the message to the log !! no interface to the public integer ( default_int ), intent ( in ) :: unit character ( * ), intent ( in ) :: level , message character ( * ), intent ( in ), optional :: module , procedure if ( present ( module ) . and . present ( procedure )) then write ( unit , '(A, \": \", A, \".\", A, \": \", A)' ) trim ( level ), trim ( module ), trim ( procedure ), trim ( message ) else if ( present ( module )) then write ( unit , '(A, \": \", A, \": \", A)' ) trim ( level ), trim ( module ), trim ( message ) else write ( unit , '(A, \": \", A)' ) trim ( level ), trim ( message ) end if end subroutine write_log_line subroutine log ( self , level , message , module , procedure ) !! internal subroutines that processes the message and filters it according to !! the verbosity level set by the user or the default !! this is a private subroutine so it is not exposed to the user class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: level character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure integer ( default_int ) :: log_level_value select case ( trim ( level )) case ( \"DEBUG\" ) log_level_value = debug_level case ( \"VERBOSE\" ) log_level_value = verbose_level case ( \"INFO\" ) log_level_value = info_level case ( \"WARNING\" ) log_level_value = warning_level case ( \"PERFORMANCE\" ) log_level_value = performance_level case ( \"ERROR\" ) log_level_value = error_level case default write ( * , * ) 'ERROR: Invalid log level \"' , trim ( level ), '\"' return end select ! Console logging if ( self % log_level >= log_level_value ) then call write_log_line ( stdout , level , message , module , procedure ) end if ! File logging if ( self % log_file_open . and . self % log_file_level >= log_level_value ) then call write_log_line ( self % log_file_unit , level , message , module , procedure ) end if end subroutine log end module pic_logger","tags":"","url":"sourcefile/pic_logger.f90.html"},{"title":"pic.f90 – PIC","text":"the main pic module interface: versions, banners, random quotes etc will go here Source Code !! the main pic module interface: versions, banners, random quotes etc will go here module pic !! simple interface module that prints banner and other information about the library !! mostly here to verify installs, etc. implicit none private public :: pic_print_banner contains subroutine pic_print_banner !! my cool banner, work in progress print * , \"========================================\" print * , \"         _____  _____  _____ \" print * , \"        |  __ \\\\|_   _|/ ____|\" print * , \"        | |__) | | | | |     \" print * , \"        |  ___/  | | | |     \" print * , \"        | |     _| |_| |____ \" print * , \"        |_|    |_____|\\\\_____|\" print * , \"                                        \" print * , \"               PIC LIBRARY\" print * , \"========================================\" end subroutine pic_print_banner end module pic","tags":"","url":"sourcefile/pic.f90.html"},{"title":"pic_output_helpers.f90 – PIC","text":"this file contains “helper” routines, for example printing\na set amount of x characters to creates tables, etc. This file depends on sourcefile~~pic_output_helpers.f90~~EfferentGraph sourcefile~pic_output_helpers.f90 pic_output_helpers.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_output_helpers.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! this file contains \"helper\" routines, for example printing !! a set amount of x characters to creates tables, etc. module pic_output_helpers !! Assorted output helper routines use pic_types , only : default_int implicit none private public :: print_asterisk_row contains subroutine print_asterisk_row ( n ) !! prints a convenient row of asterisks of length n integer ( kind = default_int ), intent ( in ) :: n !! number of asterisks to print integer ( kind = default_int ) :: i do i = 1 , n write ( * , \"(A)\" , advance = \"no\" ) \"*\" end do write ( * , * ) end subroutine print_asterisk_row end module pic_output_helpers","tags":"","url":"sourcefile/pic_output_helpers.f90.html"},{"title":"pic_constants.f90 – PIC","text":"all things constants, physical, chemical, etc This file depends on sourcefile~~pic_constants.f90~~EfferentGraph sourcefile~pic_constants.f90 pic_constants.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_constants.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! all things constants, physical, chemical, etc module pic_constants !! this will be the physical constants module use pic_types , only : dp implicit none private real ( dp ), parameter , public :: gravity = 9.81_dp end module pic_constants","tags":"","url":"sourcefile/pic_constants.f90.html"},{"title":"pic_gpu_runtime.F90 – PIC","text":"General cuda/hip agnostic module to interface to GPU runtimes Files dependent on this one sourcefile~~pic_gpu_runtime.f90~~AfferentGraph sourcefile~pic_gpu_runtime.f90 pic_gpu_runtime.F90 sourcefile~pic_device.f90 pic_device.f90 sourcefile~pic_device.f90->sourcefile~pic_gpu_runtime.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! General cuda/hip agnostic module to interface to GPU runtimes module pic_gpu_runtime !! gpu runtime interfaces via iso_c use iso_c_binding , only : c_int , c_size_t implicit none private public :: gpugetmeminfo , gpugetdevicecount , gpugetdevice #ifdef HAVE_CUDA interface function cudaMemGetInfo ( freeMem , totalMem ) bind ( C , name = \"cudaMemGetInfo\" ) use iso_c_binding , only : c_int , c_size_t implicit none integer ( c_int ) :: cudaMemGetInfo integer ( c_size_t ), intent ( out ) :: freeMem , totalMem end function cudaMemGetInfo function cudaGetDevice ( device ) bind ( C , name = \"cudaGetDevice\" ) use iso_c_binding , only : c_int , c_size_t implicit none integer ( c_int ) :: cudaGetDevice integer ( c_int ), intent ( out ) :: device end function cudaGetDevice function cudaGetDeviceCount ( count ) bind ( C , name = \"cudaGetDeviceCount\" ) use iso_c_binding , only : c_int , c_size_t implicit none integer ( c_int ) :: cudaGetDeviceCount integer ( c_int ), intent ( out ) :: count end function cudaGetDeviceCount end interface #elif defined(HAVE_HIP) interface function hipMemGetInfo ( freeMem , totalMem ) bind ( C , name = \"hipMemGetInfo\" ) use iso_c_binding , only : c_int , c_size_t implicit none integer ( c_int ) :: hipMemGetInfo integer ( c_size_t ), intent ( out ) :: freeMem , totalMem end function hipMemGetInfo function hipGetDevice ( device ) bind ( C , name = \"hipGetDevice\" ) use iso_c_binding , only : c_int , c_size_t implicit none integer ( c_int ) :: hipGetDevice integer ( c_int ), intent ( out ) :: device end function hipGetDevice function hipGetDeviceCount ( count ) bind ( C , name = \"hipGetDeviceCount\" ) use iso_c_binding , only : c_int , c_size_t implicit none integer ( c_int ) :: hipGetDeviceCount integer ( c_int ), intent ( out ) :: count end function hipGetDeviceCount end interface #endif contains subroutine gpugetmeminfo ( freeMem , totalMem , ierr ) !! get free and total memory from the GPU runtime integer ( c_size_t ), intent ( out ) :: freeMem , totalMem integer ( c_int ), intent ( out ) :: ierr #ifdef HAVE_CUDA ierr = cudaMemGetInfo ( freeMem , totalMem ) #elif defined(HAVE_HIP) ierr = hipMemGetInfo ( freeMem , totalMem ) #else freeMem = 0_c_size_t totalMem = 0_c_size_t ierr = - 1 #endif end subroutine gpugetmeminfo subroutine gpugetdevice ( device_id , ierr ) !! get current device id from the GPU runtime integer ( c_int ), intent ( out ) :: device_id , ierr #ifdef HAVE_CUDA ierr = cudaGetDevice ( device_id ) #elif defined(HAVE_HIP) ierr = hipGetDevice ( device_id ) #else ierr = - 1_c_int device_id = - 1_c_int #endif end subroutine gpugetdevice subroutine gpugetdevicecount ( device_count , ierr ) !! get device count available from the GPU runtime integer ( c_int ), intent ( out ) :: device_count , ierr #ifdef HAVE_CUDA ierr = cudaGetDeviceCount ( device_count ) #elif defined(HAVE_HIP) ierr = hipGetDeviceCount ( device_count ) #else ierr = - 1_c_int device_count = 0_c_int #endif end subroutine gpugetdevicecount end module pic_gpu_runtime","tags":"","url":"sourcefile/pic_gpu_runtime.f90.html"},{"title":"pic_helpers.f90 – PIC","text":"General helpers This file depends on sourcefile~~pic_helpers.f90~~EfferentGraph sourcefile~pic_helpers.f90 pic_helpers.f90 sourcefile~pic_global_definitions.f90 pic_global_definitions.f90 sourcefile~pic_helpers.f90->sourcefile~pic_global_definitions.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_helpers.f90->sourcefile~pic_types.f90 sourcefile~pic_global_definitions.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! General helpers module pic_test_helpers !! simple reusable helpers for random things use pic_types , only : int64 , dp , default_int , sp use pic_global_definitions , only : tol_sp , tol_dp implicit none private public :: dummy_work , is_equal interface is_equal !! The is equal interface is used to circumvent the fact that Fortran, rightfully, complains about !! comparing two reals without involving a tolerance, i.e. if(a == b) since there is no guarantee that !! the two reals are exactly equal due to floating point precision issues. The functions are defined as elemental !! !! Usage: if (is_equal(a, b)) then !! where a and b are real numbers, and the function will return true if they are !! equal within the tolerance defined in pic_global_definitions. module procedure is_equal_sp module procedure is_equal_dp end interface is_equal contains elemental function is_equal_sp ( a , b ) result ( res ) real ( sp ), intent ( in ) :: a , b logical :: res res = abs ( a - b ) < tol_sp end function is_equal_sp elemental function is_equal_dp ( a , b ) result ( res ) real ( dp ), intent ( in ) :: a , b logical :: res res = abs ( a - b ) < tol_dp end function is_equal_dp subroutine dummy_work () !! this subroutine runs a random dgemm to create work so that timers and other testing utils work nicely !! !! Usage: call dummy_work() !! !! it will simply do a 256 by 256 dgemm, woo integer ( int64 ) :: i , j , k integer ( default_int ) :: m real ( dp ), allocatable :: A (:, :), B (:, :), C (:, :) m = 256_default_int allocate ( A ( m , m ), B ( m , m ), C ( m , m )) A = 1.0_dp B = 1.0_dp C = 0.0_dp do i = 1 , m do j = 1 , m do k = 1 , m C ( i , j ) = C ( i , j ) + A ( i , k ) * B ( k , j ) end do end do end do print * , C ( 1 , 1 ) deallocate ( A , B , C ) end subroutine dummy_work end module pic_test_helpers","tags":"","url":"sourcefile/pic_helpers.f90.html"},{"title":"pic_command_line.f90 – PIC","text":"The pic_command_line.f90 file will contain all routines that will interact with the command line This file depends on sourcefile~~pic_command_line.f90~~EfferentGraph sourcefile~pic_command_line.f90 pic_command_line.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_command_line.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! The pic_command_line.f90 file will contain all routines that will interact with the command line module pic_command_line !! command line interaction module use pic_types , only : default_int implicit none private public :: get_first_arg_from_command_line contains function get_first_arg_from_command_line () result ( filename ) !! get the first argument from the command line, this is expected to be a filename !! !! Usage: filename = get_first_arg_from_command_line() !! character ( len = 255 ) :: filename character ( len = 255 ) :: arg integer ( default_int ) :: num_args num_args = command_argument_count () if ( num_args < 1 ) then write ( * , \"(A)\" ) \"Usage: ./my_executable <filename>\" stop 1 end if call get_command_argument ( 1 , arg ) filename = trim ( adjustl ( arg )) end function get_first_arg_from_command_line end module pic_command_line","tags":"","url":"sourcefile/pic_command_line.f90.html"},{"title":"pic_device.f90 – PIC","text":"device handling routines This file depends on sourcefile~~pic_device.f90~~EfferentGraph sourcefile~pic_device.f90 pic_device.f90 sourcefile~pic_gpu_runtime.f90 pic_gpu_runtime.F90 sourcefile~pic_device.f90->sourcefile~pic_gpu_runtime.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_device.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! device handling routines module pic_device !! contains the general routines that interface to the pic_gpu_runtime module !! there are not C interfaces in this file use iso_c_binding , only : c_int , c_size_t use pic_types , only : dp , int32 use pic_gpu_runtime , only : gpugetmeminfo , gpugetdevice , gpugetdevicecount implicit none private public :: pic_device_type public :: to_string public :: get_gpu_information public :: get_device_id public :: get_gpu_memory_info type :: pic_device_type !! general device container, contains the id, free, total , and used memory real ( dp ) :: free_mb = 0.0_dp real ( dp ) :: total_mb = 0.0_dp real ( dp ) :: used_mb = 0.0_dp integer ( c_int ) :: device_id = - 1_c_int contains procedure , non_overridable :: get_device_info => get_gpu_information end type pic_device_type interface to_string !! convenient way to print the pic_device_type using to_string(my_device) procedure :: to_string_device end interface contains subroutine get_gpu_information ( self ) !! call my_device%get_gpu_informatio() style subroutine to populate the object class ( pic_device_type ), intent ( inout ) :: self call get_gpu_memory_info ( self ) call get_device_id ( self ) end subroutine get_gpu_information function to_string_device ( self ) result ( str ) !! cute printing routine for the pic device type, transforms the contents into a !! string of chars class ( pic_device_type ), intent ( in ) :: self character ( len = :), allocatable :: str character ( len = 100 ) :: temp_str integer ( int32 ) :: total_len total_len = len ( \"Device ID:   \" ) + 6 + & len ( \"Free memory: \" ) + 20 + & len ( \"Total memory:\" ) + 20 + & len ( \"Used memory: \" ) + 20 + 3 * len ( new_line ( 'a' )) allocate ( character ( len = total_len ) :: str ) write ( temp_str , '(I0)' ) self % device_id str = \"Device ID:   \" // trim ( temp_str ) // new_line ( 'a' ) write ( temp_str , '(F10.2)' ) self % free_mb str = str // \"Free memory: \" // trim ( adjustl ( temp_str )) // \" MB\" // new_line ( 'a' ) write ( temp_str , '(F10.2)' ) self % total_mb str = str // \"Total memory: \" // trim ( adjustl ( temp_str )) // \" MB\" // new_line ( 'a' ) write ( temp_str , '(F10.2)' ) self % used_mb str = str // \"Used memory:  \" // trim ( adjustl ( temp_str )) // \" MB\" end function to_string_device subroutine get_device_id ( mem ) !! routine to get the device id for the device_type type ( pic_device_type ), intent ( inout ) :: mem integer ( c_int ) :: ierr , device_id call gpugetdevice ( device_id , ierr ) if ( ierr == 0_c_int ) then mem % device_id = device_id else mem % device_id = - 1_c_int end if end subroutine get_device_id subroutine get_gpu_memory_info ( mem ) !! routine to get the free and total memory for the device_type object !! can be used independently with call get_gpu_memory_info(device_object) type ( pic_device_type ), intent ( inout ) :: mem integer ( c_size_t ) :: freeMem , totalMem integer ( c_int ) :: ierr call gpugetmeminfo ( freeMem , totalMem , ierr ) if ( ierr == 0_c_int ) then mem % free_mb = real ( freeMem , kind = dp ) / 102 4.0_dp / 102 4.0_dp mem % total_mb = real ( totalMem , kind = dp ) / 102 4.0_dp / 102 4.0_dp mem % used_mb = mem % total_mb - mem % free_mb else mem = pic_device_type () ! zero it end if end subroutine get_gpu_memory_info end module pic_device","tags":"","url":"sourcefile/pic_device.f90.html"},{"title":"pic_flop_recorder.f90 – PIC","text":"flop recorder This file depends on sourcefile~~pic_flop_recorder.f90~~EfferentGraph sourcefile~pic_flop_recorder.f90 pic_flop_recorder.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_flop_recorder.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_flop_recorder.f90~~AfferentGraph sourcefile~pic_flop_recorder.f90 pic_flop_recorder.f90 sourcefile~pic_flop_rate.f90 pic_flop_rate.f90 sourcefile~pic_flop_rate.f90->sourcefile~pic_flop_recorder.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! flop recorder module pic_flop_recorder !! general flop recorder module use pic_types , only : int64 implicit none private public :: flop_recorder_type type :: flop_recorder_type !! the flop recorder type simply contains a flop count !! this should be the largest possible integer in the planet !! currently this will overflow for zetta flops private integer ( int64 ) :: flop_count = 0_int64 contains procedure , non_overridable :: add => add_flops procedure , non_overridable :: get => get_flops procedure , non_overridable :: reset => reset_flop_counter end type flop_recorder_type contains subroutine add_flops ( self , flops ) !! Add an int64 variable which contains the FLOPs !! we use int64 since we might reach very large FLOP counts !! !! Usage: call my_flop_recorder%add(flops) !! class ( flop_recorder_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops self % flop_count = self % flop_count + flops end subroutine add_flops function get_flops ( self ) result ( flops ) !! Get the int64 number of FLOPs we currently have in the counter !! !! Usage: flops = my_flop_recorder%get() !! class ( flop_recorder_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % flop_count end function get_flops subroutine reset_flop_counter ( self ) !! Resets the flop counter to 0_int64 !! !! Usage: call my_flop_recorder%reset() !! class ( flop_recorder_type ), intent ( inout ) :: self self % flop_count = 0_int64 end subroutine reset_flop_counter end module pic_flop_recorder","tags":"","url":"sourcefile/pic_flop_recorder.f90.html"},{"title":"pic_global_definitions.f90 – PIC","text":"this is an experimental file that contains definitions\nthat will be uses across the program, for example input/output units\nthat PIC will use across things. This file depends on sourcefile~~pic_global_definitions.f90~~EfferentGraph sourcefile~pic_global_definitions.f90 pic_global_definitions.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~pic_global_definitions.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~pic_global_definitions.f90~~AfferentGraph sourcefile~pic_global_definitions.f90 pic_global_definitions.f90 sourcefile~pic_helpers.f90 pic_helpers.f90 sourcefile~pic_helpers.f90->sourcefile~pic_global_definitions.f90 sourcefile~pic_logger.f90 pic_logger.f90 sourcefile~pic_logger.f90->sourcefile~pic_global_definitions.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code !! this is an experimental file that contains definitions !! that will be uses across the program, for example input/output units !! that PIC will use across things. module pic_global_definitions !! Global definitions for input output use pic_types , only : default_int , sp , dp implicit none private public :: stdout , logfile_unit public :: tol_sp , tol_dp integer ( default_int ), parameter :: stdout = 6 !! assign output unit 6 for stdout integer ( default_int ), parameter :: logfile_unit = 99 !! assign output unit 99 for the logfile real ( dp ), parameter :: tol_dp = 1.0e-12_dp real ( sp ), parameter :: tol_sp = 1.0e-6_sp end module pic_global_definitions","tags":"","url":"sourcefile/pic_global_definitions.f90.html"},{"title":"stdlib_pic_hash_32bit.f90 – PIC","text":"This file depends on sourcefile~~stdlib_pic_hash_32bit.f90~~EfferentGraph sourcefile~stdlib_pic_hash_32bit.f90 stdlib_pic_hash_32bit.f90 sourcefile~pic_types.f90 pic_types.F90 sourcefile~stdlib_pic_hash_32bit.f90->sourcefile~pic_types.f90 sourcefile~stdlib_pic_hash_32bit_fnv.f90 stdlib_pic_hash_32bit_fnv.f90 sourcefile~stdlib_pic_hash_32bit.f90->sourcefile~stdlib_pic_hash_32bit_fnv.f90 sourcefile~stdlib_pic_hash_32bit_fnv.f90->sourcefile~pic_types.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module stdlib_pic_hash_32bit use stdlib_pic_hash_32bit_fnv , only : fnv_1_hash , fnv_1a_hash use pic_types , only : & dp , & int32 , & int64 implicit none private ! pow32_over_phi is the odd integer that most closely approximates 2**32/phi, ! where phi is the golden ratio 1.618... integer ( int32 ), parameter :: & pow32_over_phi = int ( z '9E3779B9' , int32 ) public :: & fnv_1_hash , & fnv_1a_hash end module stdlib_pic_hash_32bit","tags":"","url":"sourcefile/stdlib_pic_hash_32bit.f90.html"},{"title":"About PIC – PIC","text":"Reasoning behind PIC In my relatively short career as a programmer I have used multiple languages: C, C++, Python, Julia, Bash, and of course, Fortran. During this time I have explored multiple avenues within each of the languages and have written quite a bit of code in most of them. Probably\nthe one I’ve written the most code in is C++, since I was one of the main contributors the GAMESS-ECP project that saw the\ncreation of GMS-HPC and the initial lines of code of what would become EXESS. While I was a postdoc at the Barca group I had the joy of meeting some of the best computer scientists I’ve ever met. I quickly realized\nthat I was John Snow, I didn’t know anything. It was the first time that I had the opportunity to colaborate closely with people that were trained in computer science and software engineering. Before that I lived in the academic programming world, which is mostly a “WRITE CODE, PUBLISH PAPER, GET GRANT” type of mindset. If a code\nworks, nice, you go ahead and publish a paper on it. Is the code good? Most of the times the answer to this is: no. I was fortunate enough to be a part of the rewriting of the EXESS codebase. Lead by, hopefully soon to be, Dr. Ryan Stocks we rewrote\nthe entire thing using some very cool features of the C++ language and tightly coupled it with MPI, CUDA/HIP, and ran some of the largest and and most performant simulations ever done. We even won a Gordon Bell prize in 2024 because of this ! In the end this was a gigantic team effort which wouldn’t have been possible without the contributions done by the entire team and the money provided by Dr Barca’s company QDX. Without this it would have been impossible to rewrite the entire code the way we did. After leaving my position as a postdoc at the Barca group I joined the National Computational Infrastructure (NCI) in Canberra where\nI could put to use all of my HPC and software engineering knowledge to test in other domains outside of computational quanutm chemistry. In my last year or so of my postdoc I took up a big interest in the Fortran programming language . I had used it before during my undergrad and early PhD but the ECP project had pushed me to full C++ and CUDA for GPU support. I discovered the beautiful community that is the Fortran Discourse and the associated projects people associated to it have undertaken. Examples are the Fortran Package Manager , the Fortran Standard Library and the LFortran compiler. I found a community of people that I hadn’t found in the C/C++ world and this drove me to start exploring the language a bit more. Why Fortran Fortran is an old language and with age comes lots of baggage. A lot of Fortran’s perceived baggage is due to legacy codes that use\nold language constructs that are no longer in the standard or just simply bad academic code. I somehow dislike the idea of the existence of Modern Fortran, but since there is also Modern C++ I wonder if my dislike is not reasonble. Modern Fortran or from now on just “Fortran” is whatever the language became since the release of Fortran 90 and beyond. People usually associate Fortran with code that looks like: PROGRAM MAIN IMPLICIT DOUBLE PRECISION ( A - H , O - Z ) REAL * 8 HTY , FTY , HUY , RUY CALL MTRBR ( ABC , BAC , CDF , EFG , DFGE , ASY ) IF ( VAR . EQ . TRUE ) THEN GOTO 500 ENDIF ... 500 PRINT * , \"YOU FOOL!\" END PROGRAM MAIN The ugly all caps; undescriptive, short variable names; the use of GOTO statements, and of course, the code starting in the 7 column. There is a lot of code that looks like this yes, however, new Fortran does not look like this at all. This is the famed transition\nfrom fixed to free format Fortran which lets one write code in whichever column you want to write. New Fortran looks quite differnt and I’d dare even say similar to other language, like Julia maybe. For example, this snippet of code from PIC itself: subroutine fill_vector_int64 ( vector , alpha , threaded ) integer ( int64 ), intent ( inout ) :: vector (:) integer ( int64 ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads integer ( default_int ) :: i if ( present ( threaded )) then use_threads = threaded else use_threads = use_threaded_default end if if ( use_threads ) then !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do else vector = alpha end if end subroutine fill_vector_int64 There is nothing “ugly” to look at here. Everything is nice lower caps with nice spacing. Variable names mean something\nto anyone that can speak english and I even showcase the use of OMP parallelism. One thing that you might comment on here “Oh, ew, you have to declare everything at the start like in C89”. And yeah,\nI see that comment a lot. HOWEVER. This is not the case anymore. I just did it like this here because the subroutine is rather small. Fortran has introduced the concept of blocks which are used to determine scope in a program, very similar to the {} in C/C++. For example, the above code could be rewritten as: subroutine fill_vector_int64 ( vector , alpha , threaded ) integer ( int64 ), intent ( inout ) :: vector (:) integer ( int64 ), intent ( in ) :: alpha logical , intent ( in ), optional :: threaded logical :: use_threads if ( present ( threaded )) then use_threads = threaded else use_threads = use_threaded_default end if if ( use_threads ) then loop : block integer ( default_int ) :: i !$omp parallel do collapse(1) private(i) do i = 1 , size ( vector , 1 ) vector ( i ) = alpha end do !$omp end parallel do end block loop else vector = alpha end if end subroutine fill_vector_int64 And now we’ve limited the scope of the i variable in the program. Blocks can be named or also omitted. I.e. you could ommit the name loop: and you’d still be fine. You can nest blocks in blocks, they just delimit the scope of variables. Now you might wonder, why do I need to say what size of int ? why am I using a default_int size for my integer. Well, this is one of\nthe things in PIC that had to be done in order for the code to be interfaceable with legacy Fortran applications. You see, in the old days, codes that wanted to use int64 or double precision , i.e. fp64 , had to use something similar to real(8) :: my_var this meant the number of bits used to represent the variable. People back then were lazy and the computers\ndid not help for this. You could tell the compiler to make all integer or real variables a default of int64 and double precision . This way all of your integers and reals would always be the precision you wanted them to be. This is unsurprisingly a very bad design decision. This makes it such that if any code wants to interface with your code the sizes of integers and reals need to match. This becomes\nextraordinarily painful if interfacing with C/C++ codes. Therefore, to avoid using this compiler flags I’ve set up PIC so that the default integer size can be toggled at compile time from within the program itself - not via the compiler. But I am getting distracted now. Why Fortran? Well one: out of spite. The C++ people seem to believe that you cannot achieve the same level and portability as a C++ code can. I\ndon’t believe this but I cannot just say it, I need to show it. I believe that Fortran can provide an easy entrance and avenue to High Performance Scientific Computing without having to be bogged\ndown by all of the program design choices that need to be taken if a code is written in C++. In the end, it is all code. Certain things are easier in Fortran, certain things are easier in C++. I’d argue that it is easier for\nscientists, who have little time to think about “How to write good code”, to write decent code in Fortran than in C++. C++ is an extremely powerful language, beyond my comprehension; however, the language is vast, a never ending horizon without mountains in sight. There is simply too much and for newcomers this is overwhelming. I experienced it and continue to do so, even after 8 years of programming in C++. Fortran is also extremely powerful - but also, not so vast as C++. This is due to the lack of standard library that is distributed with every compiler. Fortran is making a Standard Library but it is in its early stages. This is also a pain point in Fortran. There are many things in the standard library that are just good and make many tasks simple. The idea of the #include <iostream> and you get extremely powerful I/O capabilities. Also std::vector , #include <algorithm> etc. they provide a developer with very well built implementations of very simple (mundane tasks). For example, in Fortran there is no sort function that provides similar functionality to the ones in C++. The Fortran standard library is aiming to fix this, and they are working on it right now. However, there are many other functionalities that need to be covered and implemented for all types of programs. This is what drove me\nto create PIC. PIC is intended to be a set of functions and subroutines that facilitate developing code aimed for High Performance Computing for Scientific Applications. For example, weather simulations, finite element methods, computational quanutm chemistry, molecular dynamics, etc. The idea of PIC is to provide seamless interfaces to MPI, BLAS to allow people to think about their science instead of the code. The aim is to maybe “look pythonic in nature”, but probably closer to Julia. For example, being able to do call pic_gemm(A,B,C) and have PIC decide the bounds of the arrays and if the operations happens on the CPU or the GPU. PIC aims to provide a stable development platform for people that want to write high performance code for modern hardware architectures. However, the main goal of PIC is to provide portable code. Since, we all know the pain of imperfect Fortran compilers, PIC aims to compile and pass all tests across many compilers found in the literature. This is what drove me to implement my own versions of the sort functions from the standard library - they did not work with the NVIDIA or Cray compilers.","tags":"","url":"page/index.html"},{"title":"Contributing – PIC","text":"Contributing to PIC All contributions to PIC are welcome! If you have an idea for a new feature, a bug fix, or an improvement, please open an issue or submit a pull request. PIC is an open source project licensed under the MIT License, so you can use it in your own projects without any restrictions. If you use PIC in your project and your wrote a paper with it, please consider citing it by including a link to the repository in your paper. All code that you contribute to PIC will be licensed under the MIT license, so please make sure that you are comfortable with this before submitting your changes. How to contribute The following guidelines will help you contribute effectively: Fork the repository : Create your own fork of the PIC repository on GitHub. Create a new branch : Always create a new branch for your changes. This keeps your work organized and makes it easier to manage pull requests. I don’t really care about the branch name, but I suggest you abide by [type]/[description] format; where type is one of feat , fix , docs , chore , and experiment . Write tests : If you are adding new features or fixing bugs, please include tests to ensure that your changes work as expected. Follow the coding style : Please adhere to the coding style used in the project. This includes naming conventions, indentation, and commenting. Document your changes : Update the documentation to reflect any changes you make. This includes updating the README, comments in the code, and any relevant documentation files. Run tests : Before submitting your changes, make sure to run the tests to ensure that everything works as expected. The CI should catch any compiler issues. Submit a pull request : Once you have made your changes and tested them, submit a pull request to the main repository. Provide a clear description of your changes and why they are needed. The most important thing in the code is that we are aiming to support int32 and int64 as the default integer types. This is why\nwe use the default_int parameter in the pic_types.F90 module. When you are writing new code, please ensure that it is compatible with both integer types by always using integer(default_int) instead of integer or integer(kind=4) or integer(kind=8) . On the use of LLMs, AI thingies, etc. I do not care. As long as your code is tested, works, and is well documented I could not care less if you used an AI to write it. Can I copy paste code from PIC into ChatGPT, Claude, or whatever AI I use? Yes, you can. I don’t care. I do not consider this plagiarism, since the code is open source and you are free to use it as you wish. Documenting your code We use Ford to generate the documentation. The idea is to have coverage of almost every function in the code, except those that\ncan be self explanatory or if they are module procedure inside an interface block. For example: interface fill !! fill provides a generic interface to assing a value !! alpha of types ( int32 , int64 , sp , dp ) as defined in pic_types . F90 !! The inteface supports filling 1 d and 2 d arrays of the specified !! variables !! !! Usage : call fill ( array , value , [ optional ] threaded ) !! !! This subroutine is threaded for performance purposes if threaded is set to . true . !! module procedure fill_vector_int32 module procedure fill_vector_int64 module procedure fill_vector_sp module procedure fill_vector_dp module procedure fill_matrix_int32 module procedure fill_matrix_int64 module procedure fill_matrix_sp module procedure fill_matrix_dp end interface There’s really no need to go document each fill_vector_* or fill_matrix_* procedure, since the interface already provides\neverything we need to know about the procedures within the fill interface. Documenting each of these would mean to just\nwrite fills a vector of type int32 with the value alpha, uses threads if enabled which is redundant and not really useful. Code style We mostly follow the best practices outlined in the Fortran Best Practices guide. We have a pre-commit hook that will run fprettify to format the code before committing, this will ensure that the formatting is consistent across the codebase. To install pre-commit do: python3 -m pip install pre-commit\npre-commit install You can also run pre-commit run --all-files to format all the files in the repository. Module naming convention All our of modules are named using the pic_ prefix, followed by the name of the module. For example, the module that provides the basic types is called pic_types , and the module that provides the BLAS functionality is called pic_blas_interfaces . MOst of the time the module name matches the name of the file, if you find an instance where this is not the case, please open an issue or submit a pull request to fix it. Based on the file = module_name convention, there should only be one module per file. We follow the convention that the end module statement should contain the name of the module. Derived type naming convention All derived types should be named using the pic_ prefix, followed by the name of the type. For example, the type that represents a vector is called pic_vector_type , and the type that represents a matrix is called pic_matrix_type . Function and subroutine naming convention I really don’t care about naming conventions for functions or subroutines, I only suggest that you make the name descriptive and meaningful. Also,\nusing interfaces to hide the name of the subroutine inside the module is a good practice, since it allows you to change the implementation without affecting the users of the module. For example, in pic_timer.F90 we have the following interface: type :: pic_timer_type !! derived type for a timer, contains the start, stop, and count variables !! can work with or without omp private real ( dp ) :: start_time = 0.0_dp real ( dp ) :: stop_time = 0.0_dp real ( dp ) :: walltime logical :: is_running = . false . integer ( default_int ) :: start_count = 0_default_int integer ( default_int ) :: stop_count = 0_default_int integer ( default_int ) :: count_rate = 1_default_int contains procedure :: start => timer_start procedure :: stop => timer_stop procedure :: print_time => timer_print_time procedure :: get_elapsed_time => timer_get_elapsed_time end type pic_timer_type You can see that the start procedure is mapped to timer_start , this way it is more intuitive for people to use my_timer%start() instead of my_timer%timer_start() . This is a good practice to follow, since it makes the code more readable and easier to use. We follow the same convention for functions and subroutines, as we do for modules. This is, the end function or end subroutine statement should contain the name of the function or subroutine. Code reviews Code reviews are an essential part of the contribution process. When you submit a pull request, it will be reviewed by the maintainers of the project. They will provide feedback on your code, suggest improvements, and ensure that it meets the project’s standards. Please be open to feedback and willing to make changes to your code based on the review. The goal is to improve the quality of the code and ensure that it is maintainable in the long run. If you are new to contributing to open source projects, don’t be discouraged by the review process. It is a learning experience, and the maintainers are here to help you improve your code and understand the project better. If you feel connected to the project and want to help out with reviews, please let me know. I would be happy to invite as many people as possible to the main repository.","tags":"","url":"page/contributing.html"},{"title":"Design – PIC","text":"Design philosophy The idea of this library was inspired a bit by a very cool talk Chris Lattner gave\nat some conference. In his talk, he mentions how the LLVM project just grew in\nmany directions thanks to how the design of the project was done. I.e. the fact\nthat most of the components of the LLVM are in the lib subdirectory. If you’ve never compiled the LLVM I suggest you do it, you’ll see that you can\nenable different compoenents depending on your needs. Rarely does one need to build everything in it. The same idea will be applied to PIC. I want to provide a set of components\nthat can be used independently of each other. There will be of course, a core library\nthat will provide the most basic functionality. For example, everything at the very bottom depends\non the pic_types.F90 module, so you cannot really use PIC without it. So following this concept, PIC will create a series of libraries that are based\nupon the core library, i.e. the very basic functionality that will always be built\nno matter what project you select on top. This idea is more important if you’re using the CMake build system, since this\nwill need to be configured when building from source. Otherwise, if you are using\nthe Fortrn package manager and using pic as a dependency in your project, the FPM\nwill only builds the modules/components that you actually include in your project. I find this very neat. At this point, the core library is everything, I haven’t refactored the code to be\nbuilt into separate libraries, however I already have the modularity to not build\ncertain bits, like BLAS, or MPI. I envision the following structure libpic_core\nlibpic_blas\nlibpic_mpi\nlibpic_gpu And PIC will be able to build all of these with default_int set to either int32 or int64 , depending on the needs of the user.\nNaturally, the MPI module will only use int32 as the default integer type, since MPI ( mpi_f08 ) does not support int64 in its API. Design goals I hope that this library will be useful for many people, mostly as a fast and efficient way to\nwrite parallel code in Fortran. I also hope that it will be a good example of how\nto write (modern) Fortran code that is modular, extensible, and easy to use. This is also my attempt into showcasing that Fortran is not a boring old language that only has\na relevance in legacy code. I want to show that Fortran can be used to write modern, high-performance code that is easy to read and maintain.","tags":"","url":"page/design.html"}]}