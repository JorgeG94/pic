var tipuesearch = {"pages":[{"title":" PIC ","text":"PIC PIC is named after the Huastec word PIC which means otter. A work in progress on writing a cool backend for Fortan applications focused on Quantum Chemistry software. Building and dependencies There’s two build systems included in the present version, CMake and the Fortran Package Manager . The dependencies of the project are, as of now, CMake (if using cmake), MPI, OpenMP, and a BLAS/LAPACK library. You can find the the source docs here CMake CMake offers a very modular build of PIC, the following options are available and can be triggered by -DPIC_ENABLE_XYZ=ON/OFF Option Name Default Description PIC_DEFAULT_INT8 OFF Use 8-byte integers as default PIC_ENABLE_MPI OFF Enable the use of MPI in PIC PIC_ENABLE_OMP OFF Enable the use of OpenMP in PIC PIC_ENABLE_BLAS OFF Enable BLAS/LAPACK libraries in PIC PIC_ENABLE_TESTING ON Enable testing for PIC PIC_ENABLE_JONQUIL OFF Enable Jonquil for JSON/TOML handling mkdir build\ncd build\ncmake ../\nmake -j\nctest FPM Install the FPM following the instructions and then simply: fpm build Developer Info Jorge Luis Galvez Vallejo","tags":"home","url":"index.html"},{"title":"pic_timer – PIC ","text":"type, public :: pic_timer derived type for a timer, contains the start, stop, and count variables\ncan work with or without omp Type-Bound Procedures procedure, public :: get_elapsed_time => timer_get_elapsed_time public  function timer_get_elapsed_time (self) result(elapsed) return the elapsed time in double precision, in case the user wants it Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(in) :: self Return Value real(kind=dp) procedure, public :: print_time => timer_print_time public  subroutine timer_print_time (self) print the time nicely Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(in) :: self procedure, public :: start => timer_start public  subroutine timer_start (self) and away we go! Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(inout) :: self procedure, public :: stop => timer_stop public  subroutine timer_stop (self) and we’re done! Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(inout) :: self Source Code type :: pic_timer !! derived type for a timer, contains the start, stop, and count variables !! can work with or without omp private real ( dp ) :: start_time , stop_time integer :: start_count , stop_count integer :: count_rate contains procedure :: start => timer_start procedure :: stop => timer_stop procedure :: print_time => timer_print_time procedure :: get_elapsed_time => timer_get_elapsed_time end type pic_timer","tags":"","url":"type/pic_timer.html"},{"title":"pic_comm – PIC ","text":"type, public :: pic_comm custom data type that holds the MPI communicators Components Type Visibility Attributes Name Initial integer(kind=default_int), public :: dummy_comm if we don’t use MPI use an integer for a comm integer(kind=default_int), public :: m_ierr integer(kind=default_int), public :: m_rank MPI rank integer(kind=default_int), public :: m_size MPI size Type-Bound Procedures procedure, public :: finalize => pic_comm_finalize public  subroutine pic_comm_finalize (self) finalize the MPI library Arguments Type Intent Optional Attributes Name class( pic_comm ), intent(inout) :: self procedure, public :: init => pic_comm_init public  subroutine pic_comm_init (self) initilalize the MPI library and get the size and rank variables Arguments Type Intent Optional Attributes Name class( pic_comm ), intent(inout) :: self Source Code type :: pic_comm !! custom data type that holds the MPI communicators private #ifdef USE_MPI type ( MPI_COMM ), public :: comm !! use the MPI_COMM from the mpi_f08 module interface #else integer ( default_int ), public :: dummy_comm !! if we don't use MPI use an integer for a comm #endif integer ( default_int ), public :: m_rank !! MPI rank integer ( default_int ), public :: m_size !! MPI size integer ( default_int ), public :: m_ierr contains procedure :: init => pic_comm_init procedure :: finalize => pic_comm_finalize end type pic_comm","tags":"","url":"type/pic_comm.html"},{"title":"flop_rate_type – PIC ","text":"type, public :: flop_rate_type derived type for flop rate, contains a timer and a flop recorder Type-Bound Procedures procedure, public :: add_flops => flop_rate_add_flops public  subroutine flop_rate_add_flops (self, flops) add flops to the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops procedure, public :: get_flop_rate => flop_rate_get_flop_rate public  function flop_rate_get_flop_rate (self) result(flop_rate) get the flop rate in GFLOP/s, return 0.0 if time is zero or negative Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Return Value real(kind=dp) procedure, public :: get_flops => flop_rate_get_flops public  function flop_rate_get_flops (self) result(flops) get the number of flops recorded Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value integer(kind=int64) procedure, public :: get_time => flop_rate_get_time public  function flop_rate_get_time (self) result(time) get the elapsed time for the timer through the flop rate type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value real(kind=dp) procedure, public :: report => flop_rate_report public  subroutine flop_rate_report (self) report the flop rate in GFLOP/s\nthis is a convenience function to print the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self procedure, public :: start_time => flop_rate_start_time public  subroutine flop_rate_start_time (self) start the timer for the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self procedure, public :: stop_time => flop_rate_stop_time public  subroutine flop_rate_stop_time (self) stop the timer for the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Source Code type flop_rate_type !! derived type for flop rate, contains a timer and a flop recorder private type ( pic_timer ) :: m_timer type ( flop_recorder_type ) :: m_flops real ( dp ) :: m_flop_rate !! private by default so that people use the accessor functions contains procedure :: start_time => flop_rate_start_time procedure :: stop_time => flop_rate_stop_time procedure :: add_flops => flop_rate_add_flops procedure :: get_flops => flop_rate_get_flops procedure :: get_time => flop_rate_get_time procedure :: get_flop_rate => flop_rate_get_flop_rate procedure :: report => flop_rate_report end type flop_rate_type","tags":"","url":"type/flop_rate_type.html"},{"title":"flop_recorder_type – PIC ","text":"type, public :: flop_recorder_type Type-Bound Procedures procedure, public :: add => add_flops public  subroutine add_flops (self, flops) Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops procedure, public :: get => get_flops public  function get_flops (self) result(flops) Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(in) :: self Return Value integer(kind=int64) procedure, public :: reset => reset_flop_counter public  subroutine reset_flop_counter (self) Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self Source Code type :: flop_recorder_type private integer ( int64 ) :: flop_count = 0_int64 contains procedure :: add => add_flops procedure :: get => get_flops procedure :: reset => reset_flop_counter end type flop_recorder_type","tags":"","url":"type/flop_recorder_type.html"},{"title":"logger_type – PIC ","text":"type, public :: logger_type custom logger data type Components Type Visibility Attributes Name Initial integer(kind=default_int), public :: log_file_level = verbose_level set default log file log level to verbose integer(kind=default_int), public :: log_level = info_level set default log level to info Type-Bound Procedures procedure, public, pass(self) :: close_log_file private  subroutine close_log_file(self) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self procedure, public, pass(self) :: configuration private pure subroutine configuration(self, level) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self integer(kind=default_int), intent(out), optional :: level procedure, public, pass(self) :: configure private pure subroutine configure(self, level) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self integer(kind=default_int), intent(in), optional :: level procedure, public, pass(self) :: configure_file_output private  subroutine configure_file_output(self, filename, level) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(inout) :: self character(len=*), intent(in) :: filename integer(kind=default_int), intent(in), optional :: level procedure, public, pass(self) :: debug private  subroutine debug(self, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self) :: error private  subroutine error(self, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self) :: info private  subroutine info(self, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self) :: log private  subroutine log(self, level, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: level character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self) :: performance private  subroutine performance(self, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self) :: verbose private  subroutine verbose(self, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure procedure, public, pass(self) :: warning private  subroutine warning(self, message, module, procedure) Arguments Type Intent Optional Attributes Name class( logger_type ), intent(in) :: self character(len=*), intent(in) :: message character(len=*), intent(in), optional :: module character(len=*), intent(in), optional :: procedure Source Code type :: logger_type !! custom logger data type private integer ( default_int ), public :: log_level = info_level !! set default log level to info integer ( default_int ), public :: log_file_level = verbose_level !! set default log file log level to verbose integer ( default_int ), private :: log_file_unit = - 1 logical , private :: log_file_open = . false . contains procedure , public , pass ( self ) :: configuration procedure , public , pass ( self ) :: configure procedure , public , pass ( self ) :: configure_file_output procedure , public , pass ( self ) :: close_log_file procedure , public , pass ( self ) :: log procedure , public , pass ( self ) :: debug procedure , public , pass ( self ) :: verbose procedure , public , pass ( self ) :: info procedure , public , pass ( self ) :: performance procedure , public , pass ( self ) :: warning procedure , public , pass ( self ) :: error end type logger_type","tags":"","url":"type/logger_type.html"},{"title":"timer_get_elapsed_time – PIC","text":"public  function timer_get_elapsed_time(self) result(elapsed) return the elapsed time in double precision, in case the user wants it Type Bound pic_timer Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(in) :: self Return Value real(kind=dp) Source Code function timer_get_elapsed_time ( self ) result ( elapsed ) !! return the elapsed time in double precision, in case the user wants it class ( pic_timer ), intent ( in ) :: self real ( dp ) :: elapsed #ifdef _OPENMP elapsed = self % stop_time - self % start_time #else elapsed = real ( self % stop_count - self % start_count , dp ) / real ( self % count_rate , dp ) #endif end function timer_get_elapsed_time","tags":"","url":"proc/timer_get_elapsed_time.html"},{"title":"timer_print_time – PIC","text":"public  subroutine timer_print_time(self) print the time nicely Type Bound pic_timer Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(in) :: self Variables Type Visibility Attributes Name Initial real(kind=dp), public :: elapsed Source Code subroutine timer_print_time ( self ) !! print the time nicely class ( pic_timer ), intent ( in ) :: self real ( dp ) :: elapsed elapsed = self % get_elapsed_time () print * , \"Elapsed time: \" // to_string ( elapsed ) // \" seconds\" end subroutine timer_print_time","tags":"","url":"proc/timer_print_time.html"},{"title":"timer_start – PIC","text":"public  subroutine timer_start(self) and away we go! Type Bound pic_timer Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(inout) :: self Source Code subroutine timer_start ( self ) !! and away we go! class ( pic_timer ), intent ( inout ) :: self #ifdef _OPENMP self % start_time = omp_get_wtime () #else call system_clock ( self % start_count , self % count_rate ) #endif end subroutine timer_start","tags":"","url":"proc/timer_start.html"},{"title":"timer_stop – PIC","text":"public  subroutine timer_stop(self) and we’re done! Type Bound pic_timer Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(inout) :: self Source Code subroutine timer_stop ( self ) !! and we're done! class ( pic_timer ), intent ( inout ) :: self #ifdef _OPENMP self % stop_time = omp_get_wtime () #else call system_clock ( self % stop_count ) #endif end subroutine timer_stop","tags":"","url":"proc/timer_stop.html"},{"title":"pic_comm_finalize – PIC","text":"public  subroutine pic_comm_finalize(self) finalize the MPI library Type Bound pic_comm Arguments Type Intent Optional Attributes Name class( pic_comm ), intent(inout) :: self Source Code subroutine pic_comm_finalize ( self ) !! finalize the MPI library class ( pic_comm ), intent ( inout ) :: self #ifdef USE_MPI integer ( default_int ) :: ierr call MPI_Finalize ( ierr ) self % m_ierr = ierr #else self % m_ierr = 0 #endif end subroutine pic_comm_finalize","tags":"","url":"proc/pic_comm_finalize.html"},{"title":"pic_comm_init – PIC","text":"public  subroutine pic_comm_init(self) initilalize the MPI library and get the size and rank variables Type Bound pic_comm Arguments Type Intent Optional Attributes Name class( pic_comm ), intent(inout) :: self Source Code subroutine pic_comm_init ( self ) !! initilalize the MPI library and get the size and rank variables class ( pic_comm ), intent ( inout ) :: self #ifdef USE_MPI integer ( default_int ) :: ierr , rank , size call MPI_Init ( ierr ) self % m_ierr = ierr self % comm = MPI_COMM_WORLD call MPI_Comm_size ( self % comm , size , ierr ) call MPI_Comm_rank ( self % comm , rank , ierr ) self % m_size = size self % m_rank = rank #else self % m_size = 1 self % m_rank = 0 #endif end subroutine pic_comm_init","tags":"","url":"proc/pic_comm_init.html"},{"title":"pic_print_banner – PIC","text":"public  subroutine pic_print_banner() my cool banner, work in progress Arguments None Source Code subroutine pic_print_banner !! my cool banner, work in progress implicit none print * , \"========================================\" print * , \"         _____  _____  _____ \" print * , \"        |  __ \\\\|_   _|/ ____|\" print * , \"        | |__) | | | | |     \" print * , \"        |  ___/  | | | |     \" print * , \"        | |     _| |_| |____ \" print * , \"        |_|    |_____|\\\\_____|\" print * , \"                                        \" print * , \"               PIC LIBRARY\" print * , \"========================================\" end subroutine pic_print_banner","tags":"","url":"proc/pic_print_banner.html"},{"title":"to_string_char – PIC","text":"public  function to_string_char(c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable Variables Type Visibility Attributes Name Initial character(len=500), public :: str Source Code function to_string_char ( c ) result ( trimmed_str ) !! transform a character to a string character ( len =* ), intent ( in ) :: c character ( len = 500 ) :: str character ( len = :), allocatable :: trimmed_str str = c trimmed_str = trim ( str ) end function to_string_char","tags":"","url":"proc/to_string_char.html"},{"title":"to_string_dp – PIC","text":"public  function to_string_dp(r) result(trimmed_str) transform a real to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable Variables Type Visibility Attributes Name Initial character(len=50), public :: str Source Code function to_string_dp ( r ) result ( trimmed_str ) !! transform a real to a string real ( kind = dp ), intent ( in ) :: r character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , '(F0.12)' ) r ! Convert real to string with 3 decimal places trimmed_str = trim ( str ) end function to_string_dp","tags":"","url":"proc/to_string_dp.html"},{"title":"to_string_int32 – PIC","text":"public  function to_string_int32(i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable Variables Type Visibility Attributes Name Initial character(len=50), public :: str Source Code function to_string_int32 ( i ) result ( trimmed_str ) !! transform an int32 to a string integer ( kind = int32 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , '(I0)' ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int32","tags":"","url":"proc/to_string_int32.html"},{"title":"to_string_int64 – PIC","text":"public  function to_string_int64(i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable Variables Type Visibility Attributes Name Initial character(len=50), public :: str Source Code function to_string_int64 ( i ) result ( trimmed_str ) !! transform an int64 to a string integer ( kind = int64 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , '(I0)' ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int64","tags":"","url":"proc/to_string_int64.html"},{"title":"to_string_logical – PIC","text":"public  function to_string_logical(l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable Variables Type Visibility Attributes Name Initial character(len=5), public :: str Source Code function to_string_logical ( l ) result ( trimmed_str ) !! tranform a logical to a string either true or false logical , intent ( in ) :: l character ( len = 5 ) :: str character ( len = :), allocatable :: trimmed_str if ( l ) then str = 'TRUE' else str = 'FALSE' end if trimmed_str = trim ( str ) end function to_string_logical","tags":"","url":"proc/to_string_logical.html"},{"title":"to_string – PIC","text":"public interface to_string public interface to transform variables to strings Module Procedures public  function to_string_int32 (i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable public  function to_string_int64 (i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable public  function to_string_dp (r) result(trimmed_str) transform a real to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable public  function to_string_char (c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable public  function to_string_logical (l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable","tags":"","url":"interface/to_string.html"},{"title":"get_first_arg_from_command_line – PIC","text":"public  function get_first_arg_from_command_line() result(filename) obtain the first argument from the command line Arguments None Return Value character(len=255) Variables Type Visibility Attributes Name Initial character(len=255), public :: arg integer(kind=default_int), public :: num_args Source Code function get_first_arg_from_command_line () result ( filename ) !! obtain the first argument from the command line character ( len = 255 ) :: filename character ( len = 255 ) :: arg integer ( default_int ) :: num_args num_args = command_argument_count () if ( num_args < 1 ) then write ( * , '(A)' ) 'Usage: ./my_executable <filename>' stop 1 end if call get_command_argument ( 1 , arg ) filename = trim ( adjustl ( arg )) end function get_first_arg_from_command_line","tags":"","url":"proc/get_first_arg_from_command_line.html"},{"title":"flop_rate_get_flop_rate – PIC","text":"public  function flop_rate_get_flop_rate(self) result(flop_rate) get the flop rate in GFLOP/s, return 0.0 if time is zero or negative Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Return Value real(kind=dp) Variables Type Visibility Attributes Name Initial integer(kind=int64), public :: flops real(kind=dp), public :: time Source Code function flop_rate_get_flop_rate ( self ) result ( flop_rate ) !! get the flop rate in GFLOP/s, return 0.0 if time is zero or negative implicit none class ( flop_rate_type ), intent ( inout ) :: self real ( dp ) :: flop_rate real ( dp ) :: time integer ( int64 ) :: flops flops = self % m_flops % get () time = self % m_timer % get_elapsed_time () if ( time <= 0.0_dp ) then print * , \"Warning: Time is zero or negative, setting flop rate to zero.\" self % m_flop_rate = 0.0_dp flop_rate = 0.0_dp return else self % m_flop_rate = flops / time / 1.0d9 flop_rate = self % m_flop_rate end if end function flop_rate_get_flop_rate","tags":"","url":"proc/flop_rate_get_flop_rate.html"},{"title":"flop_rate_get_flops – PIC","text":"public  function flop_rate_get_flops(self) result(flops) get the number of flops recorded Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value integer(kind=int64) Source Code function flop_rate_get_flops ( self ) result ( flops ) !! get the number of flops recorded implicit none class ( flop_rate_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % m_flops % get () end function flop_rate_get_flops","tags":"","url":"proc/flop_rate_get_flops.html"},{"title":"flop_rate_get_time – PIC","text":"public  function flop_rate_get_time(self) result(time) get the elapsed time for the timer through the flop rate type Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value real(kind=dp) Source Code function flop_rate_get_time ( self ) result ( time ) !! get the elapsed time for the timer through the flop rate type implicit none class ( flop_rate_type ), intent ( in ) :: self real ( dp ) :: time time = self % m_timer % get_elapsed_time () end function flop_rate_get_time","tags":"","url":"proc/flop_rate_get_time.html"},{"title":"flop_rate_add_flops – PIC","text":"public  subroutine flop_rate_add_flops(self, flops) add flops to the flop rate Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops Source Code subroutine flop_rate_add_flops ( self , flops ) !! add flops to the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops call self % m_flops % add ( flops ) end subroutine flop_rate_add_flops","tags":"","url":"proc/flop_rate_add_flops.html"},{"title":"flop_rate_report – PIC","text":"public  subroutine flop_rate_report(self) report the flop rate in GFLOP/s\nthis is a convenience function to print the flop rate Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Source Code subroutine flop_rate_report ( self ) !! report the flop rate in GFLOP/s !! this is a convenience function to print the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self self % m_flop_rate = self % get_flop_rate () print * , \"Flop rate is \" // to_string ( self % m_flop_rate ) // \" GFLOP/s\" end subroutine flop_rate_report","tags":"","url":"proc/flop_rate_report.html"},{"title":"flop_rate_start_time – PIC","text":"public  subroutine flop_rate_start_time(self) start the timer for the flop rate Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Source Code subroutine flop_rate_start_time ( self ) !! start the timer for the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % start () end subroutine flop_rate_start_time","tags":"","url":"proc/flop_rate_start_time.html"},{"title":"flop_rate_stop_time – PIC","text":"public  subroutine flop_rate_stop_time(self) stop the timer for the flop rate Type Bound flop_rate_type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Source Code subroutine flop_rate_stop_time ( self ) !! stop the timer for the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % stop () end subroutine flop_rate_stop_time","tags":"","url":"proc/flop_rate_stop_time.html"},{"title":"print_matrix – PIC","text":"public  subroutine print_matrix(mat, format_type) print a matrix in a given format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) character(len=*), intent(in), optional :: format_type Variables Type Visibility Attributes Name Initial character(len=20), public :: format_selected Source Code subroutine print_matrix ( mat , format_type ) !! print a matrix in a given format implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) ! 2D array character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_matrix ( mat ) else call print_matrix_in_format ( mat , format_selected ) end if end subroutine print_matrix","tags":"","url":"proc/print_matrix.html"},{"title":"print_matrix_in_format – PIC","text":"public  subroutine print_matrix_in_format(mat, format_type, n_cols, n_rows) private subroutine to print a matrix in format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) character(len=*), intent(in) :: format_type format can be mathematica or numpy integer(kind=default_int), intent(in), optional :: n_cols integer(kind=default_int), intent(in), optional :: n_rows Variables Type Visibility Attributes Name Initial character(len=1), public :: close_bracket integer(kind=default_int), public :: i integer(kind=default_int), public :: j integer(kind=default_int), public :: loop_bound_i integer(kind=default_int), public :: loop_bound_j character(len=1), public :: open_bracket Source Code subroutine print_matrix_in_format ( mat , format_type , n_cols , n_rows ) !! private subroutine to print a matrix in format implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) character ( len =* ), intent ( in ) :: format_type !! format can be mathematica or numpy character ( len = 1 ) :: open_bracket , close_bracket integer ( kind = default_int ), intent ( in ), optional :: n_cols , n_rows integer ( kind = default_int ) :: i , j , loop_bound_i , loop_bound_j if ( present ( n_cols ) . and . present ( n_rows )) then loop_bound_i = n_cols loop_bound_j = n_rows else loop_bound_i = size ( mat , 1 ) loop_bound_j = size ( mat , 2 ) end if ! Select brackets based on format type if ( format_type == 'NUMPY' ) then open_bracket = '[' close_bracket = ']' else if ( format_type == 'MATHEMATICA' ) then open_bracket = '{' close_bracket = '}' else print * , \"Error: Unsupported format type. Defaulting to NumPy format.\" open_bracket = '[' close_bracket = ']' end if ! Print the matrix in the selected format print * , \"Matrix (\" , trim ( format_type ), \" format):\" print * , open_bracket do i = 1 , loop_bound_i write ( * , '(A)' , advance = \"no\" ) open_bracket ! Start of a row do j = 1 , loop_bound_j if ( j == loop_bound_j ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) mat ( i , j ) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) mat ( i , j ) end if end do if ( i == loop_bound_i ) then print * , close_bracket ! Close bracket without a comma for the last row else print * , close_bracket , \",\" ! Close bracket with a comma for all other rows end if end do print * , close_bracket end subroutine print_matrix_in_format","tags":"","url":"proc/print_matrix_in_format.html"},{"title":"print_matrix_m_n – PIC","text":"public  subroutine print_matrix_m_n(mat, n_cols, n_rows, format_type) Print a matrix of n_cols by n_rows Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) integer(kind=default_int), intent(in) :: n_cols integer(kind=default_int), intent(in) :: n_rows character(len=*), intent(in), optional :: format_type Variables Type Visibility Attributes Name Initial character(len=20), public :: format_selected Source Code subroutine print_matrix_m_n ( mat , n_cols , n_rows , format_type ) !! Print a matrix of n_cols by n_rows implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) ! 2D array integer ( kind = default_int ), intent ( in ) :: n_cols , n_rows character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_matrix ( mat , n_cols , n_rows ) else call print_matrix_in_format ( mat , format_selected , n_cols , n_rows ) end if end subroutine print_matrix_m_n","tags":"","url":"proc/print_matrix_m_n.html"},{"title":"print_plain_matrix – PIC","text":"public  subroutine print_plain_matrix(mat, n_cols, n_rows) private subroutine that prints a plain matrix of n_cols by n_rows Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) integer(kind=default_int), intent(in), optional :: n_cols integer(kind=default_int), intent(in), optional :: n_rows Variables Type Visibility Attributes Name Initial integer(kind=default_int), public :: i integer(kind=default_int), public :: j integer(kind=default_int), public :: loop_bound_i integer(kind=default_int), public :: loop_bound_j Source Code subroutine print_plain_matrix ( mat , n_cols , n_rows ) !! private subroutine that prints a plain matrix of n_cols by n_rows implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) integer ( kind = default_int ), intent ( in ), optional :: n_cols , n_rows integer ( kind = default_int ) :: i , j , loop_bound_i , loop_bound_j if ( present ( n_cols ) . and . present ( n_rows )) then loop_bound_i = n_cols loop_bound_j = n_rows else loop_bound_i = size ( mat , 1 ) loop_bound_j = size ( mat , 2 ) end if print * , \"Matrix (Plain format):\" do i = 1 , loop_bound_i do j = 1 , loop_bound_j if ( j == loop_bound_j ) then write ( * , fmt_edge , advance = \"yes\" ) mat ( i , j ) ! Last element in the row, new line else write ( * , fmt_in , advance = \"no\" ) mat ( i , j ) ! In-between elements end if end do end do end subroutine print_plain_matrix","tags":"","url":"proc/print_plain_matrix.html"},{"title":"print_plain_vector – PIC","text":"public  subroutine print_plain_vector(vec, n_elements) private subroutine that prints a vector of n_elements Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) integer(kind=default_int), intent(in), optional :: n_elements Variables Type Visibility Attributes Name Initial integer(kind=default_int), public :: i integer(kind=default_int), public :: loop_bound Source Code subroutine print_plain_vector ( vec , n_elements ) !! private subroutine that prints a vector of n_elements implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: vec (:) integer ( kind = default_int ), intent ( in ), optional :: n_elements integer ( kind = default_int ) :: i , loop_bound if ( present ( n_elements )) then loop_bound = n_elements else loop_bound = size ( vec ) end if print * , \"Vector (Plain format):\" do i = 1 , loop_bound write ( * , fmt_edge ) vec ( i ) end do end subroutine print_plain_vector","tags":"","url":"proc/print_plain_vector.html"},{"title":"print_vector – PIC","text":"public  subroutine print_vector(vec, format_type) print a vector Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) character(len=*), intent(in), optional :: format_type Variables Type Visibility Attributes Name Initial character(len=20), public :: format_selected Source Code subroutine print_vector ( vec , format_type ) !! print a vector implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: vec (:) ! 1D array character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_vector ( vec ) else call print_vector_in_format ( vec , format_selected ) end if end subroutine print_vector","tags":"","url":"proc/print_vector.html"},{"title":"print_vector_in_format – PIC","text":"public  subroutine print_vector_in_format(vec, format_type, n_elements) private subroutine that prints a vector in a format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) character(len=*), intent(in) :: format_type format can be mathematica or numpy integer(kind=default_int), intent(in), optional :: n_elements Variables Type Visibility Attributes Name Initial character(len=1), public :: close_bracket integer(kind=default_int), public :: i integer(kind=default_int), public :: loop_bound_i character(len=1), public :: open_bracket Source Code subroutine print_vector_in_format ( vec , format_type , n_elements ) !! private subroutine that prints a vector in a format implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: vec (:) character ( len =* ), intent ( in ) :: format_type !! format can be mathematica or numpy integer ( kind = default_int ), intent ( in ), optional :: n_elements character ( len = 1 ) :: open_bracket , close_bracket integer ( kind = default_int ) :: i , loop_bound_i if ( present ( n_elements )) then loop_bound_i = n_elements else loop_bound_i = size ( vec ) end if ! Select brackets based on format type if ( format_type == 'NUMPY' ) then open_bracket = '[' close_bracket = ']' else if ( format_type == 'MATHEMATICA' ) then open_bracket = '{' close_bracket = '}' else print * , \"Error: Unsupported format type. Defaulting to NumPy format.\" open_bracket = '[' close_bracket = ']' end if ! Print the vector in the selected format print * , \"Vector (\" , trim ( format_type ), \" format):\" print * , open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) vec ( i ) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) vec ( i ) end if end do print * , close_bracket end subroutine print_vector_in_format","tags":"","url":"proc/print_vector_in_format.html"},{"title":"print_vector_n – PIC","text":"public  subroutine print_vector_n(vec, n_elements, format_type) print a vector from start up to n_elements Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type Variables Type Visibility Attributes Name Initial character(len=20), public :: format_selected Source Code subroutine print_vector_n ( vec , n_elements , format_type ) !! print a vector from start up to n_elements implicit none ( type , external ) real ( dp ), intent ( in ) :: vec (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected integer ( kind = default_int ), intent ( in ) :: n_elements ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_vector ( vec , n_elements ) else call print_vector_in_format ( vec , format_selected , n_elements ) end if end subroutine print_vector_n","tags":"","url":"proc/print_vector_n.html"},{"title":"print_array – PIC","text":"public interface print_array general interface for printing a one or two dimensional array Module Procedures public  subroutine print_vector (vec, format_type) print a vector Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) character(len=*), intent(in), optional :: format_type public  subroutine print_matrix (mat, format_type) print a matrix in a given format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) character(len=*), intent(in), optional :: format_type","tags":"","url":"interface/print_array.html"},{"title":"print_array_with_bounds – PIC","text":"public interface print_array_with_bounds general interface to print an array within certain bounds Module Procedures public  subroutine print_vector_n (vec, n_elements, format_type) print a vector from start up to n_elements Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type public  subroutine print_matrix_m_n (mat, n_cols, n_rows, format_type) Print a matrix of n_cols by n_rows Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) integer(kind=default_int), intent(in) :: n_cols integer(kind=default_int), intent(in) :: n_rows character(len=*), intent(in), optional :: format_type","tags":"","url":"interface/print_array_with_bounds.html"},{"title":"get_flops – PIC","text":"public  function get_flops(self) result(flops) Type Bound flop_recorder_type Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(in) :: self Return Value integer(kind=int64) Source Code function get_flops ( self ) result ( flops ) implicit none class ( flop_recorder_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % flop_count end function get_flops","tags":"","url":"proc/get_flops.html"},{"title":"add_flops – PIC","text":"public  subroutine add_flops(self, flops) Type Bound flop_recorder_type Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops Source Code subroutine add_flops ( self , flops ) implicit none class ( flop_recorder_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops self % flop_count = self % flop_count + flops end subroutine add_flops","tags":"","url":"proc/add_flops.html"},{"title":"reset_flop_counter – PIC","text":"public  subroutine reset_flop_counter(self) Type Bound flop_recorder_type Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self Source Code subroutine reset_flop_counter ( self ) implicit none class ( flop_recorder_type ), intent ( inout ) :: self self % flop_count = 0_int64 end subroutine reset_flop_counter","tags":"","url":"proc/reset_flop_counter.html"},{"title":"print_asterisk_row – PIC","text":"public  subroutine print_asterisk_row(n) prints a convenient row of asterisks of length n Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n number of asterisks to print Variables Type Visibility Attributes Name Initial integer(kind=default_int), public :: i Source Code subroutine print_asterisk_row ( n ) !! prints a convenient row of asterisks of length n integer ( kind = default_int ), intent ( in ) :: n !! number of asterisks to print integer ( kind = default_int ) :: i do i = 1 , n write ( * , '(A)' , advance = 'no' ) '*' end do write ( * , * ) end subroutine print_asterisk_row","tags":"","url":"proc/print_asterisk_row.html"},{"title":"pic_timers – PIC","text":"contains a simple timer module to measure and record time Uses pic_string_utils pic_types Derived Types type, public :: pic_timer derived type for a timer, contains the start, stop, and count variables\ncan work with or without omp Type-Bound Procedures procedure, public :: get_elapsed_time => timer_get_elapsed_time procedure, public :: print_time => timer_print_time procedure, public :: start => timer_start procedure, public :: stop => timer_stop Functions public  function timer_get_elapsed_time (self) result(elapsed) return the elapsed time in double precision, in case the user wants it Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(in) :: self Return Value real(kind=dp) Subroutines public  subroutine timer_print_time (self) print the time nicely Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(in) :: self public  subroutine timer_start (self) and away we go! Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(inout) :: self public  subroutine timer_stop (self) and we’re done! Arguments Type Intent Optional Attributes Name class( pic_timer ), intent(inout) :: self","tags":"","url":"module/pic_timers.html"},{"title":"pic_mpi – PIC","text":"General MPI interface module Uses pic_types Variables Type Visibility Attributes Name Initial type( pic_comm ), public :: world_comm our world comm Derived Types type, public :: pic_comm custom data type that holds the MPI communicators Components Type Visibility Attributes Name Initial integer(kind=default_int), public :: dummy_comm if we don’t use MPI use an integer for a comm integer(kind=default_int), public :: m_ierr integer(kind=default_int), public :: m_rank MPI rank integer(kind=default_int), public :: m_size MPI size Type-Bound Procedures procedure, public :: finalize => pic_comm_finalize procedure, public :: init => pic_comm_init Subroutines public  subroutine pic_comm_finalize (self) finalize the MPI library Arguments Type Intent Optional Attributes Name class( pic_comm ), intent(inout) :: self public  subroutine pic_comm_init (self) initilalize the MPI library and get the size and rank variables Arguments Type Intent Optional Attributes Name class( pic_comm ), intent(inout) :: self","tags":"","url":"module/pic_mpi.html"},{"title":"pic – PIC","text":"simple interface module that prints banner and other information about the library\nmostly here to verify installs, etc. Subroutines public  subroutine pic_print_banner () my cool banner, work in progress Arguments None","tags":"","url":"module/pic.html"},{"title":"pic_types – PIC","text":"main module for defining types for integer and double precision Uses iso_fortran_env Variables Type Visibility Attributes Name Initial integer, public, parameter :: default_complex = dp default complex is double precision integer, public, parameter :: default_int = int32 default integer kind, be careful if you are using fdefault-size=8 integer, public, parameter :: default_real = dp naturally, our default real is double precision integer, public, parameter :: dp = SELECTED_REAL_KIND(15, 307) double precision variable integer, public, parameter :: qp = SELECTED_REAL_KIND(33, 4931) quadruple precision variable integer, public, parameter :: sp = SELECTED_REAL_KIND(6, 37) single precision variable","tags":"","url":"module/pic_types.html"},{"title":"pic_string_utils – PIC","text":"General string utilities Uses pic_types Interfaces public        interface to_string public interface to transform variables to strings public  function to_string_int32 (i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable public  function to_string_int64 (i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable public  function to_string_dp (r) result(trimmed_str) transform a real to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable public  function to_string_char (c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable public  function to_string_logical (l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable Functions public  function to_string_char (c) result(trimmed_str) transform a character to a string Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: c Return Value character(len=:), allocatable public  function to_string_dp (r) result(trimmed_str) transform a real to a string Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: r Return Value character(len=:), allocatable public  function to_string_int32 (i) result(trimmed_str) transform an int32 to a string Arguments Type Intent Optional Attributes Name integer(kind=int32), intent(in) :: i Return Value character(len=:), allocatable public  function to_string_int64 (i) result(trimmed_str) transform an int64 to a string Arguments Type Intent Optional Attributes Name integer(kind=int64), intent(in) :: i Return Value character(len=:), allocatable public  function to_string_logical (l) result(trimmed_str) tranform a logical to a string either true or false Arguments Type Intent Optional Attributes Name logical, intent(in) :: l Return Value character(len=:), allocatable","tags":"","url":"module/pic_string_utils.html"},{"title":"pic_global_definitions – PIC","text":"Global definitions for input output Uses pic_types Variables Type Visibility Attributes Name Initial integer(kind=default_int), public, parameter :: logfile_unit = 99 assign output unit 99 for the logfile integer(kind=default_int), public, parameter :: stdout = 6 assign output unit 6 for stdout","tags":"","url":"module/pic_global_definitions.html"},{"title":"pic_command_line – PIC","text":"command line interaction module Uses pic_types Functions public  function get_first_arg_from_command_line () result(filename) obtain the first argument from the command line Arguments None Return Value character(len=255)","tags":"","url":"module/pic_command_line.html"},{"title":"pic_flop_rate – PIC","text":"pic_flop_rate is a convenient encapsulation of the flop_recorder and pic_timer\nit is used to measure the flop rate of a given operation, and report it Uses pic_string_utils pic_types pic_timers pic_flop_recorder Derived Types type, public :: flop_rate_type derived type for flop rate, contains a timer and a flop recorder Type-Bound Procedures procedure, public :: add_flops => flop_rate_add_flops procedure, public :: get_flop_rate => flop_rate_get_flop_rate procedure, public :: get_flops => flop_rate_get_flops procedure, public :: get_time => flop_rate_get_time procedure, public :: report => flop_rate_report procedure, public :: start_time => flop_rate_start_time procedure, public :: stop_time => flop_rate_stop_time Functions public  function flop_rate_get_flop_rate (self) result(flop_rate) get the flop rate in GFLOP/s, return 0.0 if time is zero or negative Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self Return Value real(kind=dp) public  function flop_rate_get_flops (self) result(flops) get the number of flops recorded Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value integer(kind=int64) public  function flop_rate_get_time (self) result(time) get the elapsed time for the timer through the flop rate type Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(in) :: self Return Value real(kind=dp) Subroutines public  subroutine flop_rate_add_flops (self, flops) add flops to the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops public  subroutine flop_rate_report (self) report the flop rate in GFLOP/s\nthis is a convenience function to print the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self public  subroutine flop_rate_start_time (self) start the timer for the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self public  subroutine flop_rate_stop_time (self) stop the timer for the flop rate Arguments Type Intent Optional Attributes Name class( flop_rate_type ), intent(inout) :: self","tags":"","url":"module/pic_flop_rate.html"},{"title":"pic_matrix_printer – PIC","text":"Matrix printing module Uses pic_string_utils pic_types Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: fmt_edge = '(F14.10)' no comma format character(len=*), public, parameter :: fmt_in = '(F14.10, \", \")' comma format for between arrays Interfaces public        interface print_array general interface for printing a one or two dimensional array public  subroutine print_vector (vec, format_type) print a vector Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) character(len=*), intent(in), optional :: format_type public  subroutine print_matrix (mat, format_type) print a matrix in a given format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) character(len=*), intent(in), optional :: format_type public        interface print_array_with_bounds general interface to print an array within certain bounds public  subroutine print_vector_n (vec, n_elements, format_type) print a vector from start up to n_elements Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type public  subroutine print_matrix_m_n (mat, n_cols, n_rows, format_type) Print a matrix of n_cols by n_rows Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) integer(kind=default_int), intent(in) :: n_cols integer(kind=default_int), intent(in) :: n_rows character(len=*), intent(in), optional :: format_type Subroutines public  subroutine print_matrix (mat, format_type) print a matrix in a given format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) character(len=*), intent(in), optional :: format_type public  subroutine print_matrix_in_format (mat, format_type, n_cols, n_rows) private subroutine to print a matrix in format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) character(len=*), intent(in) :: format_type format can be mathematica or numpy integer(kind=default_int), intent(in), optional :: n_cols integer(kind=default_int), intent(in), optional :: n_rows public  subroutine print_matrix_m_n (mat, n_cols, n_rows, format_type) Print a matrix of n_cols by n_rows Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) integer(kind=default_int), intent(in) :: n_cols integer(kind=default_int), intent(in) :: n_rows character(len=*), intent(in), optional :: format_type public  subroutine print_plain_matrix (mat, n_cols, n_rows) private subroutine that prints a plain matrix of n_cols by n_rows Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: mat (:,:) integer(kind=default_int), intent(in), optional :: n_cols integer(kind=default_int), intent(in), optional :: n_rows public  subroutine print_plain_vector (vec, n_elements) private subroutine that prints a vector of n_elements Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) integer(kind=default_int), intent(in), optional :: n_elements public  subroutine print_vector (vec, format_type) print a vector Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) character(len=*), intent(in), optional :: format_type public  subroutine print_vector_in_format (vec, format_type, n_elements) private subroutine that prints a vector in a format Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) character(len=*), intent(in) :: format_type format can be mathematica or numpy integer(kind=default_int), intent(in), optional :: n_elements public  subroutine print_vector_n (vec, n_elements, format_type) print a vector from start up to n_elements Arguments Type Intent Optional Attributes Name real(kind=dp), intent(in) :: vec (:) integer(kind=default_int), intent(in) :: n_elements character(len=*), intent(in), optional :: format_type","tags":"","url":"module/pic_matrix_printer.html"},{"title":"pic_debugging_tools – PIC","text":"simple single include for printing routines Uses pic_string_utils pic_matrix_printer","tags":"","url":"module/pic_debugging_tools.html"},{"title":"pic_flop_recorder – PIC","text":"Uses pic_types Derived Types type, public :: flop_recorder_type Type-Bound Procedures procedure, public :: add => add_flops procedure, public :: get => get_flops procedure, public :: reset => reset_flop_counter Functions public  function get_flops (self) result(flops) Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(in) :: self Return Value integer(kind=int64) Subroutines public  subroutine add_flops (self, flops) Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self integer(kind=int64), intent(in) :: flops public  subroutine reset_flop_counter (self) Arguments Type Intent Optional Attributes Name class( flop_recorder_type ), intent(inout) :: self","tags":"","url":"module/pic_flop_recorder.html"},{"title":"pic_logger – PIC","text":"this is the logger module Uses pic_types pic_global_definitions Variables Type Visibility Attributes Name Initial integer(kind=default_int), public, parameter :: debug_level = 10 integer(kind=default_int), public, parameter :: error_level = 5 type( logger_type ), public :: global_logger integer(kind=default_int), public, parameter :: info_level = 8 integer(kind=default_int), public, parameter :: performance_level = 7 integer(kind=default_int), public, parameter :: verbose_level = 9 integer(kind=default_int), public, parameter :: warning_level = 6 Derived Types type, public :: logger_type custom logger data type Components Type Visibility Attributes Name Initial integer(kind=default_int), public :: log_file_level = verbose_level set default log file log level to verbose integer(kind=default_int), public :: log_level = info_level set default log level to info Type-Bound Procedures procedure, public, pass(self) :: close_log_file procedure, public, pass(self) :: configuration procedure, public, pass(self) :: configure procedure, public, pass(self) :: configure_file_output procedure, public, pass(self) :: debug procedure, public, pass(self) :: error procedure, public, pass(self) :: info procedure, public, pass(self) :: log procedure, public, pass(self) :: performance procedure, public, pass(self) :: verbose procedure, public, pass(self) :: warning","tags":"","url":"module/pic_logger.html"},{"title":"pic_output_helpers – PIC","text":"Assorted output helper routines Uses pic_types Subroutines public  subroutine print_asterisk_row (n) prints a convenient row of asterisks of length n Arguments Type Intent Optional Attributes Name integer(kind=default_int), intent(in) :: n number of asterisks to print","tags":"","url":"module/pic_output_helpers.html"},{"title":"pic_timer.F90 – PIC","text":"timing routines in general Source Code !! timing routines in general module pic_timers !! contains a simple timer module to measure and record time use pic_types use pic_string_utils #ifdef _OPENMP use omp_lib #endif implicit none type :: pic_timer !! derived type for a timer, contains the start, stop, and count variables !! can work with or without omp private real ( dp ) :: start_time , stop_time integer :: start_count , stop_count integer :: count_rate contains procedure :: start => timer_start procedure :: stop => timer_stop procedure :: print_time => timer_print_time procedure :: get_elapsed_time => timer_get_elapsed_time end type pic_timer contains subroutine timer_start ( self ) !! and away we go! class ( pic_timer ), intent ( inout ) :: self #ifdef _OPENMP self % start_time = omp_get_wtime () #else call system_clock ( self % start_count , self % count_rate ) #endif end subroutine timer_start subroutine timer_stop ( self ) !! and we're done! class ( pic_timer ), intent ( inout ) :: self #ifdef _OPENMP self % stop_time = omp_get_wtime () #else call system_clock ( self % stop_count ) #endif end subroutine timer_stop subroutine timer_print_time ( self ) !! print the time nicely class ( pic_timer ), intent ( in ) :: self real ( dp ) :: elapsed elapsed = self % get_elapsed_time () print * , \"Elapsed time: \" // to_string ( elapsed ) // \" seconds\" end subroutine timer_print_time function timer_get_elapsed_time ( self ) result ( elapsed ) !! return the elapsed time in double precision, in case the user wants it class ( pic_timer ), intent ( in ) :: self real ( dp ) :: elapsed #ifdef _OPENMP elapsed = self % stop_time - self % start_time #else elapsed = real ( self % stop_count - self % start_count , dp ) / real ( self % count_rate , dp ) #endif end function timer_get_elapsed_time end module pic_timers","tags":"","url":"sourcefile/pic_timer.f90.html"},{"title":"pic_mpi.F90 – PIC","text":"The pic_mpi.F90 file is the main interface to the MPI implementation, it should\nbe done in such a way that we can compile the library with and without MPI\nit will be a pain in general, but meh, let’s see what we can do Source Code !! The pic_mpi.F90 file is the main interface to the MPI implementation, it should !! be done in such a way that we can compile the library with and without MPI !! it will be a pain in general, but meh, let's see what we can do module pic_mpi !! General MPI interface module use pic_types , only : default_int #ifdef USE_MPI use mpi_f08 #endif implicit none type :: pic_comm !! custom data type that holds the MPI communicators private #ifdef USE_MPI type ( MPI_COMM ), public :: comm !! use the MPI_COMM from the mpi_f08 module interface #else integer ( default_int ), public :: dummy_comm !! if we don't use MPI use an integer for a comm #endif integer ( default_int ), public :: m_rank !! MPI rank integer ( default_int ), public :: m_size !! MPI size integer ( default_int ), public :: m_ierr contains procedure :: init => pic_comm_init procedure :: finalize => pic_comm_finalize end type pic_comm type ( pic_comm ), public :: world_comm !! our world comm contains subroutine pic_comm_init ( self ) !! initilalize the MPI library and get the size and rank variables class ( pic_comm ), intent ( inout ) :: self #ifdef USE_MPI integer ( default_int ) :: ierr , rank , size call MPI_Init ( ierr ) self % m_ierr = ierr self % comm = MPI_COMM_WORLD call MPI_Comm_size ( self % comm , size , ierr ) call MPI_Comm_rank ( self % comm , rank , ierr ) self % m_size = size self % m_rank = rank #else self % m_size = 1 self % m_rank = 0 #endif end subroutine pic_comm_init subroutine pic_comm_finalize ( self ) !! finalize the MPI library class ( pic_comm ), intent ( inout ) :: self #ifdef USE_MPI integer ( default_int ) :: ierr call MPI_Finalize ( ierr ) self % m_ierr = ierr #else self % m_ierr = 0 #endif end subroutine pic_comm_finalize end module pic_mpi","tags":"","url":"sourcefile/pic_mpi.f90.html"},{"title":"pic.f90 – PIC","text":"the main pic module interface: versions, banners, random quotes etc will go here Source Code !! the main pic module interface: versions, banners, random quotes etc will go here module pic !! simple interface module that prints banner and other information about the library !! mostly here to verify installs, etc. implicit none contains subroutine pic_print_banner !! my cool banner, work in progress implicit none print * , \"========================================\" print * , \"         _____  _____  _____ \" print * , \"        |  __ \\\\|_   _|/ ____|\" print * , \"        | |__) | | | | |     \" print * , \"        |  ___/  | | | |     \" print * , \"        | |     _| |_| |____ \" print * , \"        |_|    |_____|\\\\_____|\" print * , \"                                        \" print * , \"               PIC LIBRARY\" print * , \"========================================\" end subroutine pic_print_banner end module pic","tags":"","url":"sourcefile/pic.f90.html"},{"title":"pic_types.F90 – PIC","text":"pic_types.F90 controls the standarized sizes for the datatypes across\npic, this is key for interfacing with other codes specially those that\nuse default sizes Source Code !! pic_types.F90 controls the standarized sizes for the datatypes across !! pic, this is key for interfacing with other codes specially those that !! use default sizes module pic_types !! main module for defining types for integer and double precision use iso_fortran_env , only : int32 , int64 implicit none ( type , external ) public ! Define kinds for different data types ! int32 and int64 are defined in the iso_fortran_env, if you need to change things please do so here integer , parameter :: sp = SELECTED_REAL_KIND ( 6 , 37 ) !! single precision variable integer , parameter :: dp = SELECTED_REAL_KIND ( 15 , 307 ) !! double precision variable integer , parameter :: qp = SELECTED_REAL_KIND ( 33 , 4931 ) !! quadruple precision variable ! Define default types #ifdef USE_INT8 integer , parameter :: default_int = int64 #else integer , parameter :: default_int = int32 #endif !! default integer kind, be careful if you are using fdefault-size=8 integer , parameter :: default_real = dp !! naturally, our default real is double precision integer , parameter :: default_complex = dp !! default complex is double precision end module pic_types","tags":"","url":"sourcefile/pic_types.f90.html"},{"title":"pic_string_utils.f90 – PIC","text":"Life is easier when we have strings. This file\ncontains the necessary routines to transform key data\ntypes into strings Source Code !! Life is easier when we have strings. This file !! contains the necessary routines to transform key data !! types into strings module pic_string_utils !! General string utilities use pic_types , only : sp , dp , int32 , int64 implicit none ( type , external ) ! Generic interface for to_string to handle different types public interface to_string !! public interface to transform variables to strings module procedure to_string_int32 module procedure to_string_int64 module procedure to_string_dp module procedure to_string_char module procedure to_string_logical end interface contains function to_string_int32 ( i ) result ( trimmed_str ) !! transform an int32 to a string integer ( kind = int32 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , '(I0)' ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int32 function to_string_int64 ( i ) result ( trimmed_str ) !! transform an int64 to a string integer ( kind = int64 ), intent ( in ) :: i character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , '(I0)' ) i ! Convert integer to string without leading spaces trimmed_str = trim ( str ) end function to_string_int64 function to_string_dp ( r ) result ( trimmed_str ) !! transform a real to a string real ( kind = dp ), intent ( in ) :: r character ( len = 50 ) :: str character ( len = :), allocatable :: trimmed_str write ( str , '(F0.12)' ) r ! Convert real to string with 3 decimal places trimmed_str = trim ( str ) end function to_string_dp function to_string_char ( c ) result ( trimmed_str ) !! transform a character to a string character ( len =* ), intent ( in ) :: c character ( len = 500 ) :: str character ( len = :), allocatable :: trimmed_str str = c trimmed_str = trim ( str ) end function to_string_char function to_string_logical ( l ) result ( trimmed_str ) !! tranform a logical to a string either true or false logical , intent ( in ) :: l character ( len = 5 ) :: str character ( len = :), allocatable :: trimmed_str if ( l ) then str = 'TRUE' else str = 'FALSE' end if trimmed_str = trim ( str ) end function to_string_logical end module pic_string_utils","tags":"","url":"sourcefile/pic_string_utils.f90.html"},{"title":"pic_global_definitions.f90 – PIC","text":"this is an experimental file that contains definitions\nthat will be uses across the program, for example input/output units\nthat PIC will use across things. Source Code !! this is an experimental file that contains definitions !! that will be uses across the program, for example input/output units !! that PIC will use across things. module pic_global_definitions !! Global definitions for input output use pic_types , only : default_int implicit none public integer ( default_int ), parameter :: stdout = 6 !! assign output unit 6 for stdout integer ( default_int ), parameter :: logfile_unit = 99 !! assign output unit 99 for the logfile end module pic_global_definitions","tags":"","url":"sourcefile/pic_global_definitions.f90.html"},{"title":"pic_command_line.f90 – PIC","text":"The pic_command_line.f90 file will contain all routines that will interact with the command line Source Code !! The pic_command_line.f90 file will contain all routines that will interact with the command line module pic_command_line !! command line interaction module use pic_types , only : default_int implicit none ( type , external ) public contains function get_first_arg_from_command_line () result ( filename ) !! obtain the first argument from the command line character ( len = 255 ) :: filename character ( len = 255 ) :: arg integer ( default_int ) :: num_args num_args = command_argument_count () if ( num_args < 1 ) then write ( * , '(A)' ) 'Usage: ./my_executable <filename>' stop 1 end if call get_command_argument ( 1 , arg ) filename = trim ( adjustl ( arg )) end function get_first_arg_from_command_line end module pic_command_line","tags":"","url":"sourcefile/pic_command_line.f90.html"},{"title":"pic_flop_rate.f90 – PIC","text":"flop rate handler modules Source Code !! flop rate handler modules module pic_flop_rate !! pic_flop_rate is a convenient encapsulation of the flop_recorder and pic_timer !! it is used to measure the flop rate of a given operation, and report it use pic_types use pic_timers use pic_flop_recorder use pic_string_utils , only : to_string implicit none type flop_rate_type !! derived type for flop rate, contains a timer and a flop recorder private type ( pic_timer ) :: m_timer type ( flop_recorder_type ) :: m_flops real ( dp ) :: m_flop_rate !! private by default so that people use the accessor functions contains procedure :: start_time => flop_rate_start_time procedure :: stop_time => flop_rate_stop_time procedure :: add_flops => flop_rate_add_flops procedure :: get_flops => flop_rate_get_flops procedure :: get_time => flop_rate_get_time procedure :: get_flop_rate => flop_rate_get_flop_rate procedure :: report => flop_rate_report end type flop_rate_type contains subroutine flop_rate_start_time ( self ) !! start the timer for the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % start () end subroutine flop_rate_start_time subroutine flop_rate_stop_time ( self ) !! stop the timer for the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self call self % m_timer % stop () end subroutine flop_rate_stop_time subroutine flop_rate_add_flops ( self , flops ) !! add flops to the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops call self % m_flops % add ( flops ) end subroutine flop_rate_add_flops function flop_rate_get_flops ( self ) result ( flops ) !! get the number of flops recorded implicit none class ( flop_rate_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % m_flops % get () end function flop_rate_get_flops function flop_rate_get_time ( self ) result ( time ) !! get the elapsed time for the timer through the flop rate type implicit none class ( flop_rate_type ), intent ( in ) :: self real ( dp ) :: time time = self % m_timer % get_elapsed_time () end function flop_rate_get_time function flop_rate_get_flop_rate ( self ) result ( flop_rate ) !! get the flop rate in GFLOP/s, return 0.0 if time is zero or negative implicit none class ( flop_rate_type ), intent ( inout ) :: self real ( dp ) :: flop_rate real ( dp ) :: time integer ( int64 ) :: flops flops = self % m_flops % get () time = self % m_timer % get_elapsed_time () if ( time <= 0.0_dp ) then print * , \"Warning: Time is zero or negative, setting flop rate to zero.\" self % m_flop_rate = 0.0_dp flop_rate = 0.0_dp return else self % m_flop_rate = flops / time / 1.0d9 flop_rate = self % m_flop_rate end if end function flop_rate_get_flop_rate subroutine flop_rate_report ( self ) !! report the flop rate in GFLOP/s !! this is a convenience function to print the flop rate implicit none class ( flop_rate_type ), intent ( inout ) :: self self % m_flop_rate = self % get_flop_rate () print * , \"Flop rate is \" // to_string ( self % m_flop_rate ) // \" GFLOP/s\" end subroutine flop_rate_report end module pic_flop_rate","tags":"","url":"sourcefile/pic_flop_rate.f90.html"},{"title":"pic_matrix_printer.f90 – PIC","text":"Routines to print vectors and matrices, currently no support for higher\ndimensional arrays. Need to fix that! Source Code !! Routines to print vectors and matrices, currently no support for higher !! dimensional arrays. Need to fix that! module pic_matrix_printer !! Matrix printing module use pic_types , only : dp , default_int use pic_string_utils , only : to_string implicit none ( type , external ) public interface print_array !! general interface for printing a one or two dimensional array module procedure print_vector module procedure print_matrix end interface print_array interface print_array_with_bounds !! general interface to print an array within certain bounds module procedure print_vector_n module procedure print_matrix_m_n end interface print_array_with_bounds character ( len =* ), parameter :: fmt_edge = '(F14.10)' !! no comma format character ( len =* ), parameter :: fmt_in = '(F14.10, \", \")' !! comma format for between arrays contains subroutine print_vector_n ( vec , n_elements , format_type ) !! print a vector from start up to n_elements implicit none ( type , external ) real ( dp ), intent ( in ) :: vec (:) character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected integer ( kind = default_int ), intent ( in ) :: n_elements ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_vector ( vec , n_elements ) else call print_vector_in_format ( vec , format_selected , n_elements ) end if end subroutine print_vector_n subroutine print_vector ( vec , format_type ) !! print a vector implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: vec (:) ! 1D array character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_vector ( vec ) else call print_vector_in_format ( vec , format_selected ) end if end subroutine print_vector subroutine print_matrix_m_n ( mat , n_cols , n_rows , format_type ) !! Print a matrix of n_cols by n_rows implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) ! 2D array integer ( kind = default_int ), intent ( in ) :: n_cols , n_rows character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_matrix ( mat , n_cols , n_rows ) else call print_matrix_in_format ( mat , format_selected , n_cols , n_rows ) end if end subroutine print_matrix_m_n subroutine print_matrix ( mat , format_type ) !! print a matrix in a given format implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) ! 2D array character ( len =* ), intent ( in ), optional :: format_type character ( len = 20 ) :: format_selected ! Determine the format: default to \"PLAIN\" if not specified if ( present ( format_type )) then format_selected = trim ( adjustl ( format_type )) else format_selected = 'PLAIN' end if ! Handle plain format separately or delegate to print routine based on the format if ( format_selected == 'PLAIN' ) then call print_plain_matrix ( mat ) else call print_matrix_in_format ( mat , format_selected ) end if end subroutine print_matrix subroutine print_plain_vector ( vec , n_elements ) !! private subroutine that prints a vector of n_elements implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: vec (:) integer ( kind = default_int ), intent ( in ), optional :: n_elements integer ( kind = default_int ) :: i , loop_bound if ( present ( n_elements )) then loop_bound = n_elements else loop_bound = size ( vec ) end if print * , \"Vector (Plain format):\" do i = 1 , loop_bound write ( * , fmt_edge ) vec ( i ) end do end subroutine print_plain_vector subroutine print_plain_matrix ( mat , n_cols , n_rows ) !! private subroutine that prints a plain matrix of n_cols by n_rows implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) integer ( kind = default_int ), intent ( in ), optional :: n_cols , n_rows integer ( kind = default_int ) :: i , j , loop_bound_i , loop_bound_j if ( present ( n_cols ) . and . present ( n_rows )) then loop_bound_i = n_cols loop_bound_j = n_rows else loop_bound_i = size ( mat , 1 ) loop_bound_j = size ( mat , 2 ) end if print * , \"Matrix (Plain format):\" do i = 1 , loop_bound_i do j = 1 , loop_bound_j if ( j == loop_bound_j ) then write ( * , fmt_edge , advance = \"yes\" ) mat ( i , j ) ! Last element in the row, new line else write ( * , fmt_in , advance = \"no\" ) mat ( i , j ) ! In-between elements end if end do end do end subroutine print_plain_matrix subroutine print_vector_in_format ( vec , format_type , n_elements ) !! private subroutine that prints a vector in a format implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: vec (:) character ( len =* ), intent ( in ) :: format_type !! format can be mathematica or numpy integer ( kind = default_int ), intent ( in ), optional :: n_elements character ( len = 1 ) :: open_bracket , close_bracket integer ( kind = default_int ) :: i , loop_bound_i if ( present ( n_elements )) then loop_bound_i = n_elements else loop_bound_i = size ( vec ) end if ! Select brackets based on format type if ( format_type == 'NUMPY' ) then open_bracket = '[' close_bracket = ']' else if ( format_type == 'MATHEMATICA' ) then open_bracket = '{' close_bracket = '}' else print * , \"Error: Unsupported format type. Defaulting to NumPy format.\" open_bracket = '[' close_bracket = ']' end if ! Print the vector in the selected format print * , \"Vector (\" , trim ( format_type ), \" format):\" print * , open_bracket do i = 1 , loop_bound_i if ( i == loop_bound_i ) then ! Last element in the vector write ( * , fmt_edge , advance = \"no\" ) vec ( i ) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) vec ( i ) end if end do print * , close_bracket end subroutine print_vector_in_format subroutine print_matrix_in_format ( mat , format_type , n_cols , n_rows ) !! private subroutine to print a matrix in format implicit none ( type , external ) real ( kind = dp ), intent ( in ) :: mat (:, :) character ( len =* ), intent ( in ) :: format_type !! format can be mathematica or numpy character ( len = 1 ) :: open_bracket , close_bracket integer ( kind = default_int ), intent ( in ), optional :: n_cols , n_rows integer ( kind = default_int ) :: i , j , loop_bound_i , loop_bound_j if ( present ( n_cols ) . and . present ( n_rows )) then loop_bound_i = n_cols loop_bound_j = n_rows else loop_bound_i = size ( mat , 1 ) loop_bound_j = size ( mat , 2 ) end if ! Select brackets based on format type if ( format_type == 'NUMPY' ) then open_bracket = '[' close_bracket = ']' else if ( format_type == 'MATHEMATICA' ) then open_bracket = '{' close_bracket = '}' else print * , \"Error: Unsupported format type. Defaulting to NumPy format.\" open_bracket = '[' close_bracket = ']' end if ! Print the matrix in the selected format print * , \"Matrix (\" , trim ( format_type ), \" format):\" print * , open_bracket do i = 1 , loop_bound_i write ( * , '(A)' , advance = \"no\" ) open_bracket ! Start of a row do j = 1 , loop_bound_j if ( j == loop_bound_j ) then ! Last element in the row write ( * , fmt_edge , advance = \"no\" ) mat ( i , j ) else ! Elements in between write ( * , fmt_in , advance = \"no\" ) mat ( i , j ) end if end do if ( i == loop_bound_i ) then print * , close_bracket ! Close bracket without a comma for the last row else print * , close_bracket , \",\" ! Close bracket with a comma for all other rows end if end do print * , close_bracket end subroutine print_matrix_in_format end module pic_matrix_printer","tags":"","url":"sourcefile/pic_matrix_printer.f90.html"},{"title":"pic_debugging_tools.f90 – PIC","text":"This file is intended to contain tools that can be useful when debugging\nlarge programs, simple printing routines, extracting data from an array etc. Source Code !! This file is intended to contain tools that can be useful when debugging !! large programs, simple printing routines, extracting data from an array etc. module pic_debugging_tools !! simple single include for printing routines use pic_matrix_printer , only : print_array , print_array_with_bounds use pic_string_utils , only : to_string implicit none ( type , external ) public contains end module pic_debugging_tools","tags":"","url":"sourcefile/pic_debugging_tools.f90.html"},{"title":"pic_flop_recorder.f90 – PIC","text":"flop recorder Source Code !! flop recorder module pic_flop_recorder use pic_types implicit none type :: flop_recorder_type private integer ( int64 ) :: flop_count = 0_int64 contains procedure :: add => add_flops procedure :: get => get_flops procedure :: reset => reset_flop_counter end type flop_recorder_type contains subroutine add_flops ( self , flops ) implicit none class ( flop_recorder_type ), intent ( inout ) :: self integer ( int64 ), intent ( in ) :: flops self % flop_count = self % flop_count + flops end subroutine add_flops function get_flops ( self ) result ( flops ) implicit none class ( flop_recorder_type ), intent ( in ) :: self integer ( int64 ) :: flops flops = self % flop_count end function get_flops subroutine reset_flop_counter ( self ) implicit none class ( flop_recorder_type ), intent ( inout ) :: self self % flop_count = 0_int64 end subroutine reset_flop_counter end module pic_flop_recorder","tags":"","url":"sourcefile/pic_flop_recorder.f90.html"},{"title":"pic_logger.f90 – PIC","text":"the pic_logger.f90 is the base file that defines the logger function\nthis is heavily inspired by the logger from the standard library\nbut with some key changes for my purposes.\nThe logger will be the way in which the code interacts\nwith the output to console and files Source Code !! the pic_logger.f90 is the base file that defines the logger function !! this is heavily inspired by the logger from the standard library !! but with some key changes for my purposes. !! The logger will be the way in which the code interacts !! with the output to console and files module pic_logger !! this is the logger module use pic_types , only : default_int use pic_global_definitions , only : stdout , logfile_unit implicit none ( type , external ) private public :: global_logger , logger_type character ( * ), parameter :: name = 'pic_logger' integer ( default_int ), parameter , public :: & debug_level = 10 , & verbose_level = 9 , & info_level = 8 , & performance_level = 7 , & warning_level = 6 , & error_level = 5 type :: logger_type !! custom logger data type private integer ( default_int ), public :: log_level = info_level !! set default log level to info integer ( default_int ), public :: log_file_level = verbose_level !! set default log file log level to verbose integer ( default_int ), private :: log_file_unit = - 1 logical , private :: log_file_open = . false . contains procedure , public , pass ( self ) :: configuration procedure , public , pass ( self ) :: configure procedure , public , pass ( self ) :: configure_file_output procedure , public , pass ( self ) :: close_log_file procedure , public , pass ( self ) :: log procedure , public , pass ( self ) :: debug procedure , public , pass ( self ) :: verbose procedure , public , pass ( self ) :: info procedure , public , pass ( self ) :: performance procedure , public , pass ( self ) :: warning procedure , public , pass ( self ) :: error end type logger_type type ( logger_type ) :: global_logger contains pure subroutine configuration ( self , level ) class ( logger_type ), intent ( in ) :: self integer ( default_int ), intent ( out ), optional :: level if ( present ( level )) level = self % log_level end subroutine configuration pure subroutine configure ( self , level ) class ( logger_type ), intent ( inout ) :: self integer ( default_int ), intent ( in ), optional :: level if ( present ( level )) self % log_level = level end subroutine configure subroutine configure_file_output ( self , filename , level ) class ( logger_type ), intent ( inout ) :: self character ( * ), intent ( in ) :: filename integer ( default_int ), intent ( in ), optional :: level integer ( default_int ) :: ios if ( self % log_file_open ) call self % close_log_file () open ( unit = logfile_unit , file = trim ( filename ), status = 'replace' , action = 'write' , iostat = ios ) if ( ios /= 0 ) then write ( * , * ) 'ERROR: Failed to open log file: ' , trim ( filename ) return end if self % log_file_unit = logfile_unit self % log_file_open = . true . if ( present ( level )) self % log_file_level = level end subroutine configure_file_output subroutine close_log_file ( self ) class ( logger_type ), intent ( inout ) :: self if ( self % log_file_open ) then close ( self % log_file_unit ) self % log_file_open = . false . self % log_file_unit = - 1 end if end subroutine close_log_file subroutine debug ( self , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"DEBUG\" , message , module , procedure ) end subroutine debug subroutine verbose ( self , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"VERBOSE\" , message , module , procedure ) end subroutine verbose subroutine info ( self , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"INFO\" , message , module , procedure ) end subroutine info subroutine warning ( self , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"WARNING\" , message , module , procedure ) end subroutine warning subroutine performance ( self , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"PERFORMANCE\" , message , module , procedure ) end subroutine performance subroutine error ( self , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure call self % log ( \"ERROR\" , message , module , procedure ) end subroutine error subroutine write_log_line ( unit , level , message , module , procedure ) integer ( default_int ), intent ( in ) :: unit character ( * ), intent ( in ) :: level , message character ( * ), intent ( in ), optional :: module , procedure if ( present ( module ) . and . present ( procedure )) then write ( unit , '(A, \": \", A, \".\", A, \": \", A)' ) trim ( level ), trim ( module ), trim ( procedure ), trim ( message ) else if ( present ( module )) then write ( unit , '(A, \": \", A, \": \", A)' ) trim ( level ), trim ( module ), trim ( message ) else write ( unit , '(A, \": \", A)' ) trim ( level ), trim ( message ) end if end subroutine write_log_line subroutine log ( self , level , message , module , procedure ) class ( logger_type ), intent ( in ) :: self character ( * ), intent ( in ) :: level character ( * ), intent ( in ) :: message character ( * ), intent ( in ), optional :: module , procedure integer ( default_int ) :: log_level_value select case ( trim ( level )) case ( 'DEBUG' ) log_level_value = debug_level case ( 'VERBOSE' ) log_level_value = verbose_level case ( 'INFO' ) log_level_value = info_level case ( 'WARNING' ) log_level_value = warning_level case ( 'PERFORMANCE' ) log_level_value = performance_level case ( 'ERROR' ) log_level_value = error_level case default write ( * , * ) 'ERROR: Invalid log level \"' , trim ( level ), '\"' return end select ! Console logging if ( self % log_level >= log_level_value ) then call write_log_line ( stdout , level , message , module , procedure ) end if ! File logging if ( self % log_file_open . and . self % log_file_level >= log_level_value ) then call write_log_line ( self % log_file_unit , level , message , module , procedure ) end if end subroutine log end module pic_logger","tags":"","url":"sourcefile/pic_logger.f90.html"},{"title":"pic_output_helpers.f90 – PIC","text":"this file contains “helper” routines, for example printing\na set amount of x characters to creates tables, etc. Source Code !! this file contains \"helper\" routines, for example printing !! a set amount of x characters to creates tables, etc. module pic_output_helpers !! Assorted output helper routines use pic_types , only : default_int implicit none ( type , external ) public contains subroutine print_asterisk_row ( n ) !! prints a convenient row of asterisks of length n integer ( kind = default_int ), intent ( in ) :: n !! number of asterisks to print integer ( kind = default_int ) :: i do i = 1 , n write ( * , '(A)' , advance = 'no' ) '*' end do write ( * , * ) end subroutine print_asterisk_row end module pic_output_helpers","tags":"","url":"sourcefile/pic_output_helpers.f90.html"}]}