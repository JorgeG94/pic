#:set TYPES = ['int32', 'int64', 'sp', 'dp']

#:set FORTRAN_TYPES = { &
    'int32': 'integer(int32)',&
    'int64': 'integer(int64)', &
    'sp':    'real(sp)', &
    'dp':    'real(dp)' &
}
!! pic array contains L0.5 BLAS level routines, as in things that could be use in
!! lieu of blas if you don't have it but if you do, please don't use these routines
module pic_array
!! Provides interfaces to array operating routines, current support is only for
!! 1 and 2d arrays with plans to cover up to 4d ones. I don't know why you'd use 5?
  use pic_types, only: sp, dp, int32, int64, default_int
  implicit none
  private

  public :: fill, copy, pic_transpose, pic_sum
  public :: set_threading_mode, get_threading_mode

  logical :: use_threaded_default = .false.


     interface set_threading_mode
   !! set_threading sets the threading mode for the array routines
   !! this will set the use_threaded variable to true or false depending on the input
   !! Usage: call set_threading_mode(.true.) or call set_threading_mode(.false.)
      module procedure set_threading_mode
   end interface

   interface get_threading_mode
   !! get_threading_mode returns the current threading mode for the array routines
   !! Usage: mode = get_threading_mode()
      module procedure get_threading_mode
   end interface get_threading_mode


  interface fill
  !! fill provides a generic interface to assing a value
  !! alpha of types (int32, int64, sp, dp) as defined in pic_types.F90
  !! The inteface supports filling 1d and 2d arrays of the specified
  !! variables
  !!
  !! Usage: call fill(array, value, [optional] threaded)
  !!
  !! This subroutine is threaded for performance purposes if threaded is set to .true.
  !!
  !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism
  #:for T in TYPES
    module procedure fill_vector_${T}$
  #:endfor
  #:for T in TYPES
    module procedure fill_matrix_${T}$
  #:endfor
  end interface

  interface copy
  !! copy provides a blas-less implementation of xcopy where x is (i,s,d) icopy, scopy, dcopy
  !! if you built pic with BLAS use the copy interface provided there, I will not beat BLAS
  !! copy is implemented for (int32, int64, sp, dp) for 1 and 2d arrays of the same types
  !!
  !! Usage: call copy(destination, source, [optional] threaded)
  !!
  !! This subroutine is threaded for performance purposes if threaded is set to .true.
  !!
  !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism
  #:for T in TYPES
    module procedure copy_vector_${T}$
  #:endfor
  #:for T in TYPES
    module procedure copy_matrix_${T}$
  #:endfor
  end interface

  interface pic_transpose
  !! pic_transpose provides a blas-less, threaded alternative to the Fortran transpose intrinsic
  !! which will be slow for large matrix sizes. pic_transpose does not assume symmetric matrices
  !!
  !! pic_transpose is implemented for (int32, int64, sp, dp) 2d arrays
  !!
  !! Usage: call pic_transpose(matrix_to_transpose, result, [optional] threaded)
  !!
  !! This subroutine is threaded for performance purposes if threaded is set to true
  !!
  !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism
  !!
  #:for T in TYPES
    module procedure transpose_matrix_${T}$
  #:endfor
  end interface

  interface pic_sum
  !! pic_sum provides a threaded alternative to the sum(array) Fortran intrinsic which will
  !! be too slow for large sizes of vectors and matrices. Note that this provides the total
  !! sum. As opposed to the blas alternative XASUM which does the absolute sum
  !!
  !! pic_sum is implemented for (int32, int64, sp, dp) 1 and 2d arrays
  !!
  !! Usage: result = pic_sum(array, [optional] threaded)
  !!
  !! This subroutine is threaded for performance purposes if threaded is set to true
  !!
  !! @note If this subroutine is called inside a omp threaded region it will run serially because of nested parallelism
  !!
  #: for T in TYPES
    module procedure sum_vector_${T}$
  #:endfor
  #: for T in TYPES
    module procedure sum_matrix_${T}$
  #:endfor
  end interface pic_sum

  ! potentially implement a shallow copy? nah?
  integer(default_int), parameter :: block_size = 32
    !! This is the size to block over for matrices for performance purposes

contains

   subroutine set_threading_mode(threaded)
      !! set the threading mode for the array routines, this will set the use_threaded variable
      !! to true or false depending on the input
      !!
      !! Usage: call set_threading(.true.) or call set_threading(.false.)
      logical, intent(in) :: threaded
      use_threaded_default = threaded
   end subroutine set_threading_mode

   function get_threading_mode() result(mode)
      !! get the current threading mode for the array routines
      !! Usage: mode = get_threading_mode()
      logical :: mode
      mode = use_threaded_default
   end function get_threading_mode


#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]

  subroutine fill_vector_${T}$(vector, alpha, threaded)
    ${FTYPE}$, intent(inout) :: vector(:)
    ${FTYPE}$, intent(in)    :: alpha
    logical, intent(in), optional :: threaded
    logical :: use_threads
    integer(default_int) :: i

    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if
    if(use_threads) then
      !$omp target teams loop collapse(1) private(i)
        do i = 1, size(vector,1)
          vector(i) = alpha
        end do
      !$omp end target teams loop
    else
      vector = alpha
    endif

  end subroutine fill_vector_${T}$
#:endfor

#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]

  subroutine fill_matrix_${T}$(matrix, alpha, threaded)
    ${FTYPE}$, intent(inout) :: matrix(:,:)
    ${FTYPE}$, intent(in)    :: alpha
    integer(default_int) :: i, j, rows, cols
    integer(default_int) :: ii, jj
    logical, intent(in), optional :: threaded
    logical :: use_threads
    rows = size(matrix, 1)
    cols = size(matrix, 2)
    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if
    if(use_threads) then
    !$omp target teams loop collapse(2) private(i,j,ii,jj)
    do jj = 1, cols, block_size
      do ii = 1, rows, block_size
        do j = jj, min(jj + block_size - 1, cols)
          do i = ii, min(ii + block_size - 1, rows)
            matrix(i,j) = alpha
          end do
        end do
      end do
    end do
    !$omp end target teams loop
    else
      matrix = alpha
    endif
  end subroutine fill_matrix_${T}$
#:endfor

#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]
  subroutine copy_vector_${T}$(dest, source, threaded)
    ${FTYPE}$, intent(inout) :: dest(:)
    ${FTYPE}$, intent(in)    :: source(:)
    logical, intent(in), optional :: threaded
    logical :: use_threads
    integer(default_int) :: i
    if (size(dest,1) /= size(source,1)) then
      error stop "Vector size mismatch"
    end if
    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if
    if(use_threads) then
    !$omp target teams loop collapse(1) private(i)
    do i = 1, size(dest,1)
      dest(i) = source(i)
    end do
    !$omp end target teams loop
    else
      dest = source
    endif
  end subroutine copy_vector_${T}$

#:endfor
#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]
  subroutine copy_matrix_${T}$(dest, source, threaded)
    ${FTYPE}$, intent(inout) :: dest(:,:)
    ${FTYPE}$, intent(in)    :: source(:,:)
    logical, intent(in), optional :: threaded
    logical :: use_threads
    integer(default_int) :: i, j, rows, cols
    integer(default_int) :: ii, jj
    if (size(dest,1) /= size(source,1) .or. size(dest,2) /= size(source,2)) then
      error stop "Matrix size mismatch"
    end if
    rows = size(source, 1)
    cols = size(source, 2)
    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if
    if(use_threads) then
    !$omp target teams loop collapse(2) private(i,j,ii,jj)
    do jj = 1, cols, block_size
      do ii = 1, rows, block_size
        do j = jj, min(jj + block_size - 1, cols)
          do i = ii, min(ii + block_size - 1, rows)
            dest(i,j) = source(i,j)
          end do
        end do
      end do
    end do
    !$omp end target teams loop
    else
      dest = source
    endif
  end subroutine copy_matrix_${T}$

#:endfor

#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]

  subroutine transpose_matrix_${T}$(A, B, threaded)
    ${FTYPE}$, intent(in)  :: A(:,:)
    ${FTYPE}$, intent(out) :: B(:,:)
    logical, intent(in), optional :: threaded
    logical :: use_threads
    integer(default_int) :: i, j, ii, jj, rows, cols

    rows = size(A,1)
    cols = size(A,2)

    if (size(B,1) /= cols .or. size(B,2) /= rows) then
      error stop "transpose: size mismatch"
    end if

    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if

    if(use_threads) then
    !$omp target teams loop collapse(2) private(i,j,ii,jj)
    do jj = 1, cols, block_size
      do ii = 1, rows, block_size
        do j = jj, min(jj+block_size-1, cols)
          do i = ii, min(ii+block_size-1, rows)
            B(j,i) = A(i,j)
          end do
        end do
      end do
    end do
    !$omp end targetteams loop
    else
      B = transpose(A)
    endif
  end subroutine transpose_matrix_${T}$
#:endfor

#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]
  function sum_vector_${T}$(vector, threaded) result(res)
    ${FTYPE}$, intent(in)  :: vector(:)
    logical, intent(in), optional :: threaded
    logical :: use_threads
    ${FTYPE}$ :: res
    integer(default_int) :: i
    res = 0_${T}$
    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if
    if(use_threads) then
      !$omp target teams loop private(i) collapse(1) reduction(+:res)
      do i = 1, size(vector,1)
        res = res + vector(i)
      end do
      !$omp end target teams loop
    else
      res = sum(vector)
    endif
  end function sum_vector_${T}$
#:endfor

#:for T in TYPES
  #:set FTYPE = FORTRAN_TYPES[T]
  function sum_matrix_${T}$(matrix, threaded) result(res)
    ${FTYPE}$, intent(in) :: matrix(:,:)
    logical, intent(in), optional :: threaded
    logical :: use_threads
    ${FTYPE}$ :: res
    integer(default_int) :: cols, rows, i, j, ii, jj

    rows = size(matrix,1)
    cols = size(matrix,2)

    if (present(threaded)) then
      use_threads = threaded
    else
      use_threads = use_threaded_default
    end if
    res = 0_${T}$
    if(use_threads) then
    !$omp target teams loop collapse(2) private(i,j,ii,jj) reduction(+: res)
    do jj = 1, cols, block_size
      do ii = 1, rows, block_size
        do j = jj, min(jj+block_size-1, cols)
          do i = ii, min(ii+block_size-1, rows)
            res = res + matrix(i,j)
          end do
        end do
      end do
    end do
    !$omp end target teams loop
    else
      res = sum(matrix)
    endif

  end function sum_matrix_${T}$

#:endfor

end module pic_array
